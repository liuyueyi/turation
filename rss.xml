<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml" rel="self" type="application/rss+xml"/>
    <title>一灰灰的站点</title>
    <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/</link>
    <description>一灰灰的全网知识站点</description>
    <language>zh-CN</language>
    <pubDate>Fri, 03 Feb 2023 08:30:24 GMT</pubDate>
    <lastBuildDate>Fri, 03 Feb 2023 08:30:24 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by 一灰灰blog</copyright>
    <image>
      <title>一灰灰的站点</title>
      <url>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/logo.svg</url>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/</link>
    </image>
    <category>SpringBoot</category>
    <category>基础系列</category>
    <category>AOP</category>
    <category>应用篇</category>
    <category>Bean</category>
    <category>踩坑记录</category>
    <category>SpEL</category>
    <category>事件</category>
    <category>国际化</category>
    <category>定时器</category>
    <category>日志</category>
    <category>配置</category>
    <category>使用指南</category>
    <category>Guide</category>
    <item>
      <title>1.基本使用姿势小结</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/01.190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/01.190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.基本使用姿势小结</source>
      <description>一般来讲，谈到Spring的特性，绕不过去的就是DI（依赖注入）和AOP（切面），在将bean的系列中，说了DI的多种使用姿势；接下来看一下AOP的玩法</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Fri, 01 Mar 2019 17:47:02 GMT</pubDate>
      <content:encoded><![CDATA[<p>一般来讲，谈到Spring的特性，绕不过去的就是DI（依赖注入）和AOP（切面），在将bean的系列中，说了DI的多种使用姿势；接下来看一下AOP的玩法</p>
<!-- more -->
<h2> I. 背景知识</h2>
<p>在实际使用之前有必要了解一下什么是AOP，以及AOP的几个基本概念</p>
<h3> 1.  advice</h3>
<ul>
<li>before: 在方法执行之前被调用</li>
<li>after: 在方法执行之后调用</li>
<li>after returning: 方法执行成功之后</li>
<li>after throwing: 方法抛出异常之后</li>
<li>around: 环绕，自己在内部决定方法的执行时机，因此可以在之前之后做一些业务逻辑</li>
</ul>
<h3> 2. join point</h3>
<p>连接点，比如方法调用，方法执行，字段设置/获取、异常处理执行、类初始化、甚至是 for 循环中的某个点</p>
<p>但 Spring AOP 目前仅支持方法执行 (method execution)</p>
<p>简单来说，Spring AOP中，PointCut就是那个被拦截的方法</p>
<h3> 3. pointcut</h3>
<p>切点，用来描述满足什么规则的方法会被拦截</p>
<ul>
<li>正则表达式 ： <code>@Before("execution(public * com.git.hui.demo.base.bean.*.*(..))")</code></li>
<li>注解拦截方式 ：<code>@Around("@annotation(parameterCheck)")</code></li>
</ul>
<h3> 4. aspect</h3>
<p>切面是切点和通知的结合。通知和切点共同定义了关于切面的全部内容，它是什么时候，在何时和何处完成功能</p>
<h3> 5. introduction</h3>
<p>引入允许我们向现有的类添加新的方法或者属性</p>
<h3> 6. weaving</h3>
<p>组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>
<p>简单来讲就是生成一个代理类，在调用被拦截的方法时，实际上执行的是代理类，这个代理类内部执行切面逻辑</p>
<h2> II. 使用说明</h2>
<h3> 1. 基本配置</h3>
<p>首先是基本环境的搭建, 先贴上必要的xml配置, 使用aop需要引入包： <code>spring-boot-starter-aop</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 代码准备</h3>
<p>首先创建一个被拦截的bean: <code>com.git.hui.boot.aop.demo.DemoBean</code>，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在启动类中，执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. AOP使用</h3>
<p>在实际使用之前，需要创建一个切面，用<code>@Aspect</code>声明，其次切面也需要作为bean托付给Spring容器管理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. before</h4>
<p>在方法调用之前，需要执行一些操作，这个时候可以使用 <code>@Before</code> 注解来声明<code>before advice</code></p>
<p>一种可使用姿势如下，我们的切点直接在注解中进行定义，使用正则表达式的方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. after</h4>
<p>在方法调用完毕之后，再执行一些操作，这个时候after就可以派上用场，为了考虑切点的通用性，我们可以考虑声明一个切点，使用<code>@Pointcut</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用pointcut的方式也比较简单，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. after returning</h4>
<p>在正常返回结果之后，再次执行，这个也挺有意思的，通常使用这个advice时，一般希望获取返回结果，那么应该怎么处理呢？</p>
<ul>
<li><code>org.aspectj.lang.annotation.AfterReturning#returning</code> 指定返回结果对应参数name</li>
<li>返回结果作为参数传入，要求类型一致，否则不生效</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. around</h4>
<p>这个也比较常见，在方法执行前后干一些事情，比如常见的耗时统计，日志打印，安全控制等，很多都是基于around advice实现的</p>
<p>使用这个advice需要注意的是传入参数类型为 <code>ProceedingJoinPoint</code>，需要在方法内部显示执行<code>org.aspectj.lang.ProceedingJoinPoint#proceed()</code>来表示调用方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. 输出</h4>
<p>执行之后输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果上，可以看到每个advice的使用范围，当然也带来了一些疑问</p>
<ul>
<li>可以存在多个同类型的advice，拦截同一个目标吗？（如两个around都拦截methodA方法，那么methodA方法被调用时，两个around advice是否都会执行）</li>
<li>多个advice之间的优先级怎么定义？</li>
<li>aop拦截的目标方法有没有限制（对非public的方法可以拦截么？）</li>
<li>被拦截的方法中存在相互调用的时候，会怎样？（如methodA,methodB都可以被拦截，且methodA中调用了methodB，那么在执行methodA时，methodB的各种advice是否会被触发？）</li>
<li>基于注解的aop方式可以怎样用</li>
</ul>
<p>以上这些问题留在下一篇进行介绍</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190301/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.高级使用技能</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/02.190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/02.190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.高级使用技能</source>
      <description>前面一篇博文 190301-SpringBoot基础篇AOP之基本使用姿势小结 介绍了aop的简单使用方式，在文章最后，抛出了几个问题待解决，本篇博文则将针对前面的问题，看下更多关于AOP的使用说明</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Sat, 02 Mar 2019 19:22:46 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文 <a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a> 介绍了aop的简单使用方式，在文章最后，抛出了几个问题待解决，本篇博文则将针对前面的问题，看下更多关于AOP的使用说明</p>
<!-- more -->
<h2> I. 高级技能</h2>
<h3> 1. 注解拦截方式</h3>
<p>前面一文，主要介绍的是根据正则表达式来拦截对应的方法，接下来演示下如何通过注解的方式来拦截目标方法，实现也比较简单</p>
<p>首先创建注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在目标方法上添加注解，这里借助前面博文中工程进行说明，新建一个<code>com.git.hui.boot.aop.demo2.AnoDemoBean</code>，注意这个包路径，是不会被前文的<code>AnoAspect</code>定义的Advice拦截的，这里新建一个包路径的目的就是为了尽可能的减少干扰项</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来定义对应的advice, 直接在前面的<code>AnoAspect</code>中添加（不知道前文的也没关系，下面贴出相关的代码类，前文的类容与本节内容无关）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，在执行目标方法之前，会先执行before advice中的逻辑</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 多个advice拦截</h3>
<p>一个方法执行时，如果有多个advice满足拦截规则，是所有的都会触发么？通过前面一篇博文知道，不同类型的advice是都可以拦截的，如果出现多个相同类型的advice呢？</p>
<p>在前面一篇博文的基础上进行操作，我们扩展下<code>com.git.hui.boot.aop.demo.DemoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的测试切面内容如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，所有的切面都执行了，也就是说，只要满足条件的advice，都会被拦截到</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 嵌套拦截</h3>
<p>嵌套的方式有几种case，先看第一种</p>
<h4> a. 调用方法不满足拦截规则，调用本类中其他满足拦截条件的方法</h4>
<p>这里我们借助第一节中的bean来继续模拟, 在<code>AnoDemoBean</code>类中，新增一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的切面为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后测试case需要改为直接调用 <code>AnoDemoBean#randUUID</code>，需要看这个方法内部调用的<code>genUUID</code>是否会被切面拦截住</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，没有切面的日志，表明这种场景下，不会被拦截</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 调用方法不满足拦截规则，调用其他类中满足拦截条件的方法</h4>
<p>依然使用前面的例子进行说明，不过是稍稍改一下<code>AnoDemoBean</code>，调用第二节中的DemoBean的方法</p>
<p>DemoBean的代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后AnoDemoBean的代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码和前面完全一致，接下来看下输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的日志分析中，可以明确看出对比，调用本类中，满足被拦截的方法，也不会走切面逻辑；调用其他类中的满足切面拦截的方法，会走切面逻辑</p>
<h4> c. 调用方法满足切面拦截条件，又调用其他满足切面拦截条件的方法</h4>
<p>这个和两个case有点像，不同的是直接调用的方法也满足被切面拦截的条件，我们主要关注点在于嵌套调用的方法，会不会进入切面逻辑，这里需要修改的地方就很少了，直接把 <code>AnoDemoBean#randUUID</code>方法上添加注解，然后执行即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果进行反推，一个结论是</p>
<ul>
<li>执行的目标方法，如果调用了本类中一个满足切面规则的方法A时，在执行方法A的过程中，不会触发切面逻辑</li>
<li>执行的目标方法，如果调用其他类中一个满足切面规则的方法B时，在执行方法B的过程中，将会触发切面逻辑</li>
</ul>
<h3> 4. AOP拦截方法作用域</h3>
<p>前面测试的被拦截方法都是public，那么是否表明只有public方法才能被拦截呢？</p>
<p>从第三节基本可以看出，private方法首先淘汰出列，为啥？因为private方法正常来讲只能内部调用，而内部调用不会走切面逻辑；所以接下来需要关注的主要放在默认作用域和protected作用域</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不直接使用这个类里面的方法，借助前面的 <code>AnoDemoBean</code>， 下面给出了通过反射的方式来调用private方法的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，从日志打印来看，protected和default方法的切面都走到了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 小结</h3>
<p>本篇博文篇幅比较长，主要是测试代码比较占用地方，因此有必要简单的小结一下，做一个清晰的归纳，方便不想看细节，只想获取最终结论的小伙伴</p>
<p><strong>注解拦截方式:</strong></p>
<ul>
<li>首先声明注解</li>
<li>在目标方法上添加注解</li>
<li>切面中，advice的内容形如 <code>@Around("@annotation(AnoDot)")</code></li>
</ul>
<p><strong>多advice情况：</strong></p>
<ul>
<li>多个advice满足拦截场景时，全部都会执行</li>
</ul>
<p><strong>嵌套场景</strong></p>
<ul>
<li>执行的目标方法，如果调用了本类中一个满足切面规则的方法A时，在执行方法A的过程中，不会触发切面逻辑</li>
<li>执行的目标方法，如果调用其他类中一个满足切面规则的方法B时，在执行方法B的过程中，将会触发切面逻辑</li>
</ul>
<p><strong>作用域</strong></p>
<ul>
<li>public, protected, default 作用域的方法都可以被拦截</li>
</ul>
<p><strong>优先级</strong></p>
<p>这个内容因为特别多，所以有必要单独拎出来，其主要的分类如下</p>
<ul>
<li>同一aspect，不同advice的执行顺序</li>
<li>不同aspect，advice的执行顺序</li>
<li>同一aspect，相同advice的执行顺序</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190302/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.拦截优先级详解</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/03.190310-SpringCloud%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/03.190310-SpringCloud%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.拦截优先级详解</source>
      <description>前面两篇分别介绍了AOP的基本使用姿势和一些高级特性，当时还遗留了一个问题没有说明，即不同的advice，拦截同一个目标方法时，优先级是怎样的，本篇博文将进行详细分析 同一个切面中，不同类型的advice的优先级 同一个切面中，同一种类型的advice优先级 不同切面中，同一类型的advice优先级 不同切面中，不同类型的advice优先级</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Sun, 10 Mar 2019 21:37:05 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面两篇分别介绍了AOP的基本使用姿势和一些高级特性，当时还遗留了一个问题没有说明，即不同的advice，拦截同一个目标方法时，优先级是怎样的，本篇博文将进行详细分析</p>
<ul>
<li>同一个切面中，不同类型的advice的优先级</li>
<li>同一个切面中，同一种类型的advice优先级</li>
<li>不同切面中，同一类型的advice优先级</li>
<li>不同切面中，不同类型的advice优先级</li>
</ul>
<!-- more -->
<h2> I. 统一切面，不同类型ddvice优先级</h2>
<p>在不分析源码的前提下，也只能通过实际的case来看优先级问题了，我们现在设计一下使用实例，通过输出结果来看对应的优先级</p>
<h3> 1. case设计</h3>
<p>首先创建被拦截的bean: <code>com.git.hui.boot.aop.order.InnerDemoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来写一个切面，里面定义我们常见的各种advice</p>
<blockquote>
<p>对于aop的使用，有疑问的可以参考: <a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>使用SpringBoot的项目进行测试aop，使用还是比较简单的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面执行的输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果进行反推，我们可以知道统一切面中，advice执行的先后顺序如下</p>
<figure><img src="/imgs/190310/00.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> II. 同一切面，同一类型切面</h3>
<p>正常来讲，拦截一个方法时，统一类型的切面逻辑都会写在一起，那这个case有什么分析的必要呢？</p>
<p>在我们实际的使用中，同一类型的advice拦截同一个方法的可能性还是很高的，why? 因为多个advice有自己定义的拦截规则，它们之间并不相同，但可能存在交集，比如我们在上面的切面中，再加一个拦截注解的<code>before advice</code></p>
<h3> 1. case设计</h3>
<p>依然是上面的<code>InnerDemoBean</code>，方法上加一个自定义注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后加一个拦截注解的advice</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>再次执行前面的case，然后看下输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主要看下两个before，发现 <code>AnoBefore</code> 在前面; 因此这里的一个猜测，顺序就是根据方法命名的顺序来的，比如我们再加一个 <code>doXBefore</code>，然后我们预估输出结果应该是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>额外添加一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是输出结果如下，和我们预期一致</p>
<figure><img src="/imgs/190310/01.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 3. Order注解尝试</h3>
<p>我们知道有个Order注解可以来定义一些优先级，那么把这个注解放在advice方法上，有效么？实际尝试一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果注解有效，我们预期输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再次执行，看下输出结果是否和我们预期一样</p>
<figure><img src="/imgs/190310/02.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 4. 小结</h3>
<p>同一个切面中，相同的类型的advice，优先级是根据方法命名来的，加<code>@Order</code>注解是没有什么鸟用的，目前也没有搜索到可以调整优先级的方式</p>
<h3> III. 不同切面，相同类型的advice</h3>
<p>如果说上面这种case不太好理解为啥会出现的话，那么这个可能就容易理解多了；毕竟一个切面完成一件事情，出现相同的advice就比较常见了；</p>
<p>比如spring mvc中，我们通常会实现的几个切面</p>
<ul>
<li>一个before advice的切面，实现输出请求日志</li>
<li>一个before advice的切面，实现安全校验（这种其实更常见的是放在filter/intercept中）</li>
</ul>
<h3> 1. case设计</h3>
<p>现在就需要再加一个切面，依然以before advice作为case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>接下来看测试输出结果如下图</p>
<figure><img src="/imgs/190310/03.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<p>发现了一个有意思的事情了，<code>AnotherOrderAspect</code>切面的输出，完全在<code>OrderAspect</code>切面中所有的advice之前，接着我们再次尝试使用<code>@Order</code>注解来试试，看下会怎样</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果顺序有关，我们预期的输出结果应该是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际测试输出如下，和我们预期一致</p>
<figure><img src="/imgs/190310/04.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 3. 小结</h3>
<p>从上面的测试来看，不同的切面，默认顺序实际上是根据切面的命令来的；</p>
<ul>
<li>A切面中的advice会优先B切面中同类型的advice</li>
<li>我们可以通过 <code>Order</code> 注解来解决不同切面的优先级问题，依然是值越小，优先级越高</li>
</ul>
<h2> IV. 不同切面，不同advice顺序</h2>
<p>其实前面的case已经可以说明这个问题了，现在稍稍丰富一下<code>AnotherOrderAspect</code>，看下结果</p>
<h3> 1. case设计</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>看下执行后的输出结果</p>
<figure><img src="/imgs/190310/05.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<p>假设A切面优先级高于B切面，那么我们执行先后顺序如下</p>
<figure><img src="/imgs/190310/06.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h2> V. 小结</h2>
<p>本篇内容有点多，针对前面的测试以及结果分析，给出一个小结，方便直接获取最终的答案</p>
<h3> 1. 不同advice之间的优先级顺序</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2. 统一切面中相同advice</h3>
<p>统一切面中，同类型的advice的优先级根据方法名决定，暂未找到可以控制优先级的使用方式</p>
<h3> 3. 不同切面优先级</h3>
<p>不同切面优先级，推荐使用 <code>@Order</code>注解来指定，数字越低，优先级越高</p>
<h3> 4. 不同切面advice执行顺序</h3>
<p>优先级高的切面中的advice执行顺序会呈现包围优先级低的advice的情况，更直观的先后顺序，推荐看第四节的顺序图，更加清晰明了</p>
<h2> VI. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190310/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.AOP实现一个日志插件（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/04.190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/04.190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.AOP实现一个日志插件（应用篇）</source>
      <description>前面针对AOP的使用姿势和一些疑问进行了说明，这一篇则从应用的角度出发，看下AOP可以实现些什么样的效果 190301-SpringBoot基础篇AOP之基本使用姿势小结 190302-SpringBoot基础篇AOP之高级使用技能 190310-SpringCloud基础篇AOP之拦截优先级详解</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <category>应用篇</category>
      <pubDate>Wed, 13 Mar 2019 21:27:37 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面针对AOP的使用姿势和一些疑问进行了说明，这一篇则从应用的角度出发，看下AOP可以实现些什么样的效果</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/02/190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD/" target="_blank" rel="noopener noreferrer">190302-SpringBoot基础篇AOP之高级使用技能</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/10/190310-SpringCloud%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190310-SpringCloud基础篇AOP之拦截优先级详解</a></li>
</ul>
<!-- more -->
<h2> I. AOP实现日志拦截</h2>
<h3> 1. 背景及目标</h3>
<p>对于后端服务而言，一个日常的需求就是需要记录一些关键方法调用历史情况，用于分析接口的响应、问题定位排查等，属于比较常见的场景了</p>
<p>因此，我们希望可以针对某些接口，知道传入的参数时什么，谁调用的，返回了啥，耗时多少这些基本信息。显然这些属于公用的普适性需求，与方法本身的业务无关，如果直接在每个方法内部中加这个逻辑，就比较恶心了；为了最少的倾入性和通用性，正好可以使用AOP来实现这么一个功能</p>
<ul>
<li>拦截目标方法的执行</li>
<li>打印请求参数，返回结果和执行时间到日志</li>
</ul>
<h3> 2. 实现</h3>
<p>这个属于比较aop的简单使用场景，因为需要知道返回结果，所有选择 <code>around</code> 或者 <code>afterReturning</code> advice；此外需要统计方法执行耗时，这样就只能选中 <code>around</code> 了</p>
<p>首先我们支持自定义注解方式，先定义一个注解，只要这个方法上有这个注解，就拦截</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，如果想更通用拦截指定包路径下的方法，可以如下定义PointCut；注意下面语句中的<code>||</code>表示或，只有有一个满足即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是我们的advice实现了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试</h3>
<p>添加下测试代码，我们先创建两个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190313/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.接口上注解AOP拦截不到场景兼容</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/05.210525-SpringBoot%E6%8E%A5%E5%8F%A3%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E5%9C%BA%E6%99%AF%E5%85%BC%E5%AE%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/05.210525-SpringBoot%E6%8E%A5%E5%8F%A3%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E5%9C%BA%E6%99%AF%E5%85%BC%E5%AE%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.接口上注解AOP拦截不到场景兼容</source>
      <description>在Java的开发过程中，面向接口的编程可能是大家的常态，切面也是各位大佬使用Spring时，或多或少会使用的一项基本技能；结果这两个碰到一起，有意思的事情就发生了，接口方法上添加注解，面向注解的切面拦截，居然不生效 这就有点奇怪了啊，最开始遇到这个问题时，表示难以相信；事务注解也挺多是写在接口上的，好像也没有遇到这个问题（难道是也不生效，只是自己没有关注到？） 接下来我们好好瞅瞅，这到底是怎么个情况</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Tue, 25 May 2021 12:33:16 GMT</pubDate>
      <content:encoded><![CDATA[<p>在Java的开发过程中，面向接口的编程可能是大家的常态，切面也是各位大佬使用Spring时，或多或少会使用的一项基本技能；结果这两个碰到一起，有意思的事情就发生了，接口方法上添加注解，面向注解的切面拦截，居然不生效</p>
<p>这就有点奇怪了啊，最开始遇到这个问题时，表示难以相信；事务注解也挺多是写在接口上的，好像也没有遇到这个问题（难道是也不生效，只是自己没有关注到？）</p>
<p>接下来我们好好瞅瞅，这到底是怎么个情况</p>
<!-- more -->
<h2> I. 场景复现</h2>
<p>这个场景复现相对而言比较简单了，一个接口，一个实现类；一个注解，一个切面完事</p>
<h3> 1. 项目环境</h3>
<p>采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>IDEA</code> + <code>maven</code> 进行开发</p>
<p>添加aop依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 复现case</h3>
<p>声明一个注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拦截切面，下面这段代码来自之前分享的博文 <a href="https://spring.hhui.top/spring-blog/2019/03/13/190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【基础系列】AOP实现一个日志插件（应用篇）</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个接口与实现类，注意下面的两个方法，一个注解在接口上，一个注解在实现类上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后输出结果如下（有图有真相，别说我骗你🙃）</p>
<figure><img src="/imgs/210525/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 事务注解测试</h3>
<p>上面这个不生效，那我们通常写在接口上的事务注解，会生效么？</p>
<p>添加mysql操作的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库配置 <code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是我们的接口定义与实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的update方法，事务注解在接口上，接下来我们需要确认调用之后，是否会回滚</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210525/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>回滚了，有木有！！！</p>
<p>果然是没有问题的，吓得我一身冷汗，这要是有问题，那就...(不敢想不敢想)</p>
<p>所以问题来了，为啥第一种方式不生效呢？？？</p>
<h2> II. 接口注解切面拦截实现</h2>
<p>暂且按下探寻究竟的欲望，先看下如果想让我们可以拦截接口上的注解，可以怎么做呢?</p>
<p>既然拦截不上，多半是因为子类没有继承父类的注解，所以在进行切点匹配时，匹配不到；既然如此，那就让它在匹配时，找下父类看有没有对应的注解</p>
<h3> 1. 自定义Pointcut</h3>
<p>虽说是自定义，但也没有要求我们直接实现这个接口，我们选择<code>StaticMethodMatcherPointcut</code>来补全逻辑</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们采用声明式来实现切面逻辑</p>
<h3> 2. 自定义Advice</h3>
<p>这个advice就是我们需要执行的切面逻辑，和上面的日志输出差不多，区别在于参数不同</p>
<p>自定义advice实现自接口<code>MethodInterceptor</code>，顶层接口是<code>Advice</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 自定义Advisor</h3>
<p>将上面自定义的切点pointcut与通知advice整合，实现我们的切面</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 最后注册切面</h3>
<p>说是注册，实际上就是声明为bean，丢到spring容器中而已</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次执行上面的测试用例，输出如下</p>
<figure><img src="/imgs/210525/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>接口上的注解也被拦截了，但是最后一个耗时的输出，有点夸张了啊，采用上面这种方式，这个耗时有点夸张了啊，生产环境这么一搞，岂不是分分钟卷铺盖的节奏</p>
<ul>
<li>可以借助 StopWatch 来查看到底是哪里的开销增加了这么多 （关于StopWatch的使用，下篇介绍）</li>
<li>单次执行的统计偏差问题，将上面的调用，执行一百遍之后，再看耗时，趋于平衡，如下图</li>
</ul>
<figure><img src="/imgs/210525/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>到这里，我们实现了接口上注解的拦截，虽说解决了我们的需求，但是疑惑的地方依然没有答案</p>
<ul>
<li>为啥接口上的注解拦截不到 ？</li>
<li>为啥事务注解，放在接口上可以生效，事务注解的实现机制是怎样的？</li>
<li>自定义的切点，可以配合我们的注解来玩么？</li>
<li>为什么首次执行时，耗时比较多；多次执行之后，则耗时趋于正常？</li>
</ul>
<p>上面这几个问题，毫无意外，我也没有确切的答案，待我研究一番，后续再来分享</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>接口切面拦截: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect</a></li>
<li>事务: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210525/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.AOP结合SpEL实现日志输出的注意事项</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/06.210608-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E7%BB%93%E5%90%88SpEL%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/06.210608-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E7%BB%93%E5%90%88SpEL%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.AOP结合SpEL实现日志输出的注意事项</source>
      <description>使用AOP来打印日志大家一把都很熟悉了，最近在使用的过程中，发现了几个有意思的问题，一个是SpEL的解析，一个是参数的JSON格式输出</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Tue, 08 Jun 2021 18:50:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>使用AOP来打印日志大家一把都很熟悉了，最近在使用的过程中，发现了几个有意思的问题，一个是SpEL的解析，一个是参数的JSON格式输出</p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. AOP &amp; SpEL</h2>
<p>关于AOP与SpEL的知识点，之前都有过专门的介绍，这里做一个聚合，一个非常简单的日志输出切面，在需要打印日志的方法上，添加注解<code>@Log</code>，这个注解中定义一个<code>key</code>，作为日志输出的标记；key支持SpEL表达式</p>
<h3> 1. AOP切面</h3>
<p>注解定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切面逻辑</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个逻辑比较简单，和大家熟知的使用姿势没有太大的区别</p>
<h3> 2. StandardEvaluationContext安全问题</h3>
<p>关于<code>StandardEvaluationContext</code>的注入问题，有兴趣的可以查询一下相关文章；对于安全校验较高的，要求只能使用<code>SimpleEvaluationContext</code>，使用它的话，SpEL的能力就被限制了</p>
<p>如加一个测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了验证<code>SimpleEvaluationContext</code>，我们修改一下上面的<code>loadKeys</code>方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210608/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>直接提示方法找不到！！！</p>
<h3> 3. gson序列化问题</h3>
<p>上面的case中，使用的FastJson对传参进行序列化，接下来我们采用Gson来做序列化</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后新增一个特殊的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面方法的第二个参数，非常有意思的是，传参是自己的实例；再次执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接抛了异常</p>
<figure><img src="/imgs/210608/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这就很尴尬了，一个输出日志的辅助工具，因为序列化直接导致接口不可用，这就不优雅了；而我们作为日志输出的切面，又是没有办法控制这个传参的，没办法要求使用的参数，一定能序列化，这里需要额外注意 （比较好的方式就是简单对象都实现toString,然后输出toString的结果；而不是json串）</p>
<h3> 4. 小结</h3>
<p>虽然上面一大串的内容，总结下来，也就两点</p>
<ul>
<li>SpEL若采用的是<code>SimpleEvaluationContext</code>，那么注意spel的功能是减弱的，一些特性不支持</li>
<li>若将方法参数json序列化输出，那么需要注意某些类在序列化的过程中，可能会抛异常</li>
</ul>
<p>（看到这里的小伙伴，不妨点个赞，顺手关注下微信公众号”一灰灰blog“，我的公众号已经寂寞的长草了😭）</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/014-spel-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/014-spel-aop</a></li>
</ul>
<p><strong>AOP系列博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486254&amp;idx=1&amp;sn=d33ed6b90880fe518f587225a4550283&amp;chksm=fce71082cb90999461d262d4ad41683ebea96d1a0eb6c8e48dcc8613922841b3c1dcd2c8f5fb&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础系列AOP无法拦截接口上注解场景兼容</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484621&amp;idx=1&amp;sn=fd24ef403c138292aff808daedcc87dd&amp;chksm=fce71f61cb9096779257b53aab53cd985e35d5ed17fdd53be6aa953a2d97c3734aa0ba49a309&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础系列实现一个简单的分布式定时任务(应用篇)</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484170&amp;idx=1&amp;sn=56ae689c23d75649009d59dd2a9b97c2&amp;chksm=fce718a6cb9091b071a8f8c71c096fcd91bf3b764f96f02e09e6e345df455b25573124874a92&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之拦截优先级详解</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484181&amp;idx=1&amp;sn=4518fb3d9c60bdb04428f044cc75af85&amp;chksm=fce718b9cb9091af543634b338cbc998bf3014f5a230244e7340d92169a58c150ae07211d713&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot应用篇之AOP实现日志功能</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484155&amp;idx=1&amp;sn=9ae1870f6ed9bd69a2c0745fbfddcb2a&amp;chksm=fce71957cb909041b418ae24ae9dca5f64c8546f8db230c9b5a1d8d21828f2b8e8171568f12a&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之高级使用技能</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484151&amp;idx=1&amp;sn=96394bfb6cd4d009ab32d5605fc96d25&amp;chksm=fce7195bcb90904d31a2f6a4f3367455c81715944ec0c89b4dc2f4502e27fecbbf37a780bef6&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之基本使用姿势小结</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210608/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>AOP专题</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">AOP专题</source>
      <description>教你如何玩转Spring的两大特性之一AOP，掌握工作中的代码整洁之道</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>教你如何玩转Spring的两大特性之一AOP，掌握工作中的代码整洁之道</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.Bean之基本定义与使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/01.181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/01.181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.Bean之基本定义与使用</source>
      <description>我们知道在Spring中，有两个非常有名的特性，依赖注入（DI）与切面（AOP)，其中依赖注入其主要的作用，可以说就是维护Spring容器创建的Bean之间的依赖关系，简单来说就是一个bean（假定名为A）持有另一个Bean（假定名为B）的引用作为成员变量b，则由Spring容器自动将B赋值给A的成员变量b 因此在想理解依赖注入，就有必要了解下创建和使用Bean的几种姿势；本篇博文作为基础篇，将介绍 bean的基本创建方式 bean的常见使用姿势 I. Bean的几种创建方式</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Tue, 09 Oct 2018 22:42:01 GMT</pubDate>
      <content:encoded><![CDATA[<p>我们知道在Spring中，有两个非常有名的特性，依赖注入（DI）与切面（AOP)，其中依赖注入其主要的作用，可以说就是维护Spring容器创建的Bean之间的依赖关系，简单来说就是一个bean（假定名为A）持有另一个Bean（假定名为B）的引用作为成员变量b，则由Spring容器自动将B赋值给A的成员变量b</p>
<p>因此在想理解依赖注入，就有必要了解下创建和使用Bean的几种姿势；本篇博文作为基础篇，将介绍</p>
<ul>
<li>bean的基本创建方式</li>
<li>bean的常见使用姿势</li>
</ul>
<!--more-->
<h2> I. Bean的几种创建方式</h2>
<p>在SpringBoot的大环境下，基本上不再使用以前的xml配置，所以本篇博文也不再介绍以往Spring中，通过xml来声明bean的使用方式</p>
<h3> 1. 注解方式</h3>
<p>这种也是我们最常见的使用姿势，一般就是在类上添加<code>@Component</code>, <code>@Service</code>等注解（<code>@Controller</code>表示提供http接口的bean, <code>@Configuration</code>表示配置类Bean)</p>
<p>添加上这种注解的类，会被Spring容器扫描加载，自动生成单例的bean，一个典型的实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在实际测试时，发现无法获取上面的bean，就需要注意下bean的包路径，是否在被你程序的扫描路径包含</p>
<h3> 2. <code>@Bean</code>定义方式</h3>
<p>这种方式，主要是结合<code>Configuration</code>来定义bean，首先是声明一个配置类，然后再配置类中，通过返回bean对象的方法形式来声明bean，一般使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的一点是BeanLoadConfig类本身也被Spring容器看为一个Bean</p>
<h3> 3. 工厂类方式</h3>
<p>FactoryBean本质上也是一个Bean，但是可以通过他来生成你期待的Bean，在实际的业务场景中可能使用场景不多，但是在抽象的框架层面应用很广，一个简单的使用姿势如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. Bean的使用姿势</h2>
<p>前面介绍了如何创建Bean，创建完之后，接着就是使用了，下面介绍最基本的几种使用方式</p>
<h3> 1. <code>Autowired</code>注入</h3>
<p>将注解<code>@Autowired</code>或者<code>@Resource</code>添加到成员变量上，即表示这个成员变量会由Spring容器注入对应的Bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由Spring容器依赖注入的方式，从代码上看，是不会找到有什么地方主动的塞入了这个值，但是使用处却可以直接使用，因此需要注意有可能会出现npe</p>
<h3> 2. Setter方法</h3>
<p>和前面其实也差不多，只不过注解放在了setter方法上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 构造方法</h3>
<p>顾名思义，就是在构造方法中传入Bean对象来初始化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的好处是可以避免潜在的NPE问题（后面将有博文专门提及），而且针对Bean不存在的情况，系统会抛出异常，提早知道问题</p>
<h3> 4. 小结</h3>
<p>本篇主要介绍了Bean的基本创建和使用姿势，基本上也是我们在平常的业务开发中使用得最广的方式了，是不是会这些就行了呢？业务做多了之后，随之而来就会有一些疑问</p>
<ul>
<li>提供的jar包给第三方使用，如何保证其他人能顺利加载jar包中的bean？</li>
<li>bean初始化的先后顺序是怎样的？</li>
<li>可以手动注册一个Bean么，改怎么做？</li>
<li>BeanFactory与FactoryBean的区别是啥，各自的典型应用场景又是什么？</li>
<li>重名的Bean是否可以解决？</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181009/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.Bean之自动加载</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/02.181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/02.181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.Bean之自动加载</source>
      <description>前面一篇介绍了Bean的常用姿势，在一个项目中，可能不会出现什么问题，可如果你提供了一个Jar包供第三方用户使用，那么你这个jar包中的Bean，能被第三方加载么？ 本篇博文将主要介绍AutoConfig相关的内容，即如果我想提供一个jar包供第三方在Spring的环境下使用时，可以怎么做</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 12 Oct 2018 19:17:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇介绍了Bean的常用姿势，在一个项目中，可能不会出现什么问题，可如果你提供了一个Jar包供第三方用户使用，那么你这个jar包中的Bean，能被第三方加载么？</p>
<p>本篇博文将主要介绍AutoConfig相关的内容，即如果我想提供一个jar包供第三方在Spring的环境下使用时，可以怎么做</p>
<!-- more -->
<h2> I. AutoConfiguration</h2>
<p>通常来讲，要想实现上面的场景，建议是借助<code>@Configuration</code>注解的配置类来管理你自己的bean，这样对于其他使用方而言，只需要加载到你的配置类，就可以注册你的所有bean了</p>
<h3> 1. 包路径扫描使用姿势</h3>
<p>首先是在你的工程中定义一个配置类，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置类功能比较简单，指明扫描的包路径，然后这个配置类如何给使用方使用呢？</p>
<p><strong>将配置放在指定的文件中即可，使用者会自动加载，从而避免的代码的侵入</strong></p>
<ul>
<li>在资源目录下新建目录 META-INF</li>
<li>在 META-INF 目录下新建文件 <code>spring.factories</code></li>
<li>在文件中添加 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.git.hui.boot.autoconfig.SelfAutoConfig</code></li>
</ul>
<p><strong>说明，如果需要换行时，可以如下</strong></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用方就可以愉快的使用你的bean了，定义一个测试的Bean如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 定义Bean使用方式</h3>
<p>直接在Config配置中，定义Bean，可以说是更加常见的方式，特别是当你的bean不是那么多的时候，推荐使用这种方式，便于集中管理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实例演示</h3>
<p>在新工程中，测试前面的工程的bean，看是否可以正常加载，这一小结结合源码运行查看，更有助于理解</p>
<p><strong>源码工程说明</strong></p>
<ul>
<li><a href="">005-autoconfig</a> 提供自动加载的Bean的工程，内部定义了前面的两个测试Bean和配置文件</li>
<li><a href="">004-bean</a> 测试引入第三方jar中Bean的工程</li>
</ul>
<p>测试代码如下，已删除无关的内容</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示图如下:</p>
<figure><img src="/imgs/181012/00.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h3> 4. 小结</h3>
<p>本篇的内容比较简单，东西也不多，主要就是在自己的项目中添加一个<code>Configuration</code>配置类，然后在资源目录下新增 <code>META-INF/spring.factories</code> 即可</p>
<p>上面这么做，其实和Java本身的SPI机制有点像，都是讲一些类信息写在约定的文件中，然后由框架层来获取文件中的内容然后进行解析，后面在源码篇，会涉及到整个处理流程；现在知道大致是这么玩的就行</p>
<p>从简单的使用来讲，上面可以满足一般场景，但是实际的应用中，还有其他的问题</p>
<ul>
<li>我直接依赖或间接依赖了很多jar包，但是有些包并不想引入他们定义的AutoConfig怎么办？(如进行redis操作的Lettuce和Jedis，只需要一个生效即可）</li>
<li>如我的Jar包工作的前提是需要引入其他的jar包，但是我不知道使用我的地方是否提供了这个依赖，如何处理？（如只有Spring容器中有BeanA之后，我定义的Bean才生效）</li>
<li>Bean初始化顺序的问题</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 参考</h4>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html#boot-features-understanding-auto-configured-beans" target="_blank" rel="noopener noreferrer">官方文档：Creating Your Own Auto-configuration</a></li>
</ul>
<h4> b. 项目</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/004-bean" target="_blank" rel="noopener noreferrer">004-bean</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/005-autoconfig" target="_blank" rel="noopener noreferrer">005-autoconfig</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181012/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.Bean之动态注册</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/03.181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/03.181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.Bean之动态注册</source>
      <description>Spring中的Bean除了前面提到的几种JavaConfig或者@Component等注解标识之外，也是可以动态的向Spring容器注册的，本篇博文将主要介绍 如何向Spring容器注册Bean 如何引用主动注册的Bean 注册的Bean中，如果依赖其他的Bean，怎么操作</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Sat, 13 Oct 2018 17:38:31 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring中的Bean除了前面提到的几种JavaConfig或者<code>@Component</code>等注解标识之外，也是可以动态的向Spring容器注册的，本篇博文将主要介绍</p>
<ul>
<li>如何向Spring容器注册Bean</li>
<li>如何引用主动注册的Bean</li>
<li>注册的Bean中，如果依赖其他的Bean，怎么操作</li>
</ul>
<!-- more -->
<h2> I. 手动注册Bean方式</h2>
<h3> 1. 核心实现类</h3>
<p>以前也写过关于动态注册Bean的博文，如 <a href="https://blog.hhui.top/hexblog/2018/08/04/180804-Spring%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cbean/" target="_blank" rel="noopener noreferrer">180804-Spring之动态注册bean</a></p>
<p>我们的实现方式和上面也没什么区别，依然是借助<code>BeanDefinition</code>来创建Bean定义并注册到BeanFactory中，具体实现的核心代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面唯一的方法中，接收四个参数，源码中也有说明，稍微需要注意下的是Spring容器中不允许出现同名的Bean</p>
<h3> 2. 测试用例</h3>
<p>动态创建Bean，并不是塞入容器之中就完结了，塞进去之后，是为了后续的使用，自然而然的就会有下面几种情形</p>
<h4> a. 无其他Bean依赖</h4>
<p>即不依赖其他的Bean, 单纯的供其他地方使用，这种情况下，主要需要测试的就是别人可以通过什么方式来使用它</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 依赖其他Bean</h4>
<p>和前面一个不同，这个Bean内部需要注入其他的Bean，因此我们主动注册Bean时，能否将依赖的Bean也注入进去呢？</p>
<p>定义一个测试Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其依赖的普通Bean定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 普通Bean依赖主动注册的Bean</h4>
<p>这个其实就是使用case了，主动注册的Bean也是被人使用的，那可以怎么使用呢？传统的<code>Autowired</code>可否？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. Bean注册实现</h4>
<p>前面定义了两个需要手动注册的bean，所以就需要选择一个合适的地方来处理主动注册的逻辑，我们把这段逻辑放在AutoConfig中，用于测试演示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实测演示</h3>
<p>前面的测试case都准备好了，接着就需要实际的跑一下看看效果了，选择Rest服务来演示，创建一个简单的Controller</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就使用了三个Bean，两个主动注册的外加一个依赖了主动注册Bean的<code>anoOriginBean</code> (其实Controller本身也是一个使用主动注册Bean的Bean）</p>
<p>先预测一下结果：</p>
<ul>
<li>如果 manualBean, manualDIBean 为空，表示不能直接通过 <code>@Autowired</code> 注解的方式引入手动注册的Bean；此时会抛npe</li>
<li>如果没有npe，且 AnoOriginBean内部依赖的manualBean也不是null，则表示直接用<code>@Autowired</code>来注入没啥毛病（是否绝对呢？）</li>
<li>manualDIBean 内部依赖了<code>originBean</code>，也是通过注解方式注入，如果正常返回，表示手动注册的也可以这么引用其他的Bean；否则不行</li>
</ul>
<figure><img src="/imgs/181013/00.gif" alt="手动注册演示" tabindex="0" loading="lazy"><figcaption>手动注册演示</figcaption></figure>
<p>执行结果如上图，简单来说，就是手动注册的Bean，和我们一般使用的Bean也没什么两样，原来可以怎么用，现在依然可以这么用</p>
<h2> II. BeanDefinitionRegistryPostProcessor扩展方式</h2>
<p>前面这种手动注入的方式有个不好的地方就是主动注册的这个逻辑，感觉写在什么地方都不太优雅，在Spring项目的源码中通过实现<code>BeanDefinitionRegistryPostProcessor扩展方式</code>接口的方式比较多，比如<code>org.springframework.cloud.autoconfigure.RefreshAutoConfiguration</code></p>
<p>依葫芦画瓢实现一个</p>
<h3> 1. 实现类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的实现中，Bean的注册方式和前面的其实是一样的，这个接口提供了两个方法，通常实现第一个方法来做Bean的注册；两者从根本上也没太大的区别，上面只是给出了一种使用演示</p>
<h3> 2. 测试用例</h3>
<p>测试的思路基本上和前面一样，定义了三个需要我们注册的Bean，一个没有外部依赖的<code>AutoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个依赖外部Bean的<code>AutoDIBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个用于主动创建和设置依赖的<code>AutoFacDIBean</code> （用于前面的实现类中的第二个方法的注册方式）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个依赖了主动注册AutoBean的 <code>AnoAutoOriginBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实测演示</h3>
<p>同样写一个RestApi进行演示，通过实际的演示结果发现和前面没什么太大的区别</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/181013/01.gif" alt="接口方式注册演示" tabindex="0" loading="lazy"><figcaption>接口方式注册演示</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 文档</h4>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/30590254" target="_blank" rel="noopener noreferrer">动态注册bean，Spring官方套路：使用BeanDefinitionRegistryPostProcessor</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/08/04/180804-Spring%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cbean/" target="_blank" rel="noopener noreferrer">180804-Spring之动态注册bean</a></li>
</ul>
<h4> b. 源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>model: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/006-dynamicbean" target="_blank" rel="noopener noreferrer">006-dynamicbean</a></li>
</ul>
<hr>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181013/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.条件注入@Condition使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/05.181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/05.181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.条件注入@Condition使用姿势</source>
      <description>前面几篇关于Bean的基础博文中，主要集中在Bean的定义和使用，但实际的情况中有没有一些场景是不加载我定义的bean，或者只有满足某些前提条件的时候才加载我定义的Bean呢？ 本篇博文将主要介绍bean的加载中，条件注解@Conditional的相关使用</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Thu, 18 Oct 2018 14:57:42 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面几篇关于Bean的基础博文中，主要集中在Bean的定义和使用，但实际的情况中有没有一些场景是不加载我定义的bean，或者只有满足某些前提条件的时候才加载我定义的Bean呢？</p>
<p>本篇博文将主要介绍bean的加载中，条件注解<code>@Conditional</code>的相关使用</p>
<!-- more -->
<h2> I. <code>@Conditional</code>注解</h2>
<p>这个注解在Spring4中引入，其主要作用就是判断条件是否满足，从而决定是否初始化并向容器注册Bean</p>
<h3> 1. 定义</h3>
<p><code>@Conditional</code>注解定义如下，其内部主要就是利用了Condition接口，来判断是否满足条件，从而决定是否需要加载Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是<code>Condtion</code>接口的定义，这个可以说是最基础的入口了，其他的所有条件注解，归根结底，都是通过实现这个接口进行扩展的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口中，有个参数比较有意思<code>ConditionContext</code>,它持有不少有用的对象，可以用来获取很多系统相关的信息，来丰富条件判断，接口定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用说明</h3>
<p>通过一个小例子，简单的说一下如何使用Condition和<code>@Conditional</code>注解，来实现bean的条件加载</p>
<p>首先我们定义一个随机产生数据的类，其功能就是随机生成一些数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们目前提供两种随机数据生成的bean，但是需要根据配置来选择具体选中的方式，因此我们如下定义Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置，先不管<code>@Conditional</code>注解的内容，单看两个Bean的定义，一个是定义int随机数生成；一个是定义boolean随机生成；</p>
<p>但是我们的系统中，只需要一个随机数据生成器即可，我们选择根据配置<code>conditional.rand.type</code>的值来选择到底用哪个，配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就得看这个条件如何加上了，也就是上面配置类<code>ConditionalAutoConfig</code>中两个注解的内容了，两个类都是实现<code>Condition</code>的接口，具体如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现也比较清晰，获取配置值，然后判断，并返回true/fase；返回true，则表示这个条件满足，那么这个Bean就可以被加载了；否则这个Bean就不会创建</p>
<h3> 3. 测试与验证</h3>
<p>针对上面的配置与实现，写一个测试类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置文件的值为int时，每次访问返回的应该都是正整数，演示如下图</p>
<figure><img src="/imgs/181018/00.gif" alt="int随机生成" tabindex="0" loading="lazy"><figcaption>int随机生成</figcaption></figure>
<p>将配置的值改成boolean之后，再次测试如下图</p>
<figure><img src="/imgs/181018/01.gif" alt="boolean随机生成" tabindex="0" loading="lazy"><figcaption>boolean随机生成</figcaption></figure>
<h2> II. 扩展与小结</h2>
<p>上面的测试演示了通过配置文件选择注入Bean的情况，如果一个Bean是通过自动扫描加载的，是否可以直接在Bean的类上添加注解来决定是否载入呢？</p>
<h3> 1. 自动扫描Bean的条件加载</h3>
<p>从使用来讲，和前面的没有什么区别，只是将注解放在具体的类上而言，同样给出一个示例，先定义一个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的判断条件如下，当配置文件中<code>conditional.demo.load</code>为true时，才会加载这个配置，否则不实例化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类和前面差不多，稍微注意下的就是自动注入时，改一下必要条件，避免bean不存在时报错</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置为true时，bean应该存在，走上面的else逻辑</p>
<figure><img src="/imgs/181018/02.gif" alt="自动扫描条件准确" tabindex="0" loading="lazy"><figcaption>自动扫描条件准确</figcaption></figure>
<p>当配置为false时，不会加载bean，走if逻辑</p>
<figure><img src="/imgs/181018/03.gif" alt="自动扫描添加不符" tabindex="0" loading="lazy"><figcaption>自动扫描添加不符</figcaption></figure>
<h3> 2. 小结</h3>
<p>通过<code>@Conditional</code>注解配合<code>Condition</code>接口，来决定给一个bean是否创建和注册到Spring容器中，从而实现有选择的加载bean</p>
<h4> a. 优势</h4>
<p>这样做的目的是什么呢？</p>
<ul>
<li>当有多个同名bean时，怎么抉择的问题</li>
<li>解决某些bean的创建有其他依赖条件的case</li>
</ul>
<h4> b. 更多注解</h4>
<p>上面可以控制bean的创建，但通过上面的流程，会发现有一点繁琐，有没有什么方式可以简化上面的流程呢？</p>
<p>只用一个注解就好，不要自己再来实现Condtion接口，Spring框架提供了一系列相关的注解，如下表</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ConditionalOnSingleCandidate</code></td>
<td>当给定类型的bean存在并且指定为Primary的给定类型存在时,返回true</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingBean</code></td>
<td>当给定的类型、类名、注解、昵称在beanFactory中不存在时返回true.各类型间是or的关系</td>
</tr>
<tr>
<td><code>@ConditionalOnBean</code></td>
<td>与上面相反，要求bean存在</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingClass</code></td>
<td>当给定的类名在类路径上不存在时返回true,各类型间是and的关系</td>
</tr>
<tr>
<td><code>@ConditionalOnClass</code></td>
<td>与上面相反，要求类存在</td>
</tr>
<tr>
<td><code>@ConditionalOnCloudPlatform</code></td>
<td>当所配置的CloudPlatform为激活时返回true</td>
</tr>
<tr>
<td><code>@ConditionalOnExpression</code></td>
<td>spel表达式执行为true</td>
</tr>
<tr>
<td><code>@ConditionalOnJava</code></td>
<td>运行时的java版本号是否包含给定的版本号.如果包含,返回匹配,否则,返回不匹配</td>
</tr>
<tr>
<td><code>@ConditionalOnProperty</code></td>
<td>要求配置属性匹配条件</td>
</tr>
<tr>
<td><code>@ConditionalOnJndi</code></td>
<td>给定的jndi的Location 必须存在一个.否则,返回不匹配</td>
</tr>
<tr>
<td><code>@ConditionalOnNotWebApplication</code></td>
<td>web环境不存在时</td>
</tr>
<tr>
<td><code>@ConditionalOnWebApplication</code></td>
<td>web环境存在时</td>
</tr>
<tr>
<td><code>@ConditionalOnResource</code></td>
<td>要求制定的资源存在</td>
</tr>
</tbody>
</table>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181018/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.@ConditionalOnBean与@ConditionalOnClass</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/06.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/06.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.@ConditionalOnBean与@ConditionalOnClass</source>
      <description>bean的条件注入，除了前面一篇博文中介绍的通过@Conditional注解配合Condition接口的实现之外，还提供了更多简化的注解使用方式，省略了自己实现Condtion接口，本篇博文主要介绍下面几个常用的注解使用方式 @ConditionalOnBean @ConditionalOnMissingBean @ConditionalOnClass @ConditionalOnMissingClass</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:38:15 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面一篇博文中介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的实现之外，还提供了更多简化的注解使用方式，省略了自己实现<code>Condtion</code>接口，本篇博文主要介绍下面几个常用的注解使用方式</p>
<ul>
<li><code>@ConditionalOnBean</code></li>
<li><code>@ConditionalOnMissingBean</code></li>
<li><code>@ConditionalOnClass</code></li>
<li><code>@ConditionalOnMissingClass</code></li>
</ul>
<!-- more -->
<h2> I. Bean的存在与否作为条件</h2>
<p>当Bean不存在时，创建一个默认的Bean，在Spring的生态中可以说比较常见了；接下来看下这种方式可以怎么用</p>
<h3> 1. <code>@ConditionalOnBean</code></h3>
<p>要求bean存在时，才会创建这个bean；如我提供了一个bean名为<code>RedisOperBean</code>，用于封装redis相关的操作；但是我这个bean需要依赖<code>restTemplate</code>这个bean，只有当应用引入了redis的相关依赖，并存在<code>RestTemplate</code>这个bean的时候，我这个bean才会生效</p>
<p>假设bean的定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的好处就是我提供的这个第三方包，如果被用户A间接依赖（但是A本身不需要操作redis），也不会因为创建<code>RedisOperBean</code>而抛异常</p>
<blockquote>
<p>产生异常的原因是因为找不到RestTemplate的bean，因此无法实例化RedisOperBean，从而抛出异常</p>
</blockquote>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>构建一个简单的测试用例，先定义一个基础的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个依赖只有上面的bean存在时，才会加载的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是bean的定义了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的测试用例，<code>LoadIfBeanExist</code>是会被正常加载的; 具体结果看后面的实例演示</p>
<h3> 2. <code>ConditionalOnMissingBean</code></h3>
<p>和前面一个作用正好相反的，上面是要求存在bean，而这个是要求不存在</p>
<h4> a. 接口定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>同样定义一个bean不存在时，才创建的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的bean配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为没有notExistsBean，所以上面这个bean也应该被正常注册</p>
<h3> 3. 实例演示</h3>
<p>因为bean的是否存在和class的是否存在有较大的相似性，因此实例演示放在下一小节，一起测试</p>
<h2> II. Class的存在与否作为条件</h2>
<p>从使用来看，和前面基本上没有太大的区别，无非就是将bean换成了class；这样就可以避免因为<code>Class Not Found</code>导致的编译异常了</p>
<h3> 1. <code>@ConditionalOnClass</code></h3>
<p>要求class存在</p>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>先定义一个class</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后依赖class存在的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是Bean的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为类存在，所以测试时，这个bean应该被正常注册</p>
<h3> 2. <code>@ConditionalOnMissingClass</code></h3>
<p>class不存在时，才会加载bean</p>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>定义一个class缺少时才会创建的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bean的配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为上面这个类存在，所以这个bean不应该被正常注册</p>
<h3> 3. 实例演示</h3>
<p>起一个rest服务，测试下上面的四个bean是否正常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面的分析，返回的结果应该是三个存在，一个不存在；下图执行和我们预期一致</p>
<figure><img src="/imgs/181019/00.gif" alt="条件依赖注册演示" tabindex="0" loading="lazy"><figcaption>条件依赖注册演示</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/logo0.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>7.条件注入@ConditionalOnExpression</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/07.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/07.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.条件注入@ConditionalOnExpression</source>
      <description>bean的条件注入，除了前面几篇博文分别介绍的通过@Conditional注解配合Condition接口的基本实现，以及如何使用条件注解@ConditionalOnBean和@ConditionalOnClass和基于配置的@ConditionalOnProperty 本文介绍的注解将更加的灵活，基于SPEL表达式的条件注解ConditionalOnExpression</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:51:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面几篇博文分别介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的基本实现，以及如何使用条件注解<code>@ConditionalOnBean</code>和<code>@ConditionalOnClass</code>和基于配置的<code>@ConditionalOnProperty</code></p>
<p>本文介绍的注解将更加的灵活，基于SPEL表达式的条件注解<code>ConditionalOnExpression</code></p>
<!-- more -->
<h2> IV. 表达式条件注入</h2>
<p>相比较前面的Bean，Class是否存在，配置参数是否存在或者有某个值而言，这个依赖SPEL表达式的，就显得更加的高级了；其主要就是执行Spel表达式，根据返回的true/false来判断是否满足条件</p>
<p>至于SPEL是什么东西，后面会有专文进行解释，此处不加以展开。下面以一个简单的demo进行演示它的使用姿势</p>
<h3> 1. <code>@ConditionalOnExpression</code></h3>
<p>接口定义</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 实例测试</h3>
<p>用一个简单的例子，当配置参数中，根据是否满足某个条件来决定是否需要加载bean</p>
<h4> a. 测试用例</h4>
<p>定义一个满足条件和一个不满足的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下bean的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. 实例演示</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的执行，<code>expressTrueBean</code>应该存在，另外一个为null，运行结果如下</p>
<figure><img src="/imgs/181019/02.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/logo2.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>8.条件注入@ConditionalOnProperty</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/08.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/08.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.条件注入@ConditionalOnProperty</source>
      <description>bean的条件注入，除了前面两篇博文分别介绍的通过@Conditional注解配合Condition接口的基本实现，以及如何使用条件注解@ConditionalOnBean和@ConditionalOnClass 本文将主要介绍根据配置来决定是否创建bean的注解@ConditionalOnProperty</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:47:25 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面两篇博文分别介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的基本实现，以及如何使用条件注解<code>@ConditionalOnBean</code>和<code>@ConditionalOnClass</code></p>
<p>本文将主要介绍根据配置来决定是否创建bean的注解<code>@ConditionalOnProperty</code></p>
<!-- more -->
<h2> I. 配置属性作为条件</h2>
<p>主要是根据配置参数，来决定是否需要创建这个bean，这样就给了我们一个根据配置来控制Bean的选择的手段了，如前面一篇博文中根据配置来选择是随机生成boolean还是随机生成int；只需要更改配置即可</p>
<h3> 1. <code>@ConditionalOnProperty</code></h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 实例测试</h3>
<h4> a. 测试用例</h4>
<p>测试几个常用的姿势，一是根据配置是否存在，来决定是否创建</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的bean配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>当配置存在，且value匹配时</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是配置的参数</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. 实例演示</h4>
<p>根据前面的分析，上面的四个bean中，<code>PropertyExistBean</code>, <code>PropertyNotExistBean</code>, <code>PropertyValueExistBean</code> 应该存在；而<code>PropertyValueNotExistBean</code> 因为配置值不匹配，不会创建</p>
<p>测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后结果如下，一如预期</p>
<figure><img src="/imgs/181019/01.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/logo1.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>9.多实例选择</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/09.181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/09.181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">9.多实例选择</source>
      <description>当通过接口的方式注入Bean时，如果有多个子类的bean存在时，具体哪个bean会被注入呢？系统中能否存在两个重名的bean呢？如果可以，那么怎么选择引入呢？如果不行的话又该怎么避免上面的问题呢？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Mon, 22 Oct 2018 22:21:22 GMT</pubDate>
      <content:encoded><![CDATA[<p>当通过接口的方式注入Bean时，如果有多个子类的bean存在时，具体哪个bean会被注入呢？系统中能否存在两个重名的bean呢？如果可以，那么怎么选择引入呢？如果不行的话又该怎么避免上面的问题呢？</p>
<!-- more -->
<h2> I. 多实例Bean的选择</h2>
<p>这个场景可以说是比较常见的，现在提倡面向接口编程嘛，当一个接口有多个实例时，怎么注入和引用就需要我们额外关注下了</p>
<h3> 1. 基本使用姿势</h3>
<p>首先定义一个接口和两个简单的实现类，并演示一下我们通常的用法</p>
<p>一个输出的接口定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应给两个实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是我们一般的引用方式</p>
<ul>
<li><code>@Autowired</code>注解时，属性名即为默认的Bean名，如下面的<code>logPrint</code>就是获取<code>beanName=logPrint</code>的bean</li>
<li><code>@Resource(name=xxx)</code> 直接指定Bean的name，来唯一选择匹配的bean</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是两种常见的使用姿势，此外还可以借助<code>@Primary</code>注解来声明默认的注入bean</p>
<h3> 2. <code>@Primary</code>注解</h3>
<p>这个注解就是为了解决当有多个bean满足注入条件时，有这个注解的实例被选中</p>
<p>根据上面的作用说明，很明显可以得知一点</p>
<p><strong><code>@Primary</code>注解的使用有唯一性要求：即对应上面的case，一个接口的子类中，只能有一个实现上有这个注解</strong></p>
<p>假设将这个注解放在<code>LogPrint</code>上之后，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的常用姿势，加上这个注解之后，我们的测试用例应该至少包含下面几个</p>
<ul>
<li><code>@Resource</code> 指定beanName的是否会被<code>@Primary</code>影响</li>
<li>前面的<code>@Autowired</code>注解 + 属性名的方式，是按照第一节的方式选择呢，还是选择被<code>@Primary</code>标识的实例</li>
<li><code>@Autowired</code> + 随意的一个非beanName的属性，验证是否会选中<code>@Primary</code>标识的注解</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 小结</h3>
<p>根据前面的执行，因此可以知晓，选择bean的方式如下</p>
<p><strong>存在<code>@Primary</code>注解时</strong></p>
<ul>
<li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li>
<li><code>@Autowired</code>注解，全部都用<code>@Primary</code>标识的注解</li>
<li><code>@Primary</code>注解要求唯一（非广义的唯一性，并不是指只能用一个@Primary，具体看前面）</li>
</ul>
<p><strong>不存在<code>@Primary</code>注解时</strong></p>
<ul>
<li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li>
<li><code>@Autowired</code>注解时，根据属性名去查对应的Bean，如果查不到则抛异常；如果查到，那即是它了</li>
</ul>
<h2> II. 重名Bean的问题</h2>
<p>在我们实际的业务开发中，有多个bean名为xxx的异常应该算是比较常见的，也就是说应该不能有两个bean叫同一个name；但考虑下下面这个场景</p>
<p>A的服务，依赖B和C的服务；而B和C是两个完全独立的第三方服务，他们各自都提供了一个<code>beanName=xxxService</code>的bean，对于A而言，Spring容器中就会有BeanName冲突的问题了，而且这种场景，对A而言，也是不可控的啊，这种情况下改怎么办？</p>
<h3> 1. 同名Bean</h3>
<p>先来个case演示下同名bean的情况，如下定义两个bean，除了包路径不一样外，类名相同，通过<code>@Component</code>注解方式声明bean，因此两个bean的beanName都是<code>SameA</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来测试下引用，是否有问题</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后，毫不意外的抛出了异常，堆栈信息如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 同名问题规避</h3>
<p>如果真的出现了上面这个问题，该怎么解决呢？如果这些bean是我们可控的，最简单的方式就是不要同名，定义的时候指定beanName,如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果完全不可控呢？正如前面说的两个第三方服务我都得依赖，但是他们有同名的bean，怎么破？</p>
<p>一个解决方法就是排除掉其中一个同名的bean的自动加载，采用主动注册的方式注册这个bean</p>
<p>排除自动扫描的bean的方式如下，在启动类添加注解<code>@ComponentScan</code>并指定其中的<code>excludeFilters</code>属性</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后自定义一个bean的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的代码和之前没有区别，再次执行，结果如下, 最后的输出为 <code>a sameA!</code>，根据类型来选择了实例化的bean了</p>
<figure><img src="/imgs/181022/00.gif" alt="同名bean修复演示" tabindex="0" loading="lazy"><figcaption>同名bean修复演示</figcaption></figure>
<h2> II. 其他</h2>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener noreferrer">181022-SpringBoot基础篇Bean之多实例选择</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/008-beanorder" target="_blank" rel="noopener noreferrer">008-beanorder</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181022/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>11.Bean加载顺序之错误使用姿势辟谣</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/11.191023-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E4%B9%8B%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%BE%9F%E8%B0%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/11.191023-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E4%B9%8B%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%BE%9F%E8%B0%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">11.Bean加载顺序之错误使用姿势辟谣</source>
      <description>在网上查询Bean的加载顺序时，看到了大量的文章中使用@Order注解的方式来控制bean的加载顺序，不知道写这些的博文的同学自己有没有实际的验证过，本文希望通过指出这些错误的使用姿势，让观文的小伙伴可以知道@Order的具体的应用场景</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Wed, 23 Oct 2019 14:55:34 GMT</pubDate>
      <content:encoded><![CDATA[<p>在网上查询Bean的加载顺序时，看到了大量的文章中使用<code>@Order</code>注解的方式来控制bean的加载顺序，不知道写这些的博文的同学自己有没有实际的验证过，本文希望通过指出这些错误的使用姿势，让观文的小伙伴可以知道<code>@Order</code>的具体的应用场景</p>
<!-- more -->
<h2> I. 环境搭建</h2>
<p>创建一个maven项目，pom文件如下（具体的项目代码，可以在文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 错误姿势</h2>
<p>下面我们会介绍两种典型注解的错误使用姿势，一个<code>@Order</code>，一个<code>@AutoConfigureOrder</code></p>
<h3> I. @Order</h3>
<h4> err.case1: 类上添加Order注解</h4>
<p>一种常见的错误观点是在类上添加这个Order注解，就可以指定bean之间的初始化顺序，order值越小，则优先级越高，接下来我们实际测试一下，是否如此</p>
<p>我们创建两个DemoBean, 指定不同的Order顺序</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面的观点，orde值小的优先级高，那么BaseDemo2应该先被初始化，实际测试一下，输出如下</p>
<figure><img src="/imgs/191023/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> err.case2: 配置类中Bean声明方法上添加@Order</h4>
<p>Bean除了上面的自动扫描之外，还有一种方式就是通过<code>@Bean</code>注解，下面我们演示一下在配置类中指定bean加载顺序的错误case</p>
<p>同样我们新建两个测试bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在配置类中定义bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，如果<code>@Order</code>注解有效，那么<code>BaseDemo4</code>应该先被初始化</p>
<figure><img src="/imgs/191023/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的实际测试输出可以看出，@Order注解在上面的方式中也不生效，如果有兴趣的同学可以试一下，将上面配置类中的两个方法的顺序颠倒一下，会发现<code>BaseDemo4</code>先加载</p>
<h4> err.case3: @Order注解修饰配置类</h4>
<p>这也是一种常见的错误case，认为@Order注解是用来指定配置类的加载顺序的，然而真的是这样么?</p>
<p>我们创建两个测试的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果@Order注解生效，那么BConf配置类会优先初始化，那么我们实测一下
<img src="/imgs/191023/02.jpg" alt="" loading="lazy"></p>
<p>从上面的结果可以看出，并不是BConf先被加载；当然这种使用姿势，实际上和第一种错误case，并没有什么区别，配置类也是bean，前面不生效，这里当然也不会生效</p>
<p>那么是不是我们的理解不对导致的呢，实际上这个<code>@Order</code>放在配置类上之后，是这个配置类中定义的Bean的优先于另一个配置类中定义的Bean呢？</p>
<p>同样的我们测试下这种case，我们定义三个bean，两个conf</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将Demo1, Demo3放在一个配置中，Demo2放在另外一个配置中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果@Order注解实际上控制的是配置类中Bean的加载顺序，那么BConf1中的Bean应该优先加载，也就是说 Demo2 会优先于 Demo1, Demo3，实际测试一下，输出如</p>
<figure><img src="/imgs/191023/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面的输出结果和我们预期的并不一样，所以<code>@Order</code>注解来决定配置类的顺序也是不对的</p>
<h3> 2. @AutoConfigureOrder</h3>
<p>从命名来看，这个注解是用来指定配置类的顺序的，然而对于这个注解的错误使用也是非常多的，而大多的错误使用在于没有真正的了解到它的使用场景</p>
<p>接下来我们来演示一下错误的使用case</p>
<p>在工程内新建两个配置类，直接使用注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当注解生效时，BConf会优先级加载</p>
<figure><img src="/imgs/191023/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从输出结果来看，和我们预期的不一样；那么这个注解是不是作用于配置类中的Bean的顺序，而不是配置类本身呢？</p>
<p>同样的我们设计一个case验证一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果DemoB后被加载，则说明上面的观点是错误的，实测结果如下</p>
<figure><img src="/imgs/191023/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>所以问题来了，<code>@AutoConfigureOrder</code>这个注解并不能指定配置类的顺序，还叫这个名，干啥？存粹是误导人不是!!!</p>
<p>接下来我们看一下<code>@Order</code>和<code>@AutoConfigureOrder</code>的正确使用方式</p>
<h2> III. 使用说明</h2>
<h3> 1. @Order</h3>
<p>先看一下这个注解的官方注释</p>
<blockquote>
<p>{@code @Order} defines the sort order for an annotated component.
Since Spring 4.0, annotation-based ordering is supported for many
kinds of components in Spring, even for collection injection where the order values
of the target components are taken into account (either from their target class or
from their {@code @Bean} method). While such order values may influence priorities
at injection points, please be aware that they do not influence singleton startup
order which is an orthogonal concern determined by dependency relationships and
{@code @DependsOn} declarations (influencing a runtime-determined dependency graph).</p>
</blockquote>
<p>最开始Order注解用于切面的优先级指定；在4.0之后对它的功能进行了增强，支持集合的注入时，指定集合中bean的顺序</p>
<p>并且特别指出了，它对于单实例的bean之间的顺序，没有任何影响；这句话根据我们上面的测试也可以验证</p>
<p>接下来我们需要看一下通过@Order注解来注入集合时，指定顺序的场景</p>
<p>首先我们定义两个Bean实现同一个接口，并添加上<code>@Order</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在一个测试bean中，注入<code>IBean</code>的列表，我们需要测试这个列表中的Bean的顺序是否和我们定义的<code>@Order</code>规则一致</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据我们的预期, anoBeanList集合中，anoBean2应该在前面</p>
<figure><img src="/imgs/191023/06.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>根据上面的输出，也可以看出列表中的顺序和我们预期的一致，并且 <code>AnoOrderBean1</code>与 <code>AnoOrderBean2</code> 的加载顺序和注解没有关系</p>
<h3> 2. @AutoConfigureOrder</h3>
<p>这个注解用来指定配置文件的加载顺序，然而前面的测试中并没有生效，那么正确的使用姿势是怎样的呢？</p>
<p><strong><code>@AutoConfigureOrder</code>适用于外部依赖的包中AutoConfig的顺序，而不能用来指定本包内的顺序</strong></p>
<p>为了验证上面的说法，我们再次新建两个工程，并指定自动配置类的顺序</p>
<p>工程一配置如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意自动配置类如要被正确加载，需要在工程的 <code>/META-INF/spring.factories</code>文件中定义</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>工程二的配置如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在项目内部添加一个配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为注解适用于外部依赖包中的自动配置类的顺序，所以上面三个配置类中，正确的话AdditionOrderConf2在AdditionOrderConf1之前；而OrderConf并不会收到注解的影响，默认环境下，内部定义的配置类会优于外部依赖，从下面的输出也可以佐证我们说明（当然为了验证确实如此，还应该调整下两个外部工程配置类的顺序，并观察下加载顺序是否随之改变，我们这里省略掉了）</p>
<figure><img src="/imgs/191023/07.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> IV. 小结</h2>
<p>本篇主要介绍了网上对<code>@Order</code>和<code>@AutoConfigureOrder</code>常见的错误使用姿势，并给出了正确的使用case。</p>
<p>下面用简单的几句话介绍一下正确的姿势</p>
<ul>
<li><code>@Order</code>注解不能指定bean的加载顺序，它适用于AOP的优先级，以及将多个Bean注入到集合时，这些bean在集合中的顺序</li>
<li><code>@AutoConfigureOrder</code>指定外部依赖的AutoConfig的加载顺序（即定义在<code>/META-INF/spring.factories</code>文件中的配置bean优先级)，在当前工程中使用这个注解并没有什么鸟用</li>
<li>同样的 <code>@AutoConfigureBefore</code>和 <code>@AutoConfigureAfter</code>这两个注解的适用范围和<code>@AutoConfigureOrder</code>一样</li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码模块:
<ul>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition2" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition2</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191023/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>12.指定Bean初始化顺序的若干姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/12.191029-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E4%B9%8B%E6%8C%87%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/12.191029-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E4%B9%8B%E6%8C%87%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">12.指定Bean初始化顺序的若干姿势</source>
      <description>上一篇博文介绍了@Order注解的常见错误理解，它并不能指定bean的加载顺序，那么问题来了，如果我需要指定bean的加载顺序，那应该怎么办呢？ 本文将介绍几种可行的方式来控制bean之间的加载顺序 构造方法依赖 @DependOn 注解 BeanPostProcessor 扩展</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Tue, 29 Oct 2019 19:26:51 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇博文介绍了<code>@Order</code>注解的常见错误理解，它并不能指定bean的加载顺序，那么问题来了，如果我需要指定bean的加载顺序，那应该怎么办呢？</p>
<p>本文将介绍几种可行的方式来控制bean之间的加载顺序</p>
<ul>
<li>构造方法依赖</li>
<li>@DependOn 注解</li>
<li>BeanPostProcessor 扩展</li>
</ul>
<!-- more -->
<h2> I. 环境搭建</h2>
<p>我们的测试项目和上一篇博文公用一个项目环境，当然也可以建一个全新的测试项目，对应的配置如下：（文末有源码地址）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 初始化顺序指定</h2>
<h3> 1. 构造方法依赖</h3>
<p>这种可以说是最简单也是最常见的使用姿势，但是在使用时，需要注意循环依赖等问题</p>
<p>我们知道bean的注入方式之中，有一个就是通过构造方法来注入，借助这种方式，我们可以解决有优先级要求的bean之间的初始化顺序</p>
<p>比如我们创建两个Bean，要求CDemo2在CDemo1之前被初始化，那么我们的可用方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测输出结果如下，和我们预期一致</p>
<figure><img src="/imgs/191029/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>虽然这种方式比较直观简单，但是有几个限制</p>
<ul>
<li>需要有注入关系，如CDemo2通过构造方法注入到CDemo1中，如果需要指定两个没有注入关系的bean之间优先级，则不太合适（比如我希望某个bean在所有其他的Bean初始化之前执行）</li>
<li>循环依赖问题，如过上面的CDemo2的构造方法有一个CDemo1参数，那么循环依赖产生，应用无法启动</li>
</ul>
<p>另外一个需要注意的点是，在构造方法中，不应有复杂耗时的逻辑，会拖慢应用的启动时间</p>
<h3> 2. @DependOn 注解</h3>
<p>这是一个专用于解决bean的依赖问题，当一个bean需要在另一个bean初始化之后再初始化时，可以使用这个注解</p>
<p>使用方式也比较简单了，下面是一个简单的实例case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的注解放在 <code>RightDemo1</code> 上，表示<code>RightDemo1</code>的初始化依赖于<code>rightDemo2</code>这个bean</p>
<figure><img src="/imgs/191029/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在使用这个注解的时候，有一点需要特别注意，它能控制bean的实例化顺序，但是bean的初始化操作（如构造bean实例之后，调用<code>@PostConstruct</code>注解的初始化方法）顺序则不能保证，比如我们下面的一个实例，可以说明这个问题</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的代码，虽然说有循环依赖，但是通过<code>@Autowired</code>注解方式注入的，所以不会导致应用启动失败，我们先看一下输出结果</p>
<figure><img src="/imgs/191029/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>有意思的地方来了，我们通过<code>@DependsOn</code>注解来确保在创建<code>RightDemo1</code>之前，先得创建<code>RightDemo2</code>；</p>
<p>所以从构造方法的输出可以知道，先实例RightDemo2, 然后实例RightDemo1；</p>
<p>然后从初始化方法的输出可以知道，在上面这个场景中，虽然RightDemo2这个bean创建了，但是它的初始化代码在后面执行</p>
<blockquote>
<p>题外话：
有兴趣的同学可以试一下把上面测试代码中的<code>@Autowired</code>的依赖注入删除，即两个bean没有相互注入依赖，再执行时，会发现输出顺序又不一样</p>
</blockquote>
<h3> 3. BeanPostProcessor</h3>
<p>最后再介绍一种非典型的使用方式，如非必要，请不要用这种方式来控制bean的加载顺序</p>
<p>先创建两个测试bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望HDemo2在HDemo1之前被加载，借助BeanPostProcessor，我们可以按照下面的方式来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将目标集中在<code>postProcessBeforeInstantiation</code>，这个方法在某个bean的实例化之前，会被调用，这就给了我们控制bean加载顺序的机会</p>
<figure><img src="/imgs/191029/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>看到这种骚操作，是不是有点蠢蠢欲动，比如我有个bean，希望在应用启动之后，其他的bean实例化之前就被加载，用这种方式是不是也可以实现呢?</p>
<p>下面是一个简单的实例demo，重写<code>DemoBeanPostProcessor</code>的<code>postProcessAfterInstantiation</code>方法，在application创建之后，就加载我们的FDemo这个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下图输出可以看出，<code>HDemo</code>, <code>FDemo</code>的实例化顺序放在了最前面了</p>
<figure><img src="/imgs/191029/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>在小结之前，先指出一下，一个完整的bean创建，在本文中区分了两块顺序</p>
<ul>
<li>实例化 （调用构造方法）</li>
<li>初始化 （注入依赖属性，调用<code>@PostConstruct</code>方法）</li>
</ul>
<p>本文主要介绍了三种方式来控制bean的加载顺序，分别是</p>
<ul>
<li>通过构造方法依赖的方式，来控制有依赖关系的bean之间初始化顺序，但是需要注意循环依赖的问题</li>
<li><code>@DependsOn</code>注解，来控制bean之间的实例顺序，需要注意的是bean的初始化方法调用顺序无法保证</li>
<li>BeanPostProcessor方式，来手动控制bean的加载顺序</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目 &amp; 博文</h3>
<ul>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484360&amp;idx=1&amp;sn=97188fc2e5595b1ba67db2e2634262c3&amp;chksm=fce71864cb9091721af0288a0a4c9a4145b62dd63c927db6f0a14ceb8f13faa23183499f06e4&amp;token=109869326&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">191023-SpringBoot系列教程之Bean加载顺序之错误使用姿势辟谣</a></p>
</li>
<li>
<p>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></p>
</li>
<li>
<p>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191029/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>14.自动配置选择生效</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/14.191214-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%80%89%E6%8B%A9%E7%94%9F%E6%95%88.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/14.191214-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%80%89%E6%8B%A9%E7%94%9F%E6%95%88.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">14.自动配置选择生效</source>
      <description>写了这么久的Spring系列博文，发现了一个问题，之前所有的文章都是围绕的让一个东西生效；那么有没有反其道而行之的呢？ 我们知道可以通过@ConditionOnXxx来决定一个配置类是否可以加载，那么假设有这么个应用场景 有一个Print的抽象接口，有多个实现，如输出到控制台的ConsolePrint, 输出到文件的 FilePrint, 输出到db的 DbPrint 我们在实际使用的时候，根据用户的选择，使用其中的一个具体实现 针对上面的case，当然也可以使用@ConditionOnExpression来实现，除此之外推荐一种更优雅的选择注入方式ImportSelector</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Sat, 14 Dec 2019 11:08:42 GMT</pubDate>
      <content:encoded><![CDATA[<p>写了这么久的Spring系列博文，发现了一个问题，之前所有的文章都是围绕的让一个东西生效；那么有没有反其道而行之的呢？</p>
<p>我们知道可以通过<code>@ConditionOnXxx</code>来决定一个配置类是否可以加载，那么假设有这么个应用场景</p>
<ul>
<li>有一个Print的抽象接口，有多个实现，如输出到控制台的ConsolePrint, 输出到文件的 FilePrint, 输出到db的 DbPrint</li>
<li>我们在实际使用的时候，根据用户的选择，使用其中的一个具体实现</li>
</ul>
<p>针对上面的case，当然也可以使用<code>@ConditionOnExpression</code>来实现，除此之外推荐一种更优雅的选择注入方式<code>ImportSelector</code></p>
<!-- more -->
<h2> I. 配置选择</h2>
<blockquote>
<p>本文使用的spring boot 版本为 2.1.2.RELEASE</p>
</blockquote>
<p>接下来我们使用ImportSelector来实现上面提出的case</p>
<h3> 1. Print类</h3>
<p>一个接口类，三个实现类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 选择类</h3>
<p>自定义一个PrintConfigSelector继承ImportSelector，主要在实现类中，通过我们自定义的注解来选择具体加载三个配置类中的哪一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. PrintSelector注解</h3>
<p>主要用来注入<code>PrintConfigSelector</code>来生效，其中value属性，用来具体选择让哪一个配置生效，默认注册<code>ConsolePrint</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际的测试中，通过修改<code>@PrintSelector</code>的value来切换不同的Print实现类</p>
<h2> II. 扩展</h2>
<p>虽然上面通过一个实际的case实现来演示了<code>ImportSelector</code>的使用姿势，可以用来选择某些配置类生效。但还有一些其他的知识点，有必要指出一下</p>
<p>通过ImportSelector选择的配置类中的bean加载顺序，在不强制指定依赖的情况下是怎样的呢？</p>
<h3> 1. demo设计</h3>
<p>在默认的加载条件下，包下面的bean加载顺序是根据命名的排序来的，接下来让我们来创建一个用来测试bean加载顺序的case</p>
<ul>
<li>同一个包下，创建6个bean: <code>Demo0</code>, <code>DemoA</code>, <code>DemoB</code>, <code>DemoC</code>, <code>DemoD</code>, <code>DemoE</code></li>
<li>其中<code>Demo0</code> <code>DemoE</code>为普通的bean</li>
<li>其中<code>DemoA</code>, <code>DemoC</code>由配置类1注册</li>
<li>其中<code>DemoB</code>, <code>DemoD</code>有配置类2注册</li>
</ul>
<p>具体代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意一下<code>ConfigSelector</code>，默认的<code>DemoSelector</code>注解表示全部加载，返回的数组中，包含两个配置类，其中Config2在Confgi1的前面</p>
<h3> 2. 加载顺序实测</h3>
<p>稍微修改一下前面的启动类，加上<code>@DemoSelector</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的case中，我们定义的六个bean都会被加载，根据输出结果来判断默认的加载顺序</p>
<figure><img src="/imgs/191214/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从输出结果来看，先加载普通的bean对象；然后再加载Config2中定义的bean，最后则是Config1中定义的bean；</p>
<p>接下来调整一下ImportSelector返回的数组对象中，两个配置类的顺序，如果最终输出是Config1中定义的bean先被加载，那么就可以说明返回的顺序指定了这些配置类中bean的加载顺序</p>
<figure><img src="/imgs/191214/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>输出的结果印证了我们的猜想</p>
<p>最后一个疑问，在默认的bean初始化顺序过程中，普通的bean对象加载顺序是否是优于我们通过<code>ImportSelector</code>来注册的bean呢？</p>
<ul>
<li>从输出结果好像是这样的，但是这个case并不充分，没法完全验证这个观点，想要确切的搞清楚这一点，还是得通过源码分析（虽然实际上是这样的）</li>
</ul>
<p><strong>注意</strong></p>
<p>上面的分析只是考虑默认的bean初始化顺序，我们依然是可以通过构造方法引入的方式或者<code>@DependOn</code>注解来强制指定bean的初始化顺序的</p>
<h3> 小结</h3>
<p>最后小结一下ImportSelector的用法</p>
<ul>
<li>实现接口，返回String数组，数组成员为配置类的全路径</li>
<li>在配置类中定义bean</li>
<li>返回数组中配置类的顺序，指定了配置类中bean的默认加载顺序</li>
<li>通过<code>@Import</code>直接来使<code>ImportSelector</code>接口生效</li>
</ul>
<p>此外还有一个类似的接口<code>DeferredImportSelector</code>，区别在于实现<code>DeferredImportSelector</code>的类优先级会低与直接实现<code>ImportSelector</code>的类，而且可以通过<code>@Order</code>决定优先级；优先级越高的越先被调用执行</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/005-config-selector" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/005-config-selector</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191214/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>17.SpringContext.getBean()方法调用导致NPE?</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/17.211118-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BBean%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%AF%BC%E8%87%B4NPE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/17.211118-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BBean%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%AF%BC%E8%87%B4NPE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">17.SpringContext.getBean()方法调用导致NPE?</source>
      <description>在实际的业务开发中，为了方便获取Spring容器中的Bean对象，一个常见的case就是创建一个SpringUtil类，内部持有SpringContext上下文，然后提供一个静态的方式获取bean对象，然而这种使用姿势，一个不小心可能导致npe 今天我们来看一下这个场景</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>踩坑记录</category>
      <pubDate>Thu, 18 Nov 2021 19:36:17 GMT</pubDate>
      <content:encoded><![CDATA[<p>在实际的业务开发中，为了方便获取Spring容器中的Bean对象，一个常见的case就是创建一个SpringUtil类，内部持有SpringContext上下文，然后提供一个静态的方式获取bean对象，然而这种使用姿势，一个不小心可能导致npe</p>
<p>今天我们来看一下这个场景</p>
<!-- more -->
<h2> 场景复现</h2>
<h3> 1. 基础工程搭建</h3>
<p>搭建一个基础的SpringBoot项目，具体的过程这里省略，下面标注关键的信息</p>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> +  <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. SpringUtil</h3>
<p>构建一个基础的SpringUtil工具类，借助SpringContextAware来持有上下文</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 使用实例</h3>
<p>首先构建一个简单的bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着是另外一个对象，依赖上面这个对象，对外提供的主要接口是 <code>process</code>，其内部实现是根据枚举类，来做的一个策略选择；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注上面实现中的枚举类，在枚举类中，根据SpringUtil获取到<code>BasicDemo</code>对象，然后执行它的私有方法<code>show()</code>及包内方法<code>test()</code></p>
<p>这种用法会有什么问题么？</p>
<h3> 4. 测试case</h3>
<p>接下来写个简单接口测试一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来访问看看会是怎样</p>
<figure><img src="/imgs/211118/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>what? 不是说会npe么？这不是很正常的返回了么！！！</p>
<p>接下来就是见证bug的时刻了，同样是上面的代码，就让它出现npe</p>
<h3> 5. bug复现</h3>
<p>接下来我们添加一个切面，目的就是让通过<code>SpringUtil.getBean</code>获取到的对象是代理类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再重新请求一下上面的访问</p>
<figure><img src="/imgs/211118/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在访问私有方法 <code>show()</code>这里抛了异常，从服务端的堆栈可以看到异常类型为NPE，主要原因就是 <code>testDemo</code> 为null</p>
<p>简单来讲就是访问代理类的私有方法时，内部若有注入bean对象，这个时候拿到的是null</p>
<p>这个就有点神奇了，那么我们再变一下，私有方法内部不直接使用注入的bean对象，改调用一个bean对象的共有方法，会怎样</p>
<p><strong>将上面的show()方法重写一下</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，输出如</p>
<figure><img src="/imgs/211118/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>居然没有问题！！！</p>
<p>就这么神奇有木有，那么是什么原因呢？</p>
<ul>
<li>关键知识点：Spring代理类的生成逻辑</li>
</ul>
<h3> 6. 小结</h3>
<p>好像刚进入主体，结果到这里就结束了，真是过分😡，这里先小结一下这个问题出现的场景，至于具体原因有待下片博文介绍</p>
<p>当我们通过SpringContext获取到的bean对象时，不要直接访问它的私有方法，可能导致npe</p>
<p><strong>100%必先的场景</strong></p>
<ul>
<li>这个bean对象有代理类（如有切面拦截了它，如类内部有一些特定注解）</li>
<li>私有方法内使用了注入对象</li>
</ul>
<p>看到上面就会有个疑问，谁会去访问私有方法呢？我脑子又没坑😒，何况私有方法在外面也访问不了啊</p>
<p>这就涉及到一个相当常见的场景了，类内部方法A调用希望切面拦截的方法B，这时我们常这么做</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的test方法，访问testB方法就可以走切面逻辑，在上面这个类中，就有可能出现直接是用<code>a.privetMethod()</code>的场景了</p>
<p>此外就是反射执行某些逻辑的时候也有可能出现访问私有方法了，这里就不展开了；</p>
<p>欢迎有兴趣的小伙伴回复互动一下，也可以关注我的公众号：<strong>一灰灰blog</strong></p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/211118/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Bean工厂</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Bean工厂</source>
      <description>对象作为Java第一等公民，而Bean可算是Spring的一等公民了，如何声明、初始化、注入Bean是学习Spring中不可缺少的一环</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>对象作为Java第一等公民，而Bean可算是Spring的一等公民了，如何声明、初始化、注入Bean是学习Spring中不可缺少的一环</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.SpEL语法扫盲与查询手册</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/SpEL/01.200518-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BSpEL%E8%AF%AD%E6%B3%95%E6%89%AB%E7%9B%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/SpEL/01.200518-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BSpEL%E8%AF%AD%E6%B3%95%E6%89%AB%E7%9B%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.SpEL语法扫盲与查询手册</source>
      <description>Spring表达式语言简称为SpEL，一种类似Ognl的对象图导航语言（对于ognl不熟悉的同学可以参考一下: Ognl系列博文） SeEL为Spring提供了丰富的想象空间，除了一些基本的表达式操作之外，还支持 访问bean对象 调用方法，访问(修改)类(对象)属性 计算表达式 正则匹配 ...</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>SpEL</category>
      <pubDate>Mon, 18 May 2020 09:25:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring表达式语言简称为SpEL，一种类似Ognl的对象图导航语言（对于ognl不熟悉的同学可以参考一下: <a href="https://blog.hhui.top/hexblog/categories/%E5%BC%80%E6%BA%90/OGNL/" target="_blank" rel="noopener noreferrer">Ognl系列博文</a>）</p>
<p>SeEL为Spring提供了丰富的想象空间，除了一些基本的表达式操作之外，还支持</p>
<ul>
<li>访问bean对象</li>
<li>调用方法，访问(修改)类(对象)属性</li>
<li>计算表达式</li>
<li>正则匹配</li>
<li>...</li>
</ul>
<!-- more -->
<h2> I. 语法百科</h2>
<blockquote>
<p>以下内容均来自官方文档: <a href="https://docs.spring.io/spring-framework/docs/5.2.1.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-framework/docs/5.2.1.RELEASE/spring-framework-reference/core.html#expressions</a></p>
</blockquote>
<h3> 1. 字面表达式</h3>
<p>Spel支持<code>strings, numeric values (int, real, hex), boolean, and null</code>等基本类型，实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，字符串需要用单引号包括，浮点数默认为double类型，用<code>null</code>表示<code>null object</code></p>
<p>输出结果</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Inline List</h3>
<p>通过<code>{}</code>来表明List表达式，一个空的列表直接用<code>{}</code>表示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. Inline map</h3>
<p><code>{key:value}</code>来表示map表达式，空Map直接用<code>{:}</code>表示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 数组</h3>
<p>数组可以借助<code>new</code>构造方法来实现，通过下标<code>ary[index]</code>的方式访问数组中的元素</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 表达式</h3>
<p>Spel支持一些Java语法中常规的比较判断，算数运算，三元表达式，类型判断，<code>matches</code>正则匹配等基表表达式</p>
<p>下面给出一些简单的实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. Type与静态类</h3>
<p>如果想获取Class对象，或者访问静态成员/方法，可以借助<code>T()</code>语法来实现</p>
<p>比如我们有一个静态类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望访问静态属性<code>txt</code>, 表达式可以写成<code>T(com.git.hui.boot.spel.demo.BasicSpelDemo.StaClz).txt</code>，请注意圆括号中的是完整签名；访问静态方法方式类似</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的写法，请重点看一下<code>T(String)</code>，这里的String没有用完整的包路径，即直接位于<code>java.lang</code>包下的类，是可以省略掉完整包名的，就像我们平时写代码时，也不需要显示的加一个<code>import java.lang.*</code></p>
<h3> 7. 构造方法</h3>
<p>上面介绍array的时候，就介绍了使用<code>new</code>来创建数组对象，当然也可以直接构造其他的普通对象, 如我们新建一个测试类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过SpEl创建一个对象的实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>请注意，构造方法中类的完整签名</strong></p>
<h3> 8. 变量引用</h3>
<p>细心的小伙伴，在上面介绍数组的成员演示的实例中，写法如<code>"#num[1]"</code>，这个num前面有一个<code>#</code>，这是一个语法定义，有<code>#</code>修饰的表示变量访问</p>
<p>要理解这一小节，首先得理解<code>EvaluationContext</code>, 在我们的SpEL表达式的解析中，<code>getValue</code>有一个参数就是这个Context，你可以将他简单理解为包含一些对象的上下文，我们可以通过SpEL的语法，来访问操作Context中的某些成员、成员方法属性等</p>
<p>一般的操作过程如下:</p>
<ul>
<li><code>context.setVariable("person", person);</code> 向<code>EvaluationContext</code>中塞入成员变量</li>
<li><code>parser.parseExpression(xxx).getValue(context)</code> 解析SpEL表达式，context必须作为传参丢进去哦</li>
</ul>
<p>一个简单的实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>友情提示，如果访问对象的私有Field/method，会抛异常</strong></p>
<h3> 9. 函数</h3>
<p>Context中的变量，除了是我们常见的基本类型，普通的对象之外，还可以是方法，在<code>setVariable</code>时，设置的成员类型为<code>method</code>即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 10. bean访问</h3>
<p>在Spring中，什么对象最常见？当然是bean, 那么我们可以直接通过SpEL访问bean的属性、调用方法么？</p>
<p>要访问bean对象，所以我们的<code>EvaluationContext</code>中需要包含bean对象才行</p>
<ul>
<li>借助<code>BeanResolver</code>来实现，如<code>context.setBeanResolver(new BeanFactoryResolver(applicationContext));</code></li>
<li>其次访问bean的前缀修饰为<code>@</code>符号</li>
</ul>
<p>为了演示这种场景，首先创建一个普通的Bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要获取<code>ApplicationContext</code>，所以可以稍微改一下我们的测试类，让它继承自<code>ApplicationContextAware</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的写法和之前的并没有太大的区别，实际输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11. ifElse</h3>
<p>SpEL支持三元表达式，在上述的表达式中也给出了实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 12. elvis</h3>
<blockquote>
<p><code>xx != null ? xx : yy =&gt; xx?:yy</code></p>
</blockquote>
<p>这个也属于我们经常遇到的一种场景，如果xx为null，则返回yy；否则直接返回xx；简化写法为elvis写法: <code>xx?:yy</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 13. 安全表达式</h3>
<p>在java中，最常见最讨厌的是一个就是NPE的问题，SpEL中当然也可能出现这种情况，但是若在SpEL中进行非空判断，那就很不优雅了，SpEL提供了<code>xx?.yy</code>的写法来避免npe，即</p>
<blockquote>
<p><code>xx == null ? null : xx.yy  =&gt; xx?.yy</code></p>
</blockquote>
<p>举例说明</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 14. 容器截取</h3>
<p>遍历容器，获取子集，相当于jdk8 Stream中filter用法，语法格式如下</p>
<blockquote>
<p><code>xx.?[expression]</code>, 请注意中括弧中的表达式必须返回boolean</p>
</blockquote>
<p>举例说明</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p>
<ul>
<li>在列表表达式中，可以通过<code>#this</code>来指代列表中的每一个元素</li>
<li>在map表达式中，通过<code>key</code>, <code>value</code>来分别指代map中的<code>k,v</code></li>
</ul>
<h3> 15. 容器映射</h3>
<p>将一个集合通过某种规则，映射为另一种集合，相当于jdk8 Stream中的map用法，语法如下</p>
<blockquote>
<p><code>xx.![expression]</code>, 将表达式计算的结果作为输出容器中的成员</p>
</blockquote>
<p>举例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 16. 表达式模板</h3>
<p>SpEL还提供了一种自定义表达式模板的方式，将字面量和表达式放在一起使用，比如下面这一条语句</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>#{T(java.lang.Math).random()}</code>是一个SpEL表达式，左边的是普通字符串，这种写法也常见于<code>@Value</code>注解中的属性写法，当然直接通过上面的写法执行这个语句会报错，这个时候需要指定<code>ParserContext</code></p>
<p>举例说明</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 17. 小结</h3>
<p>SpEL属于非常强大的表达式语言了，就我个人的感觉而言，它和OGNL有些像，当它们的上下文中包含了Spring的上下文时，可以访问任何的bean，而你可以借助它们的语法规范，做各种事情</p>
<p>推荐我之前的一个项目，<code>https://github.com/liuyueyi/quick-fix</code>，利用ognl结合<code>ApplicationContext</code>，可以随心所欲的访问控制应用中的任何bean对象</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/spring-boot/013-spel" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/spring-boot/013-spel</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200518/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>SpEL表达式</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/SpEL/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/SpEL/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">SpEL表达式</source>
      <description>Spring Expression Language在Spring生态中应用颇广，如配置读取，AOP注解的增强，条件注入等等，推荐有兴趣的了解一下</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring Expression Language在Spring生态中应用颇广，如配置读取，AOP注解的增强，条件注入等等，推荐有兴趣的了解一下</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.事件机制的两种消费姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E4%BA%8B%E4%BB%B6/01.210429-SpringBoot%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%B6%88%E8%B4%B9%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E4%BA%8B%E4%BB%B6/01.210429-SpringBoot%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%B6%88%E8%B4%B9%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.事件机制的两种消费姿势</source>
      <description>借助Spring可以非常简单的实现事件监听机制，本文简单介绍下面向接口与注解监听的两种姿势</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>事件</category>
      <pubDate>Thu, 29 Apr 2021 20:12:19 GMT</pubDate>
      <content:encoded><![CDATA[<p>借助Spring可以非常简单的实现事件监听机制，本文简单介绍下面向接口与注解监听的两种姿势</p>
<!-- more -->
<h2> I. 项目环境</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>为了后面的发布事件验证，起一个web服务</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 事件机制</h2>
<h3> 1. 事件对象</h3>
<p>在Spring中，所有的事件需要继承自<code>ApplicationEvent</code>，一个最基础的<code>MsgEvent</code>如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 接口方式消费</h3>
<p>消费事件有两种方式，接口的声明，主要是实现<code>ApplicationListener</code>接口；注意需要将listener声明为Spring的bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 注解方式消费</h3>
<p>实现接口需要新建实现类，更简单的方法是直接在消费方法上加一个注解<code>@EventListener</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个注解，支持根据Event参数类型进行匹配，即上面的实例中，方法上直接加<code>@EventListener</code>不指定圆括号内部的也没关系</p>
<h3> 4. 发布事件</h3>
<p>前面是消费事件，消费的前提是有事件产生，在Spring中，发布事件主要需要借助<code>ApplicationContext</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 测试</h3>
<p>一个简单的测试demo</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问: <code>curl http://localhost:8082/pub?msg=一灰灰blog</code></p>
<p>输出日志:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个测试两种消费方式都可以成功，但是，在实测的过程中发现一种case，注解消费方式不生效，测试姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在启动类的构造方法中发布事件，发现接口方式可以接收事件，但是注解方式不生效，why?</p>
<p>在stockoverstack上有个相似的问题 <a href="https://stackoverflow.com/questions/38487474/springboot-eventlistener-dont-receive-events" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/38487474/springboot-eventlistener-dont-receive-events</a>，这里主要提了一个观点</p>
<ul>
<li>发布消息比事件消费注册的要早</li>
</ul>
<p>那么是这个原因么？ 静待下次源码分析</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/012-context-listener/" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/012-context-listener/</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210429/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>消息事件</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E4%BA%8B%E4%BB%B6/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E4%BA%8B%E4%BB%B6/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">消息事件</source>
      <description>消息事件大量应用在Spring中，传说中的解耦神器；当然这里的消息事件是jvm级别的，本系列将带你了解Spring容器的哪些事件，以及如何自定义生产消费事件</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>消息事件大量应用在Spring中，传说中的解耦神器；当然这里的消息事件是jvm级别的，本系列将带你了解Spring容器的哪些事件，以及如何自定义生产消费事件</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.国际化支持实例开发</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%9B%BD%E9%99%85%E5%8C%96/01.210509-SpringBoot%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96%E6%94%AF%E6%8C%81%E5%AE%9E%E4%BE%8B%E5%BC%80%E5%8F%91.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%9B%BD%E9%99%85%E5%8C%96/01.210509-SpringBoot%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96%E6%94%AF%E6%8C%81%E5%AE%9E%E4%BE%8B%E5%BC%80%E5%8F%91.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.国际化支持实例开发</source>
      <description>国际化的支持，对于app开发的小伙伴来说应该比价常见了；作为java后端的小伙伴，一般来讲接触国际化的机会不太多，毕竟业务开展到海外的企业并没有太多 SpringBoot提供了国际化的支持，网上也有相关的教程，然而实际体验的时候，发现并没有预期的那么顺利；本文将介绍一下SpringBoot如何支持国家化，以及在支持的过程中，一些注意事项</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>国际化</category>
      <pubDate>Sun, 09 May 2021 14:36:03 GMT</pubDate>
      <content:encoded><![CDATA[<p>国际化的支持，对于app开发的小伙伴来说应该比价常见了；作为java后端的小伙伴，一般来讲接触国际化的机会不太多，毕竟业务开展到海外的企业并没有太多</p>
<p>SpringBoot提供了国际化的支持，网上也有相关的教程，然而实际体验的时候，发现并没有预期的那么顺利；本文将介绍一下SpringBoot如何支持国家化，以及在支持的过程中，一些注意事项</p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置文件</h3>
<p>配置文件中，指定国际化的参数，thmeleaf的配置信息</p>
<p>application.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 国际化信息文件</h3>
<p>上面的配置 <code>spring.messages.basename</code> 指定国际化配置文件的目录与前缀，取值为<code>i18n/messages/messages</code></p>
<p>所以在资源目录下，新建文件 <code>i18n/messages</code>，国际化文件名为 <code>messages-xxx.properties</code>，项目结果如</p>
<figure><img src="/imgs/210509/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>对应的信息如简体中文 <code>messages_zh_CN.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>英文 <code>messages_en_US.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>繁体 <code>messages_zh_TW.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<p>注意<code>spring.messages.basename</code> 这个配置的取值为国际化文件的<code>目录 + 文件名前缀</code>，比如上面若少了最后一层的<code>messages</code>，会提示取不到配置</p>
<p>其次在IDEA中，选中国家化文件之后，点击下方的<code>Resource Bundle</code>，可以进入如上图中更友好的编辑框，支持一次修改多个语言的信息</p>
<h2> II. 国际化支持</h2>
<p>前面是国际化的基本配置，那么如何根据前面配置中的key，获取不同语言的value呢？</p>
<h3> 1. MessageSource</h3>
<p>在SpringBoot中主要借助<code>MessageSource</code>来获取不同语言的value信息</p>
<p>如一个最基本的封装</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试demo</h3>
<p>接下来写一个基础的测试demo，根据传参来修改<code>LocalContextHolder</code>中的值，从而实现不同语言的切换</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示如下</p>
<figure><img src="/imgs/210509/01.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 子线程支持</h3>
<p>上面虽然可以根据请求参数来切换语言，但是有个问题，如果在子线程中进行国际化支持，则会不生效</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图，即便修改了language，返回都是默认的中文</p>
<figure><img src="/imgs/210509/02.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>针对这种解决办法是在设置Locale时，指定第二个可继承参数为true</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210509/03.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. Cookies方式缓存国际化信息</h3>
<p>上面虽说支持了根据传参来设置国际化，但是需要每次传参都带上这个参数<code>language=zh_CN</code>，还需要我们自己来解析这个请求参数，我们可以考虑借助拦截器来实现统一的Local设置</p>
<p>这个拦截器可以自己按照上面的方式写，当然更推荐的是直接使用已封装好的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的 <code>localResolver</code>, 当我们不注册这个bean的时候，运行则会抛出异常<code>nested exception is java.lang.UnsupportedOperationException: Cannot change HTTP accept header - use a different locale resolution</code></p>
<p>上面的实例中，采用的是<code>CookieLocaleResolver</code>，因此会在cookie中缓存语言信息，一次修改，后续都会生效</p>
<p>测试如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210509/04.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>主要一个地方设置了语言，后续的访问不带语言参数时，都会复用之前设置的语言，这样使用来说就更简洁了</p>
<h3> 5. 页面元素国际化</h3>
<p>上面介绍的是返回的json串支持国际化，另外一个场景就是我们返回的页面，希望渲染的数据也可以实现国际化支持</p>
<p>在上文的基础上实现这个也没什么难度了</p>
<p>在资源目录下，新建目录<code>templates</code>，新建模板文件 <code>index.html</code></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的controller</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210509/05.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>虽说上面这样实现了国家化的支持，但是看起来不太优雅，难道还需要后端接口进行转义一下么，没有更简单的方式么？</p>
<p>Themeleaf提供了更简单的支持方式，将上面的$改成#即可</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的rest</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210509/06.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 6. 注意事项</h3>
<p>在实现国际化的过程中，遇到了下面几个问题，特此记录一下</p>
<h4> 6.1 配置信息无法获取</h4>
<p>在使用<code>messageSource.getMessage(msgKey, null, LocaleContextHolder.getLocale())</code>查询配置信息，结果提示<code>org.springframework.context.NoSuchMessageException: No message found under code '200' for locale 'en_US'.</code></p>
<p>出现上面这个问题，当然优先判断是否真的配置了这个参数，其次确认<code>spring.messages.basename</code>是否准确，对应的value为目录 + 语言的前缀</p>
<ul>
<li>如我的配置文件为 <code>i18n/messages/messages_en_US.properties</code>， 那么这个value就应该是 <code>i18n/messages/messages</code></li>
</ul>
<h4> 6.2 中文乱码问题</h4>
<ul>
<li>设置编码 <code>spring.messages.encoding=utf-8</code></li>
</ul>
<p>如果发现上面这个设置了依然没有生效，那么考虑一下配置文件是否为utf-8编码</p>
<figure><img src="/imgs/210509/07.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> 6.3 根据请求支持国际化</h4>
<p>需要添加本地化的拦截器<code>LocaleChangeInterceptor</code>，来实现根据请求参数，解析语言环境</p>
<p>其次需要注册<code>LocaleResolver</code>，比如demo中使用<code>CookieLocaleResolver</code>，来保存国际化信息 （如果不设置它会抛异常）</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/150-i18n" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/150-i18n</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210509/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>国际化</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%9B%BD%E9%99%85%E5%8C%96/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%9B%BD%E9%99%85%E5%8C%96/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">国际化</source>
      <description>手把手教你国际化配置支持，多语言开发者的福音</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>手把手教你国际化配置支持，多语言开发者的福音</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.实现一个简单的分布式定时任务(应用篇)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9A%E6%97%B6%E5%99%A8/01.200412-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9A%E6%97%B6%E5%99%A8/01.200412-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.实现一个简单的分布式定时任务(应用篇)</source>
      <description>在SpringBoot中，想使用定时器比较简单，一个注解@Scheduled配合上cron表达式即可支持各种定时任务了； 单机任务还是比较简单的，但是当我们的服务有多个实例在运行时，如果只希望一个实例上的定时任务执行，可以怎么出了呢？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>定时器</category>
      <category>应用篇</category>
      <pubDate>Sun, 12 Apr 2020 13:47:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>在SpringBoot中，想使用定时器比较简单，一个注解<code>@Scheduled</code>配合上cron表达式即可支持各种定时任务了；</p>
<p>单机任务还是比较简单的，但是当我们的服务有多个实例在运行时，如果只希望一个实例上的定时任务执行，可以怎么出了呢？</p>
<!-- more -->
<h2> I. 场景分析</h2>
<h3> 1. 需求说明</h3>
<p>简单来讲，就是我们的应用中，有一个定时任务（如每天八点给用户推送早报），为了保证我们的应用可靠性，这个应用部署了三台实例</p>
<p>因此当我们对定时任务不做任何处理时，每台实例上的定时任务到了八点就执行，用户就会接收到三次推送</p>
<p>所以为了避免上面的场景出现，我们希望，三个实例中只能有一个实例的定时任务生效，其他的两个不执行</p>
<h3> 2. 方案设计</h3>
<p>从上面的场景描述，可以看成是一个分布式的任务调度的问题，当然我们接下来并不是要实现一个功能完备的分布式任务调度（已经有很多相关的优秀框架了... 如果感兴趣的话，也不是不可以再造一个轮子）；</p>
<p>我们可以采用一个简单的方案来实现这种排他性，比如我们选择一个公用的配置信息用来存储允许执行定时任务的实例ip，当实例的定时任务执行之前，先判断一下实例ip与配置的ip是否相同，如果是，则可以执行定时任务；否则不执行</p>
<p><strong>注意：上面这种方式可以实现排他性，但是有风险哦（如配置中的ip不对，或者这个ip对应的实例下线了，可能导致定时任务没有实例运行哦）</strong></p>
<h2> II. 分布式定时任务实现</h2>
<h3> 0. 分析</h3>
<p>在我们上面的设计中，有几个问题是需要我们关心的</p>
<ul>
<li>配置如何处理？</li>
<li>如何拦截定时器的操作</li>
</ul>
<p><strong>配置存储</strong></p>
<p>一般来讲，应用部署多个实例的情况下，多半实在微服务的架构下，如果我们有可用的配置中心，这也是一个比较好的存储配置的方案；</p>
<p>当然如果没有配置中心，使用redis/db进行配置的存储，也是ok的，具体的选择取决于我们的应用实际情况；唯一需要注意的是，这个配置对于所有的实例公用，仅存一份</p>
<p><strong>定时器拦截</strong></p>
<p>关于定时器的拦截，最容易想到的就是AOP，拦截目标方法，然后在切面中判断是否需要执行</p>
<p>直接使用AOP拦截所有的<code>@Scheduled</code>方法貌似可以，但是有以下缺陷</p>
<ul>
<li>定时任务的方法需要是<code>public/package/protected</code>，不然切面不会生效（请注意，定时任务注解<code>@Scheduled</code>是可以修饰private方法，并生效的哦，它的具体实现方式和我们常见的AOP有一些区别）</li>
<li>当系统中存在分布式定时任务和普通定时任务（即每个实例的定时任务都需要正常执行）时，不太合适
<ul>
<li>因此入股使用AOP，可以考虑新建一个注解，来实现</li>
</ul>
</li>
</ul>
<p><strong>定时任务扩展</strong></p>
<p>这里走的是另外一条思路，在Spring扫描定时任务的时候，我们扩展一下最终的任务逻辑，在具体的执行之前，做一个过滤规则</p>
<h3> 1. AOP实现方式</h3>
<blockquote>
<p>为了简化后续的测试逻辑，我们用一个简单的方式用来替代多实例的测试，将多实例的单任务执行，简化为单实例中，多个定时任务只允许一个执行，通过方法名来判断到底允许哪个任务执行</p>
</blockquote>
<p>首先自定义一个注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个简单的获取配置的Mock类，用来模拟配置竞争</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的切面逻辑，</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写两个定时任务，请注意两个方法不能是<code>private</code>，否则启动会失败</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是启动类，请注意看注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/200412/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 定时任务扩展</h3>
<p>上面aop的方式除了要求定时任务方法不能是private之外，没有什么其他的问题；</p>
<p>但如果我就希望定时任务可以是private方法时，可以怎么办？</p>
<p>接下来我们通过自定义的定时任务来替换Spring提供的，使用的Spring版本为<code>5.2.1.RELEASE</code>（不同的版本实现方式会有些区别哦）</p>
<p>自定义<code>ScheduledAnnotationBeanPostProcessor</code>，重写生成定时任务的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们自定义的定时任务中，添加判断逻辑<code>MyScheduledMethodRunnable</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用我们自定义的定时任务处理类替换默认的实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们的启动类，需要修改一下，将<code>@EnableScheduling</code>替换为<code>@EnableDistributeScheduling</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将我们的定时任务，添加上private修饰，最终测试输出结果如下图</p>
<figure><img src="/imgs/200412/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面介绍的这种实现方式，主要是接入定时任务的生成逻辑，在这里我们有更多的操作空间，比如某些不满足条件的定时任务直接不生成，避免无用的调度</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/009-distribute-scheduler-task" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/009-distribute-scheduler-task</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200412/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>定时器</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">定时器</source>
      <description>基于Spring容器，分分钟教你实现JVM级别的定时任务</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>基于Spring容器，分分钟教你实现JVM级别的定时任务</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.Bean之注销与动态注册实现服务mock（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/04.181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/04.181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.Bean之注销与动态注册实现服务mock（应用篇）</source>
      <description>前面一篇博文介绍了动态注册Bean的姿势，看完之后难免会有个疑问，在我n年的业务开发中，还真没遇到过需要自己来注册bean的场景（常年的if-else, curd还真不可能遇到）那么这个东西到底有什么用，或者可以给我们打开哪些思路呢？ 本篇博文将以应用的角度，简单的演示一下可以怎么用</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <category>应用篇</category>
      <pubDate>Wed, 17 Oct 2018 10:31:35 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文介绍了动态注册Bean的姿势，看完之后难免会有个疑问，在我n年的业务开发中，还真没遇到过需要自己来注册bean的场景（常年的if-else, curd还真不可能遇到）那么这个东西到底有什么用，或者可以给我们打开哪些思路呢？</p>
<p>本篇博文将以应用的角度，简单的演示一下可以怎么用</p>
<!-- more -->
<h2> I. 应用说明</h2>
<h3> 1. 背景</h3>
<p>在实际的业务开发中，一个需求来了，我需要依赖第三方提供的接口，但实际的情况可能是对方还没开发好，接口没法提供，这个时候我要测试自己的功能可以怎么做？</p>
<ul>
<li>在依赖的接口上做特殊处理，不直接调用接口，直接返回mock的结果</li>
<li>测试用例中可以使用MockService来替换某些服务</li>
</ul>
<p>上面两个可以说是比较常见的使用手段了，再把上面的case进行扩展下，假设我现在提供的一个web服务，正常访问接口是要求用户登录的；但是我希望在本地测试环境下，不登录也可以访问（即给一个默认的登录账号）</p>
<p>针对这个场景进行分析，一是要求本地正常启动服务；二是登录服务默认返回true</p>
<h3> 2. 方案</h3>
<p>对上面的场景进行简单化，实例说明</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的这个case可以怎么实现呢？</p>
<p>结合主题，判断当前环境，如果是本地，则删除Spring容器中的UserService的Bean，然后将自己创建的模拟UserService类注册到Bean中，使其他对UserService的引用，替换为mock的UserService</p>
<h3> 3. 实现</h3>
<p>根据上面的实现，首先是定义一个UserService的接口类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给它一个默认实现，表示在正常环境中，实际调用的都是 <code>UserServiceImpl</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给一个测试的服务</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，上面的rest服务访问时，每次都应该返回1，即调用的是默认的<code>UserServiceImpl</code></p>
<p>现在我们就需要加上一个逻辑，如果是本地环境时，使用自己创建的UserService来替换，也就是说这里涉及到了一个bean的注销和手动注册Bean，借助前面的知识也比较好实现了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面手动注册的一个生成的匿名UserService类，内部返回的随机的userId, 因此在本地环境启用时，每次调用前面的rest服务时，返回随机的userId，而不是固定的1</p>
<figure><img src="http://spring.hhui.top/spring-blog/imgs/181017/00.gif" alt="演示图" tabindex="0" loading="lazy"><figcaption>演示图</figcaption></figure>
<h3> 4. 扩展</h3>
<p>上面只是给出了一个简单的应用场景和实现，在实际的工程中有没有这样的case呢?</p>
<p>在使用SprigCloud的Feign时，就感觉到了这种思路，Feign封装了SpringCloud的RPC调用方式，定义一个接口，对于使用者而言，可以注入这个接口，然后像调用本地方法一样调用执行rpc调用</p>
<p>这里面必然就涉及到接口的代理类生成与注册的问题，而这个过程肯定不会是Spring框架来完成的，也就只有可能是FeignClient来包装的，目前还没有看Feign的源码，所以也不好下结论，也就只能直观的分析，这里面应该少不了Bean的动态注册手段了；关于底层是否如预期这般，静候后续源码分析</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/006-dynamicbean" target="_blank" rel="noopener noreferrer">006-dynamicbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181017/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.FactoryBean及代理实现SPI机制的实例（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/10.181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/10.181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.FactoryBean及代理实现SPI机制的实例（应用篇）</source>
      <description>FactoryBean在Spring中算是一个比较有意思的存在了，虽然在日常的业务开发中，基本上不怎么会用到，但在某些场景下，如果用得好，却可以实现很多有意思的东西 本篇博文主要介绍如何通过FactoryBean来实现一个类SPI机制的微型应用框架</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <category>应用篇</category>
      <pubDate>Wed, 24 Oct 2018 14:15:12 GMT</pubDate>
      <content:encoded><![CDATA[<p>FactoryBean在Spring中算是一个比较有意思的存在了，虽然在日常的业务开发中，基本上不怎么会用到，但在某些场景下，如果用得好，却可以实现很多有意思的东西</p>
<p>本篇博文主要介绍如何通过FactoryBean来实现一个类SPI机制的微型应用框架</p>
<!-- more -->
<p>文章内涉及到的知识点</p>
<ul>
<li>SPI机制</li>
<li>FactoryBean</li>
<li>JDK动态代理</li>
</ul>
<h2> I. 相关知识点</h2>
<p>在看下面的内容之前，得知道一下什么是SPI，以及SPI的用处和JDK实现SPI的方式，对于这一块有兴趣了解的童鞋，可以看一下个人之前写的相关文章</p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/categories/Quick%E7%B3%BB%E5%88%97/QuickSpi/" target="_blank" rel="noopener noreferrer">SPI相关技术博文汇总---By一灰灰Blog</a></li>
</ul>
<h3> 1. demo背景说明</h3>
<p>在开始之前，有必要了解一下，我们准备做的这个东西，到底适用于什么样的场景。</p>
<p>在电商中，有一个比较恰当的例子，商品详情页的展示。拿淘宝系的详情页作为背景来说明（没有在阿里工作过，下面的东西纯粹是为了说明应用场景而展开）</p>
<figure><img src="/imgs/181024/00.jpg" alt="商品详情页" tabindex="0" loading="lazy"><figcaption>商品详情页</figcaption></figure>
<p>假设有这么三个详情页，我们设定一个大前提，底层的数据层提供方都是一套的，商品详情展示的服务完全可以做到复用，即三个性情页中，绝大多数的东西都一样，只是不同的详情页车重点不同而已。</p>
<p>如上图中，我们假定有细微区别的几个地方</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>淘宝详情</th>
<th>天猫详情</th>
<th>咸鱼详情</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>banner</td>
<td>显示淘宝的背景墙</td>
<td>显示天猫的广告位</td>
<td>咸鱼的坑位</td>
<td>三者数据结构完全一致，仅图片url不同</td>
</tr>
<tr>
<td>推荐</td>
<td>推荐同类商品</td>
<td>推荐店家其他商品</td>
<td>推荐同类二手产品</td>
<td>数据结构相同，内容不同</td>
</tr>
<tr>
<td>评价</td>
<td>商品评价</td>
<td>商品评价</td>
<td>没有评价，改为留言</td>
<td></td>
</tr>
<tr>
<td>促销</td>
<td>优惠券</td>
<td>天猫积分券</td>
<td>没有券</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>根据上面的简单对比，其实只想表达一个意思，业务基本上一致，仅仅只有很少的一些东西不同，需要定制化，这个时候可以考虑用SPI来支持定制化的服务</p>
<h3> 2. SPI简述</h3>
<h4> a. 基本定义</h4>
<blockquote>
<p><a href="https://blog.hhui.top/hexblog/2017/05/26/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%80%EF%BC%9A%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">https://blog.hhui.top/hexblog/2017/05/26/SPI框架实现之旅一：背景介绍/</a></p>
</blockquote>
<p>SPI的全名为Service Provider Interface，简单的总结下java spi机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。 java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制</p>
<p>上面是相对正视一点的介绍，简单一点，符合本文设计目标的介绍如下</p>
<ul>
<li>接口方式引用</li>
<li>具体执行时，根据某些条件，选中实际的子类执行</li>
</ul>
<p>通过上面的描述，可以发现一个最大的优点就是：</p>
<ul>
<li>通过扩展接口的实现，就可以实现服务扩展；而不需要改原来的业务代码</li>
</ul>
<h4> b. demo辅助说明</h4>
<p>一个简单的应用场景如下</p>
<figure><img src="/imgs/181024/01.jpg" alt="报警系统demo" tabindex="0" loading="lazy"><figcaption>报警系统demo</figcaption></figure>
<p>这个报警系统中，对于使用者而言，通过 <code>IAlarm#sendMsg(level, msg)</code> 来执行报警发送的方式，然而这一行的具体执行者是（忽略，日志报警，邮件报警还是短信报警）不确定的，通过SPI的实现方式将是如下</p>
<ul>
<li>如果level为1，则忽略报警内容</li>
<li>如果level为2，则采用日志报警的方式来报警</li>
<li>...</li>
</ul>
<p>如果我们想新添加一种报警方式呢？那也很简单，新建一个报警的实现</p>
<ul>
<li>level == 5, 则采用微信报警</li>
</ul>
<p>然后对于使用者而言，其他的地方都不用改，只是在传入的level参数换成5就可以了</p>
<h3> 3. 代理模式简述</h3>
<p>代理模式，在Spring中可以说是非常非常非常常见的一种设计模式了，大名鼎鼎的AOP就是这个实现的一个经典case，常见的代理有两种实现方式</p>
<ul>
<li>JDK方式</li>
<li>CGLIB方式</li>
</ul>
<p>简单说一下，代理模式的定义和说明如下</p>
<blockquote>
<p><a href="https://blog.csdn.net/liuyueyi25/article/details/77868204" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/liuyueyi25/article/details/77868204</a></p>
</blockquote>
<p>其实在现实生活中代理模式还是非常多得，这里引入一个代理商的概念来加以描述，本来一个水果园直接卖水果就好了，现在中间来了一个水果超市，水果园的代销商，对水果进行分类，包装，然后再卖给用户，这其实也算是一种代理</p>
<p>百科定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<h2> II. 方案设计与实现</h2>
<p>了解完上面的前提之后，我们可以考虑下如何实现一个Spring容器中的SPI工具包</p>
<h3> 1. 目标拆分</h3>
<p>首先确定大的生态环境为Spring，我们针对Bean做SPI功能的扩展，即定义一个SPI的接口，然后可以有多个实现类，并且全部都声明为Bean；</p>
<p>SPI的一个重要特点就是可以选中不同的实现来执行具体的代码，那么放在这里，就会有两种方案</p>
<ul>
<li>方案一：依赖注入时，直接根据选择条件，注入一个满足的实例，后续所有的SPI调用，都将走这个具体的实例调用执行</li>
<li>方案二：依赖注入时，不注入具体的实例，反而注册一个代理类，在代理类中，根据调用的参数来选择具体匹配的实例来执行，因此后续的调用具体选中的实例将与传入的参数有关</li>
</ul>
<p><strong>方案对比</strong></p>
<table>
<thead>
<tr>
<th>方案一</th>
<th>方案二</th>
</tr>
</thead>
<tbody>
<tr>
<td>接近JDK的SPI使用方式</td>
<td>代理方式选中匹配的实例</td>
</tr>
<tr>
<td>优点：简单，使用以及后续维护简单</td>
<td>灵活, 支持更富想象力的扩展</td>
</tr>
<tr>
<td>缺点：一对一，复用性不够，不能支持前面的case</td>
<td>实现和调用方式跟繁琐一点，需要传入用于选择具体实例条件参数 <br> 每次选择子类都需要额外计算</td>
</tr>
</tbody>
</table>
<p>对比上面的两个方案之后，选中第二个（当然主要原因是为了演示FactoryBean和代理实现SPI机制，如果选择方案一就没有这两个什么事情了）</p>
<p>选中方案之后，目标拆分就比较清晰了</p>
<ul>
<li>定义SPI接口，以及SPI的使用姿势（前提）</li>
<li>一个生成代理类的FactoryBean （核心）</li>
</ul>
<h3> 2. 方案设计</h3>
<p>针对前面拆分的目标，进行方案设计，第一步就是接口相关的定义了</p>
<h4> a. 接口定义</h4>
<p>设计的SPI微型框架的核心为：<strong>在执行的时候，根据传入的参数来决定具体的实例来执行</strong>，因此我们的接口设计中，至少有一个根据传入的参数来判断是否选中这个实例的接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到上面的实现之后，就会有一个疑问，如果有多个子类都满足这个条件怎么办？因此可以加一个排序的接口，返回优先级最高的匹配者</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口定义之后，使用者应该怎么用呢？</p>
<h4> b. 使用约束</h4>
<p><strong>spi实现的约束</strong></p>
<p>基于JDK的代理模式，一个最大的前提就是，只能根据接口来生成代理类，因此在使用SPI的时候，我们希望使用者先定义一个接口来继承<code>ISpi</code>,然后具体的SPI实现这个接口即可</p>
<p>其次就是在Spring的生态下，要求所有的SPI实现都是Bean，需要自动扫描或者配置注解方式声明，否者代理类就不太好获取所有的SPI实现了</p>
<p><strong>spi使用的约束</strong></p>
<p>在使用SPI接口时，通过接口的方式来引入，因为我们实际注入的会是代理类，因此不要写具体的实现类</p>
<p>单独看上面的说明，可能不太好理解，建议结合下面的实例演示对比</p>
<h4> c. 代理类生成</h4>
<p>这个属于最核心的地方了（虽说重要性为No1，但实现其实非常非常简单）</p>
<p>代理类主要目的就是在具体调用执行时，根据传入的参数来选中具体的执行者，执行后并返回对应的结果</p>
<ul>
<li>获取所有的SPI实现类（<code>org.springframework.beans.factory.ListableBeanFactory#getBeansOfType(java.lang.Class&lt;T&gt;)</code>）</li>
<li>通过jdk生成代理类，代理类中，遍历所有的SPI实现，根据传入的第一个参数作为条件进行匹配，找出首个命中的SPI实现类，执行</li>
</ul>
<p>将上面的步骤具体实现，也就比较简单了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实例演示</h3>
<p>话说方案设计之后，应该就是实现了，然而因为实现过于简单，设计的过程中，也就顺手写了，就是上面的一个接口定义 <code>ISpi</code> 和一个用来生成动态代理类的<code>SpiFactoryBean</code></p>
<p>接下来写一个简单的实例用于功能演示，定义一个<code>IPrint</code>用于文本输出，并给两个实现，一个控制台输出，一个日志输出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的实现类如下，外部使用者通过<code>execute</code>方法实现调用，其中<code>level&lt;=0</code>时选择控制台输出；否则选则日志文件方式输出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的步骤和一般的写法没有什么区别，使用的姿势又是怎样的呢？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上面的<code>Application</code>的构造方法，要求传入一个<code>IPrint</code>参数，Spring会从容器中找到一个bean作为参数传入，而这个bean就是我们生成的代理类，这样才可以根据不同的参数来选中具体的实现类</p>
<p>所以问题就是如何声明这个代理类了，配置如下，通过FactoryBean的方式来声明Bean，并添加上<code>@Primary</code>注解，这样就可以确保注入的是我们声明的代理类了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的使用逻辑，涉及到的知识点在前面的博文中分别有过介绍，更多详情可以参考</p>
<ul>
<li>FactoryBean的使用姿势，参考：<a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li>配置类<code>Configuration</code>声明的方式，参考：<a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li>@Primary注解的使用，参考: <a href="http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener noreferrer">181022-SpringBoot基础篇Bean之多实例选择</a></li>
</ul>
<p>接下来就是实际执行看下结果如何了</p>
<figure><img src="/imgs/181024/02.gif" alt="演示demo" tabindex="0" loading="lazy"><figcaption>演示demo</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 项目相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener noreferrer">181022-SpringBoot基础篇Bean之多实例选择</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/24/181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/" target="_blank" rel="noopener noreferrer">181024-SpringBoot应用篇之FactoryBean及代理实现SPI机制的实例</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/000-spi-factorybean" target="_blank" rel="noopener noreferrer">000-spi-factorybean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181024/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.从0到1实现一个自定义Bean注册器（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/13.191213-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89Bean%E6%B3%A8%E5%86%8C%E5%99%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/13.191213-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89Bean%E6%B3%A8%E5%86%8C%E5%99%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.从0到1实现一个自定义Bean注册器（应用篇）</source>
      <description>我们知道在spring中可以通过@Component，@Service, @Repository 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助@Bean来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？ 我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似@Component的效果呢？ 接下来本文将介绍，如果通过ImportBeanDefinitionRegistrar结合自定义注解来实现bean注册，主要用到的知识点如下： ImportBeanDefinitionRegistrar bean注册的核心类 @Import 导入配置 ClassPathBeanDefinitionScanner</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <category>应用篇</category>
      <pubDate>Fri, 13 Dec 2019 17:21:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>我们知道在spring中可以通过<code>@Component</code>，<code>@Service</code>, <code>@Repository</code> 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助<code>@Bean</code>来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？</p>
<p>我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似<code>@Component</code>的效果呢？</p>
<p>接下来本文将介绍，如果通过<code>ImportBeanDefinitionRegistrar</code>结合自定义注解来实现bean注册，主要用到的知识点如下：</p>
<ul>
<li><code>ImportBeanDefinitionRegistrar</code> bean注册的核心类</li>
<li><code>@Import</code> 导入配置</li>
<li><code>ClassPathBeanDefinitionScanner</code></li>
</ul>
<!-- more -->
<h2> I. 自定义bean注册器</h2>
<p>虽然我们的目标比较清晰，但是突然让我们来实现这么个东西，还真有点手足无措，应该从哪里下手呢？</p>
<h3> 0. 寻找"致敬"对象</h3>
<p>如果看过我之前关于SpringBoot结合java web三剑客（Filter, Servlet, Listener)的相关博文的同学，应该会记得一个重要的知识点：</p>
<ul>
<li><code>@WebListener</code>, <code>@WebServlet</code>, <code>@WebFilter</code> 这三个注解属于Servlet3+ 规范</li>
<li>在SpringBoot项目中，如需要上面注解生效，需要在启动类上添加注解 <code>@ServletComponentScan</code></li>
</ul>
<p>看到上面这个是不是会有一丝灵感被激发（在当时写上面博文的时候，特意的看了一下后面注解的逻辑），嘿嘿，感觉找到了一条通往成功之旅的道路</p>
<p>既然<code>@WebXxx</code>注解不是原生的Spring支持注解，所以让他生效的注解 <code>@ServletComponentScan</code>就显得很重要了，显然是它充当了桥梁（在搞事情了），然后我们致敬（抄袭）的对象就有了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解定义比较简单，最终生效的不用说，肯定是<code>ServletComponentScanRegistrar</code>了，再接着瞅一眼</p>
<figure><img src="/imgs/191213/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（不同的SpringBoot版本，上面的实现类可能会有一定的差异，上面的源码截取自spring-boot 2.1.2.RELEASE版本的包内）</p>
<h3> 1. 准备篇</h3>
<p>致敬对象找到了，接下来开始正式实现前的一些准备工作，首先我们把目标具体事例化</p>
<ul>
<li>所有类上拥有自定义注解<code>@Meta</code>的类，会注册到Spring容器，作为一个普通的Bean对象</li>
</ul>
<p>然后就是测试测试验证是否生效的关键case了</p>
<ul>
<li>无外部依赖的<code>@Meta</code>类是否可以正常被spring识别</li>
<li><code>@Meta</code>类是否可以被其他<code>bean</code> or <code>@Meta</code>类通过<code>@Autowired</code>引入</li>
<li><code>@Meta</code>类是否可以正常依赖普通的<code>bean</code>，<code>@Meta</code>类</li>
</ul>
<h3> 2. 开始实现</h3>
<h4> a. @Meta注解定义</h4>
<p>类似<code>@Component</code>注解的功能，我们弄简单一点即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. @MetaComponentScan注解</h4>
<p>这个注解和<code>@ServletComponentScan</code>作用差不多，主要是用来加载<code>ImportBeanDefinitionRegistrar</code>实现类，后者则是定义bean的核心类</p>
<p>实现如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先暂时无视Import的值，看一下注解的<code>basePackages</code>和<code>basePackageClasses</code></p>
<p>我们知道<code>@ComponentScan</code>的作用主要是用来指定哪些包路径下的类开启注解扫描；<code>MetaComponentScan</code>的几个成员主要作用和上面相同；</p>
<ul>
<li>当指定了值的时候，主要加载这些包路径下，包含<code>@Meta</code>注解的类；</li>
<li>如果全是默认值（即为空），则扫描这个注解所在类对应的包路径下所有包含<code>@Meta</code>的类</li>
</ul>
<h4> c. MetaAutoConfigureRegistrar</h4>
<p>接下来进入我们的核心类，它主要继承自<code>ImportBeanDefinitionRegistrar</code>，bean定义注册器，其核心方法为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个参数，第一个顾名思义，注解元数据，多半是用来获取注解的属性；第二个bean定义注册器，我们在学习bean的动态注册时(详情参考: <a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a>) 知道可以用BeanDefinitionRegistry注册bean，因为我们这里的目标是注册所有带 <code>@Meta</code> 注解的类</p>
<p>自然而然的想法</p>
<ul>
<li>扫描所有的类，判断是否有<code>@Meta</code>注解，有则通过registry手动注册</li>
</ul>
<p>然而在实际动手之前，再稍微停一停；扫描所有类判断是否有某个注解，这个操作在spring中应该属于比较常见的case（why?），应该是有一些可供我们使用的辅助类</p>
<p>继续撸"致敬"的对象，<code>ServletComponentScanRegistrar</code>类主要是注册<code>servletComponentRegisteringPostProcessor</code>，所以我们再转移目标到后者的详情(下图来自<code>org.springframework.boot.web.servlet.ServletComponentRegisteringPostProcessor#createComponentProvider</code>)</p>
<figure><img src="/imgs/191213/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>到这里我们的思路又打开了，可以借助<code>ClassPathScanningCandidateComponentProvider</code>来实现bean注册</p>
<hr>
<p>上面的一段内容属于前戏，放在脑海里迅速的过一过就好了，接下来进入正文；</p>
<p>首先是创建一个<code>ClassPathScanningCandidateComponentProvider</code>的子类，注册一个<code>AnnotationTypeFilter</code>，确保过滤获取所有<code>@Meta</code>注解的类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是获取扫描的包路径了，通过解析前面定义的<code>MetaComponentScan</code>的属性来获取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以完整的MetaAutoConfigureRegistrar的实现就有了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 测试与小结</h2>
<p>上面实现现在看来非常简单了（两个注解定义，一个核心类，也复杂不到哪里去了）；接下来就需要验证这个是否生效了</p>
<h3> 1. case0 Meta注解类</h3>
<p>如果被spring识别为bean，则构造方法会被调用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. case1 Meat注解类，依赖Bean</h3>
<p>定义一个普通的bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个Meta装饰的类，依赖 NormalBean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. case2 bean 依赖 Meta注解类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 测试</h3>
<p>启动类，注意需要添加上我们自定义的<code>@MetaComponentScan</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出结果</p>
<figure><img src="/imgs/191213/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>本文主要介绍了如何通过<code>ImportBeanDefinitionRegistrar</code>来实现自定义的bean注册器的全过程，包括面向新手可以怎样通过"致敬"既有的代码逻辑，来"巧妙"的实现我们的目标</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/006-importbean" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/006-importbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191213/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.如何指定bean最先加载(应用篇)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/15.200317-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9Abean%E6%9C%80%E5%85%88%E5%8A%A0%E8%BD%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/15.200317-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9Abean%E6%9C%80%E5%85%88%E5%8A%A0%E8%BD%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.如何指定bean最先加载(应用篇)</source>
      <description>在日常的业务开发中，绝大多数我们都是不关注bean的加载顺序，然而如果在某些场景下，当我们希望某个bean优于其他的bean被实例化时，往往并没有我们想象中的那么简单</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <category>应用篇</category>
      <pubDate>Tue, 17 Mar 2020 16:32:10 GMT</pubDate>
      <content:encoded><![CDATA[<p>在日常的业务开发中，绝大多数我们都是不关注bean的加载顺序，然而如果在某些场景下，当我们希望某个bean优于其他的bean被实例化时，往往并没有我们想象中的那么简单</p>
<!-- more -->
<h2> I. 启动类指定方式</h2>
<p>在实际的SpringBoot开发中，我们知道都会有一个启动类，如果希望某个类被优先加载，一个成本最低的简单实现，就是在启动类里添加上依赖</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的构造方法，如果我们希望在应用启动之前，<code>demoBean</code>就已经被加载了，那就让Application强制依赖它，所以再Application的bean初始化之前，肯定会优先实例化<code>demoBean</code></p>
<p>相信上面这种写法，大家并不会陌生，特别是当我们应用启动之后，发现某个依赖的bean（一般来讲是第三方库提供的bean）还没有初始化导致npe时，用这种方法还是比较多的</p>
<p><strong>case1</strong></p>
<p>我们且不谈这种实现方式是否优雅，当我们希望<code>targetBean</code>在所有的bean实例化之前被实例时，上面这种写法是否一定会生效呢？</p>
<p><strong>case2</strong></p>
<p>中间件同学：吭哧吭哧的开发了一个🐂🍺jar包，只要接入了保证你的应用永远不会宕机（请无视夸张的言语）,唯一的要求是接入时，需要优先加载jar包里面的<code>firstBean</code>...</p>
<p>接入方：你的bean要求被首先加载这个得你自己保证啊，我写些if/else代码已经很辛苦了，哪有精力保证你的这个优先加载！！！你自己都没法保证，那我也没办法保证...</p>
<p>中间件同学：还能不能愉快的玩耍了....</p>
<h2> II. <code>InstantiationAwareBeanPostProcessorAdapter</code>方式</h2>
<blockquote>
<p>在看下文的实现之前，墙裂推荐先看一下博文: <a href="http://spring.hhui.top/spring-blog/2019/10/29/191029-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E4%B9%8B%E6%8C%87%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot基础系列】指定Bean初始化顺序的若干姿势</a></p>
</blockquote>
<p>接下来介绍另外一种使用姿势，借助<code>InstantiationAwareBeanPostProcessorAdapter</code>来实现在bean实例化之前优先加载目标bean</p>
<p><strong>声明</strong></p>
<ul>
<li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li>
<li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li>
<li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li>
</ul>
<h3> 1. 场景分析</h3>
<p>假设我们提供了一个配置读取的工具包，但是不同的应用可能对配置的存储有不同的要求，比如有的配置存在本地，有的存在db，有的通过http方式远程获取；而这些存储方式呢，通过<code>application.yml</code>配置文件中的配置参数<code>config.save.mode</code>来指定</p>
<p>这个工具包呢，会做一件事情，扫描应用程序的所有类，并注入配置信息，所以我们希望在应用程序启动之前，这个工具包就已经从数据源获取到了配置信息，而这又要求先获取应用到底是用的哪个数据源</p>
<p>简单来讲，就是希望在应用程序工作之前，<code>DatasourceLoader</code>这个bean已经被实例化了</p>
<p>-- 插播一句，上面这个case，正是我在筹备的<code>SpringBoot实战教程--从0到1创建一个高可用的配置中心</code>的具体应用场景</p>
<h3> 2. 常规流程</h3>
<p>新建一个SpringBoot项目工程，源码中springboot版本为<code>2.2.1.RELEASE</code></p>
<p>首先我们来定义这个目标bean: <code>DatasourceLoader</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这个工程主要是供第三方使用，所以按照SpringBoot的通常玩法，声明一个自动配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在资源目录下新建文件夹 <code>META-INF</code>，创建文件<code>spring.factories</code>，内容如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用方添加依赖，就完了？？？</p>
<p>上面这套流程，属于一般的工具包写法了，请注意，这种方式，一般情况下是应用程序内声明的bean加载完毕之后，才会加载第三方依赖包中声明的bean；也就是说通过上面的写法，<code>DatasourceLoader</code>并不会被优先加载，也达不到我们的目的（应用都开始服务了，结果所有的配置都是null)</p>
<h3> 3. 特殊写法</h3>
<p>接下来我们借助所有的bean在实例化之前，会优先检测是否存在<code>InstantiationAwareBeanPostProcessor</code>接口这个特点，来实现<code>DatasourceLoader</code>的优先加载</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现比较简单，借助<code>beanFactory#getBean</code>来手动触发bean的实例，通过实现<code>BeanFactoryAware</code>接口来获取<code>BeanFactory</code>，因为实现<code>InstantiationAwareBeanPostProcessor</code>接口的类会优先于Bean被实例，以此来间接的达到我们的目的</p>
<blockquote>
<p>关于上面这一套流程分析, 请关注微信公众号/个人博客站点，静待源码分析篇</p>
</blockquote>
<p>接下来的问题就是如何让它生效了，我们这里使用Import注解来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的注解中，导入上面的自动配置类，和<code>ClientBeanProcessor</code>，所以上一节中的<code>spring.factories</code>文件可以不需要哦</p>
<h3> 4. 测试</h3>
<p>上面的主要流程就完事了，接下来就需要进入测试，我们新建一个SpringBoot项目，添加依赖</p>
<p>先加一个demoBean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是启动类， <code>@EnableOrderClient</code>这个注解必须得有哦</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们启动之前，请猜测一下，<code>DemoBean</code>和<code>DatasourceLoader</code>这里这两个bean，谁会优先被实例化？</p>
<p>下面是输出结果</p>
<figure><img src="/imgs/200317/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的两个红框输出，可以知道我们的启动类指定方式依赖的bean，并不一定会最先被加载哦</p>
<h3> 5. 小结</h3>
<p>最后小结一下，本文提出了两种让bean优先加载的方式，一个是在启动类的构造方法中添加依赖，一个是借助<code>InstantiationAwareBeanPostProcessorAdapter</code>在bean实例化之前被创建的特点，结合<code>BeanFactory</code>来手动触发目标bean的创建</p>
<p>最后通过<code>@Import</code>注解让我们的<code>BeanPostProcessorAdapter</code>生效</p>
<p><strong>有知道其他方式的大佬，请不吝赐教啊</strong></p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：
<ul>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order/" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order/</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order-client" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order-client</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200317/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.实现一个自定义的@Autowired（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/16.210223-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-Autowired.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/16.210223-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-Autowired.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.实现一个自定义的@Autowired（应用篇）</source>
      <description>在Spring的生态中，借助@Autowired注解来实现依赖注入，可以说是非常普遍的事情了，如果让我们自定义一个注解，也实现类似的功能，那么我们可以怎么做呢? 本文介绍如何实现一个自定义的@Autowired，实现依赖服务注入 主要知识点: BeanPostProcessor 代理类创建</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <category>应用篇</category>
      <pubDate>Tue, 23 Feb 2021 19:40:27 GMT</pubDate>
      <content:encoded><![CDATA[<p>在Spring的生态中，借助<code>@Autowired</code>注解来实现依赖注入，可以说是非常普遍的事情了，如果让我们自定义一个注解，也实现类似的功能，那么我们可以怎么做呢?</p>
<p>本文介绍如何实现一个自定义的<code>@Autowired</code>，实现依赖服务注入</p>
<p>主要知识点:</p>
<ul>
<li><code>BeanPostProcessor</code></li>
<li>代理类创建</li>
</ul>
<!-- more -->
<h2> I. 项目环境</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实现姿势</h2>
<h3> 1. 代理封装类</h3>
<p>借助Spring的<code>Enhance</code>来实现代理类生成，比如一个基础的工具类如下，用于自定义注入的增强</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 自定义注解</h3>
<p>参照<code>@Autowired</code>的定义，实现一个自定义的注解（缩减版）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 自定义注入</h3>
<p>实现<code>BeanPostProcessor</code>，在bean初始化之后，扫描<code>field/method</code>，为了做一个区分，下面创建一个代理类，注入依赖</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 测试</h3>
<p>接下来验证一下自定义注入方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕之后，输出日志如</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/010-auto-inject" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/010-auto-inject</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210223/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>实战</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">实战</source>
      <description>通过实战带您更一步的理解Spring的基础知识点</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>通过实战带您更一步的理解Spring的基础知识点</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.日志管理之默认配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/01.180927-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/01.180927-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.日志管理之默认配置</source>
      <description>对于一个后端来说，日志是不可缺少的，这个东西，形象点就像剑客手中的剑，没有剑你就刷不了帅，砍不了人。所以就有必要好好的说道说道，这个日志文件的管理了。本篇博文将关注以下几点内容 日志级别选择 日志输出到文件 格式化输出 日志文件管理（自动删除，压缩归档等） 常用的logback-spring.xml配置</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>日志</category>
      <pubDate>Thu, 27 Sep 2018 10:05:24 GMT</pubDate>
      <content:encoded><![CDATA[<p>对于一个后端来说，日志是不可缺少的，这个东西，形象点就像剑客手中的剑，没有剑你就刷不了帅，砍不了人。所以就有必要好好的说道说道，这个日志文件的管理了。本篇博文将关注以下几点内容</p>
<ul>
<li>日志级别选择</li>
<li>日志输出到文件</li>
<li>格式化输出</li>
<li>日志文件管理（自动删除，压缩归档等）</li>
<li>常用的logback-spring.xml配置</li>
</ul>
<!-- more -->
<h2> I. 默认日志参数</h2>
<h3> 1. 基础项目搭建</h3>
<p>创建一个SpringBoot项目，根据官方文档的说明，默认选择的是Logback来记录日志；logback也是相对来说用的比较多的框架了，下文全都默认以logback作为日志输出框架</p>
<blockquote>
<p>By default, if you use the “Starters”, Logback is used for logging. Appropriate Logback routing is also included to ensure that dependent libraries that use Java Util Logging, Commons Logging, Log4J, or SLF4J all work correctly.</p>
</blockquote>
<p>完整的pom依赖如下，即不需要引入什么特别的依赖，基本上就是SpringBoot项目最根本的项目结构</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个简单的日志测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下控制台输出结果，info,warn,error可以正常输出且输出格式包含一些附加信息，System.out也可以正常输出，debug的日志没有</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置说明</h3>
<p>接下来在进入logback的配置文件之前，先看一下默认的配置有哪些，以及如何使用</p>
<h4> a. debug日志支持</h4>
<p>默认是不输出debug日志的，如果需要，则需要在配置文件中添加 <code>debug=true</code> 属性；同样可以设置<code>trace=true</code>，就可以看应用输出的trace日志</p>
<p>然而，即便开启了debug，上面测试中的debug日志也依然没有，那需要输出上面的debug日志，应该怎么设置？</p>
<h4> b. log levels</h4>
<p>上面的配置虽然在控制台打印了一些debug日志，但并没有打印我们业务代码中的debug日志，需要开启这个，需要如下设置</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个配置就是指定包下日志输出的等级，root表示默认的级别</p>
<p>如上配置后，再次执行上面的代码，输出结果如下</p>
<figure><img src="/imgs/180927/00.jpg" alt="log level测试" tabindex="0" loading="lazy"><figcaption>log level测试</figcaption></figure>
<h4> c. 输出格式</h4>
<p>默认的输出格式如前面的截图，如果希望更改下输出的日志格式，可以通过修改属性来完成，一个也实例如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次执行，输出样式如下</p>
<figure><img src="/imgs/180927/01.jpg" alt="输出格式" tabindex="0" loading="lazy"><figcaption>输出格式</figcaption></figure>
<p>至于这个属性值的构成原则，在后面说到<code>logback.xml</code>配置文件语法时，一并再说</p>
<p><strong>说明</strong></p>
<p>还有个参数可以设置文本的颜色，个人感觉实用性不是特别大，只贴下配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. 输出文件</h4>
<p>上面所有的日志都是输出到控制台，在实际的生成环境中，一般要求日志写到文件，可以方便随时进行查看，通过设置相关参数也可以很简单实现</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样执行前面的代码两次，输出如下, 两次的输出结果都可以在日志文件中查到，相比较于控制台而言，用于查历史日志就更加的方便了</p>
<figure><img src="/imgs/180927/02.jpg" alt="输出文件演示" tabindex="0" loading="lazy"><figcaption>输出文件演示</figcaption></figure>
<p>上图中，控制台的输出格式和日志文件的输出格式不一样，因为前面修改了控制台的输出样式；如果希望修改文件中的日志格式，也可以通过修改配置<code>logging.pattern.file</code>来实现</p>
<h4> e. logback.xml配置</h4>
<p>上面的配置虽然ok，但是对于Logback而言，还是有很多高级特性不太好配置，因此SpringBoot还是支持通过加载<code>logback-spring.xml</code>配置文件来定义日志相关的参数，只需要在资源文件目录下添加 <code>logback-spring.xml</code> 或者 <code>logging.config</code> 即可</p>
<h2> II. 其他</h2>
<h3> 相关文档</h3>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html" target="_blank" rel="noopener noreferrer">SpringBoot Logging</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>具体模块: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/003-log" target="_blank" rel="noopener noreferrer">spring-boot-demo#003-log</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180927/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.日志管理之logback配置文件</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/02.180929-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8Blogback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/02.180929-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8Blogback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.日志管理之logback配置文件</source>
      <description>SpringBoot默认选用logback进行日志管理，前一篇讲述了默认配置日志的参数，然而这些内容比较初级，并不一定能满足我们更加特殊的需求（比如输出到多个不同的配置文件，不同的包路劲选择不同的输出方式等） 所以本篇的内容，主要介绍logback.xml配置文件的语法，虽然与SpringBoot本身没有太多的关联性，但在SpringBoot项目中却非常实用</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>日志</category>
      <pubDate>Sat, 29 Sep 2018 22:07:22 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot默认选用logback进行日志管理，前一篇讲述了默认配置日志的参数，然而这些内容比较初级，并不一定能满足我们更加特殊的需求（比如输出到多个不同的配置文件，不同的包路劲选择不同的输出方式等）</p>
<p>所以本篇的内容，主要介绍logback.xml配置文件的语法，虽然与SpringBoot本身没有太多的关联性，但在SpringBoot项目中却非常实用</p>
<!-- more -->
<h2> I. logback配置</h2>
<p>也不针对语法进行逐一说明了，直接针对常见的xml配置文件进行分析，反正看完也会忘的，等到要用的时候，一般都是拷贝一个魔板，改改名啥的就over了</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. appender</h3>
<p>从前面的配置文件中，appender这个标签算是比较重要的，上面定义了两类，一个控制台输出，一个文件输出</p>
<h4> a. 控制台or文件的选择</h4>
<p>appender的class属性来选择</p>
<ul>
<li>控制台： <code>ch.qos.logback.core.ConsoleAppender</code></li>
<li>滚动时间窗口文件：<code>ch.qos.logback.core.rolling.RollingFileAppender</code></li>
</ul>
<h4> b. 输出格式</h4>
<p>以实例 <code>&lt;pattern&gt;%d [%t] %-5level %logger{36}.%M\(%file:%line\) - %msg%n&lt;/pattern&gt;</code> 进行说明</p>
<blockquote>
<p><a href="https://logback.qos.ch/manual/layouts.html" target="_blank" rel="noopener noreferrer">https://logback.qos.ch/manual/layouts.html</a></p>
</blockquote>
<ul>
<li>%m输出的信息,</li>
<li>%p日志级别,</li>
<li>%t线程名,</li>
<li>%d日期,</li>
<li>%c类的全名,</li>
<li>%i索引【从数字0开始递增】</li>
<li>%M方法名</li>
<li>%lines输出日志的行数</li>
<li>%F/%file源码文件名</li>
</ul>
<h4> c. 日志归档相关</h4>
<p>一般是每天归档一下日志文件，避免所有的日志都堆积到一个文件，当单文件特别大时，分析也不是一件容易的事情，常见的两个设置参数</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. logger</h3>
<p>另外一个标签就是logger了，name表示哪些包路径下的日志输出会匹配这个（或者logger直接使用了这个name，也会匹配他）</p>
<p>另外两个重要的属性，level表示输出日志的级别，挺实用的，可以根据实际场景设置某些日志输出，如框架层我只关系WARN级别日志；我自己的业务可能就像关注INFO的日志了</p>
<p>additivity 这个属性，很容易不设置，如果不设置，那么当一个日志输出，有多个logger匹配时，这个日志就会被输出多次，建议设置为false</p>
<h2> II. 使用</h2>
<p>根据前面配置的博文说明，logback.xml配置文件，推荐的用法是</p>
<ul>
<li>命名为 <code>logback-spring.xml</code></li>
<li>放在资源文件的根目录，或者config目录下</li>
</ul>
<p>一般输出日志的用法，最常见的两种方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二中就是使用lombok的 <code>@Slf4j</code> 注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
<p>推荐相关博文阅读</p>
<ul>
<li><a href="https://my.oschina.net/u/566591/blog/651866" target="_blank" rel="noopener noreferrer">Logback 简明使用手册</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/06/23/180623-SpringBoot%E4%B9%8Blogback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener noreferrer">180623-SpringBoot之logback配置文件</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180929/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>日志</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E6%97%A5%E5%BF%97/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">日志</source>
      <description>所有开发者的好基友，一个成熟的系统离不开日志系统的建设，这里将介绍下如何配置日志、使用日志</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>所有开发者的好基友，一个成熟的系统离不开日志系统的建设，这里将介绍下如何配置日志、使用日志</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.如何读取配置信息</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/01.180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/01.180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.如何读取配置信息</source>
      <description>SpringBoot极大的减少了配置，开一个新项目时，完全可以做到什么配置都不加，就可以直接跑，简单方便的同时，就带来了一个问题 怎么知道这些默认的配置是什么？ 如果要修改默认配置怎么办？ 如何添加自定义的配置？ 如何读取这些配置？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Wed, 19 Sep 2018 17:28:47 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot极大的减少了配置，开一个新项目时，完全可以做到什么配置都不加，就可以直接跑，简单方便的同时，就带来了一个问题</p>
<ul>
<li>怎么知道这些默认的配置是什么？</li>
<li>如果要修改默认配置怎么办？</li>
<li>如何添加自定义的配置？</li>
<li>如何读取这些配置？</li>
</ul>
<!-- more -->
<h2> I. 配置信息读取</h2>
<p>首先创建一个SpringBoot项目，这一块就直接省略掉，下面直奔主题，如何获取配置</p>
<h3> 1. 配置文件</h3>
<p>默认读取配置文件 <code>application.properties</code> 或者 <code>application.yml</code> 中的配置信息，两种不同的文件类型，对应的内部配置方式也不太一样</p>
<p><strong>配置文件位置</strong></p>
<p>一般来说，默认的配置文件<code>application.properties</code>或者<code>application.yml</code>文件放在目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>properties格式</strong></p>
<p>properties配置文件属于比较常见的一种了，定义也比较简单，形如 <code>key=value</code>，一个实例如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>yml格式</strong></p>
<p>yml格式的配置文件是以缩进来表示分层，kv之间用冒号来分割，形如</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式对比</strong></p>
<p>两种不同格式的配置文件，有啥区别？</p>
<p>单纯从使用来讲，并没有特别的不同，而且我个人也一直这么认为的，直到遇到了一个诡异的问题，后面给出</p>
<h3> 2. 配置读取</h3>
<p>程序启动之后，如何获取配置文件<code>application.yml</code>中的配置信息呢？在实际的使用中，最常见的有三种姿势</p>
<h4> a. Environment 读取</h4>
<p>所有的配置信息，都会加载到Environment实体中，因此我们可以通过这个对象来获取系统的配置，通过这种方式不仅可以获取<code>application.yml</code>配置信息，还可以获取更多的系统信息</p>
<p>使用姿势如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. @Value 注解方式</h4>
<p><code>@Value</code>注解可以将配置信息注入到Bean的属性，也是比较常见的使用方式，但有几点需要额外注意</p>
<ul>
<li>如果配置信息不存在会怎样？</li>
<li>配置冲突了会怎样（即多个配置文件中有同一个key时）？</li>
</ul>
<p>使用方式如下，主要是通过 <code>${}</code>，大括号内为配置的Key；如果配置不存在时，给一个默认值时，可以用冒号分割，后面为具体的值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 对象映射方式</h4>
<p>上面的两种方式对于某几个特别的配置来说，一个一个的写还好，如果配置特别多时，每一个都去这么玩，估计会敲的键盘原地爆炸了，当然这么不友好的事情，怎么能忍！因此就有了下面这种使用方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的写法，含义是将配置文件中配置 <code>app.proper.key</code>, <code>app.proper.id</code>, <code>app.proper.value</code>三个配置的值，赋值给上面的bean</p>
<ul>
<li>即通过注解<code>ConfigurationProperties</code>来制定配置的前缀</li>
<li>通过Bean的属性名，补上前缀，来完整定位配置信息的Key，并获取Value赋值给这个Bean</li>
</ul>
<p>上面这个过程，配置的注入，从有限的经验来看，多半是反射来实现的，所以这个Bean属性的Getter/Setter方法得加一下，上面借助了Lombok来实现，标一个<code>@Component</code>表示这是个Bean，托付给Spring的ApplicationConttext来管理</p>
<h3> 3. 读取测试</h3>
<p>配置文件<code>application.properties</code>信息如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个DemoController来返回读取的配置值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问后输出如下</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的<code>not</code> 和 <code>name</code>返回</p>
<ul>
<li>属性<code>notExists</code>对应的配置信息，在配置文件中没有定义，所以返回默认的data</li>
<li>属性<code>name</code>对应的配置信息 <code>user.name</code> 在<code>application.properties</code>文件中是<code>一灰灰Blog</code>，但是返回了user（测试环境为mac，mac系统的用户名为user，为啥叫user？因为某某人...）
<ul>
<li>造成这个的根源是application.properties的配置被更高优先级的系统配置覆盖了</li>
</ul>
</li>
</ul>
<h3> 4. 小结</h3>
<p>前面主要介绍了常见的三种获取配置信息的方式，但遗留了几个问题</p>
<ul>
<li>配置信息读取的优先级问题（为什么 <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a> 配置被覆盖？）</li>
<li>如何读取其他配置文件如 <code>xxx.properties</code> 的配置信息（能读取么？）</li>
<li>配置文件中的 ${random.int} 是什么鬼？</li>
<li>SpringBoot的默认配置是些啥</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>modal： <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties" target="_blank" rel="noopener noreferrer">spring-boot-demo#000-properties</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180919/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.多环境配置信息</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/02.180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/02.180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.多环境配置信息</source>
      <description>前面一篇主要介绍的是如何获取配置信息，接下来则是另外一个非常非常基础和必要的知识点了，应用如何根据不同的环境来选择对应的配置，即配置的多环境选择问题</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Thu, 20 Sep 2018 17:57:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇主要介绍的是如何获取配置信息，接下来则是另外一个非常非常基础和必要的知识点了，应用如何根据不同的环境来选择对应的配置，即配置的多环境选择问题</p>
<!-- more -->
<h2> I. 多环境配置</h2>
<p>配置区分环境，最直观的如测试环境和生产环境的DB不同，测试环境的应用要求连接测试DB；生成环境的应用要求连生成DB；对于应用本身来说，业务代码啥的都是一样，无非就是DB的配置不同，如果在代码中写死环境判断，然后进行选择配置话，就不太优雅了；</p>
<p>SpringBoot本身就支持多环境配置文件，应用的配置，除了 <code>application.yml</code> 文件之外，还会有环境相关的配置，如下一个实例</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 多环境选择</h3>
<h4> a. 命令规则</h4>
<p>配置文件，一般要求是以 <code>application</code> 开头，可以是yml文件也可以是properties文件</p>
<h4> b. 配置选择</h4>
<p>如何确定哪个配置配置文件（application-dev.yml 与 application-pro.yml）生效呢？</p>
<ul>
<li>通过配置信息 <code>spring.profile.active</code> 来指定需要加载的配置文件</li>
</ul>
<p>通常这个配置信息会放在 <code>applicatin.yml</code> 文件中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个表示，当前的配置信息，会从 <code>application.yml</code> 和 <code>application-dev.yml</code> 文件中获取；且<code>-dev</code>文件中定义的配置信息，会覆盖前面的配置信息</p>
<p><strong>注意</strong></p>
<ul>
<li>上面这个配置的value，可以指定多个配置文件，用英文逗号分隔</li>
<li>其中最右边的优先级最高，覆盖左边配置文件中重名的配置信息</li>
</ul>
<h4> c. 实例演示</h4>
<p>配置文件内容如下</p>
<p><strong>application.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-dev.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-pro.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-biz.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过前面的规则进行分析，当前选中生效的配置文件为</p>
<ul>
<li>application.yml, application-dev.yml, application-biz.yml</li>
<li>优先级为：biz文件的配置覆盖dev文件，dev文件的覆盖<code>application</code>的配置</li>
</ul>
<p>代码验证如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 优先级问题</h3>
<p>上面虽然看是实现了多环境的配置问题，但看完之后有一个明显的疑问，选择环境的配置信息写死在<code>application.yml</code>文件中，难道说部署到测试和生产环境时，还得记得手动改这个配置的值么？</p>
<p>如果是这样的话，也太容易出问题了吧。。。</p>
<p>那么如何解决这个问题呢，常见的一种方式是通过启动脚本，传入当前环境的参数，来覆盖选中的环境</p>
<h4> a. 配置文件优先级</h4>
<p>默认的配置文件是放在 <code>src/main/resources</code> 目录下，当然也是可以放其他位置的</p>
<ul>
<li>外置，在相对于应用程序运行目录的 <code>/config</code> 子目录中</li>
<li>外置，在应用程序运行的目录中</li>
<li>内置，放在config包下(即 src/main/resources/config)目录下</li>
<li>内置，放在classpath根目录下（即默认的 src/main/resources/目录下)</li>
</ul>
<p>上面的优先级是从高到低来的，即外置的改与内置的；config下面的高于根目录下的</p>
<p>以内置的两个进行对比，实测结果如下</p>
<figure><img src="/imgs/180920/00.jpg" alt="优先级对比测试" tabindex="0" loading="lazy"><figcaption>优先级对比测试</figcaption></figure>
<h4> b. 配置信息来源</h4>
<p>前面一篇中，遗留了一个问题，就是在配置文件中配置了属性 <code>user.name = 一灰灰blog</code>, 但是实际取出的却是 <code>user</code> (我个人的电脑用户名)，也就是说，Environment中读取的配置信息，不仅仅是从配置文件中获取，还要其他的一些配置信息来源</p>
<p>根据优先级对属性来源进行排序，如下</p>
<ul>
<li>根目录下的开发工具全局设置属性(当开发工具激活时为~/.spring-boot-devtools.properties)。</li>
<li>测试中的@TestPropertySource注解。</li>
<li>测试中的@SpringBootTest#properties注解特性。</li>
<li>命令行参数</li>
<li>SPRING_APPLICATION_JSON中的属性(环境变量或系统属性中的内联JSON嵌入)。</li>
<li>ServletConfig初始化参数。</li>
<li>ServletContext初始化参数。</li>
<li>java:comp/env里的JNDI属性</li>
<li>JVM系统属性</li>
<li>操作系统环境变量</li>
<li>随机生成的带random.* 前缀的属性（在设置其他属性时，可以应用他们，比如${random.long}）</li>
<li>应用程序以外的application.properties或者appliaction.yml文件</li>
<li>打包在应用程序内的application.properties或者appliaction.yml文件</li>
<li>通过@PropertySource标注的属性源</li>
<li>默认属性(通过SpringApplication.setDefaultProperties指定).</li>
</ul>
<h3> 3. 环境选择的几种方式</h3>
<p>看了上面的配置信息来源，我们可以如何优雅的实现不同环境选择不同的配置文件呢？有下面两个容易想到和实现的方式了</p>
<ul>
<li>命令行参数</li>
<li>应用程序外的配置文件</li>
</ul>
<h4> a. 命令行参数方式</h4>
<p>这种实现思路就是在启动脚本中，传入当前环境，然后覆盖掉属性 <code>--spring.profiles.active</code>，对业务来说，就不需要做任何的改动了，只要启动脚本本身区分环境即可，唯一的要求就是遵循统一的规范，一个简单的实现如下</p>
<p>假定命令行的第一个参数就是环境，取出这个参数，传入即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测结果，注意下面红框内的pro，覆盖了配置文件中的dev</p>
<figure><img src="/imgs/180920/01.jpg" alt="配置覆盖测试" tabindex="0" loading="lazy"><figcaption>配置覆盖测试</figcaption></figure>
<p><strong>说明</strong></p>
<p>当然可以直接传入完整的命令行参数<code>--spring.profiles.active=pro,biz</code>，这样代码内部就不需要进行特殊处理</p>
<h4> b. 外置配置文件方式</h4>
<p>当程序以独立的jar运行时，我个人的感觉是外置的配置文件是优于内置的配置文件的；因为修改配置的话，不需要重新打包部署，直接改即可</p>
<p>这种实现方式也没啥好多说的，相当于把配置文件拉出来放在外面而已，再根据环境写具体的<code>spring.profiles.active</code>的值</p>
<h2> II. 小结</h2>
<ol>
<li>SpringBoot是支持多环境的配置，通过配置属性 <code>spring.profiles.active</code> 来指定</li>
<li><code>spring.profiles.active</code>参数指定多个配置文件时，右边的优于左边的</li>
<li>应用外的配置文件优先于应用内，config目录下的优先于根目录下的</li>
<li>配置参数来源及优先级可以参看前文: <a href="#b.-%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%9D%A5%E6%BA%90">配置信息来源</a></li>
<li>命令行参数传入时，请注意写法形同 <code>--key=value</code></li>
</ol>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>modal： <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties" target="_blank" rel="noopener noreferrer">spring-boot-demo#001-properties</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180920/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.自定义配置指定与配置内引用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/03.180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/03.180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.自定义配置指定与配置内引用</source>
      <description>前面两篇文章，分别介绍了如何获取配置信息，区分多环境的配置支持，配置信息的优先级问题，那么掌握这些是否就足够了呢？ 如何获取指定文件（即非application-xxx.properties）中的配置信息呢？ 配置文件中依赖其他配置文件的参数如何表示？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Fri, 21 Sep 2018 18:02:12 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面两篇文章，分别介绍了如何获取配置信息，区分多环境的配置支持，配置信息的优先级问题，那么掌握这些是否就足够了呢？</p>
<ul>
<li>如何获取指定文件（即非<code>application-xxx.properties</code>）中的配置信息呢？</li>
<li>配置文件中依赖其他配置文件的参数如何表示？</li>
</ul>
<!-- more -->
<h2> I. 加载自定义配置文件</h2>
<p>前面在使用多环境的配置时，通过设置 <code>spring.profiles.active</code> 来选择加载具体的配置文件，如果没有精神洁癖的话，就把自定义的配置文件加上<code>application-</code>前缀，然后用这种方式来加载，当然是可行的</p>
<p>除此之外呢?</p>
<h3> 1. <code>PropertySource</code>注解</h3>
<p>这个注解可以指定你想加载的配置文件，然后读取其中的配置信息, 使用姿势也相对简单</p>
<p>如在根目录下有配置文件 <code>biz.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的加载配置的bean为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li><code>@PropertySource({"classpath:biz.properties"})</code> : 从根目录下，加载配置文件biz.properties</li>
<li><code>@ConfigurationProperties(prefix = "biz")</code>: 获取配置文件中，前缀为biz的配置</li>
</ul>
<p>测试相关就不写了，有兴趣的直接自己尝试即可</p>
<h3> 2. <code>PropertySource</code> 注解不生效问题</h3>
<p>接下来需要重点说一下的是，在我自己的测试中，最开始我的配置文件都是yml格式，然后发现上面的配置始终不生效，也不知道啥原因；然后把配置文件换成properties文件之后，就可以了；</p>
<p>至于为什么会有这个问题，先留着，后续有时间深入研究一下</p>
<h2> II. 配置内引用</h2>
<p>前面的配置中，使用<code>${random.int}</code>这种东西，啥意思？</p>
<h3> 1. random随机数</h3>
<p>在配置文件中，支持通过 ${random} 来生成一些随机值</p>
<p>常见的几种用法如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置引用</h3>
<p>在配置中，一个参数需要引用另一个配置参数，可以怎么处理？</p>
<ul>
<li>使用 <code>${xxx}</code> 来表示引用配置 xxx的值</li>
</ul>
<p>如</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>modal： <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties" target="_blank" rel="noopener noreferrer">spring-boot-demo#000-properties</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180921/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.配置刷新</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/04.180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/04.180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.配置刷新</source>
      <description>配置的刷新，从第一篇就提出了这个问题，但是一直都没有说到，那么配置加载完毕之后能否在主动刷新呢? 如果对SpringCloud有了解的话，会直到有个配置中心的微服务，专门就是来做配置远程拉取，当然也支持刷新了，这是否意味着可以支持刷新呢，如果支持该怎么做?</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Sat, 22 Sep 2018 19:17:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>配置的刷新，从第一篇就提出了这个问题，但是一直都没有说到，那么配置加载完毕之后能否在主动刷新呢?</p>
<p>如果对SpringCloud有了解的话，会直到有个配置中心的微服务，专门就是来做配置远程拉取，当然也支持刷新了，这是否意味着可以支持刷新呢，如果支持该怎么做?</p>
<!-- more -->
<h2> I. 配置动态刷新</h2>
<p>本篇将介绍并演示如何实现配置信息的刷新，但不会涉及到底层的实现原理，想要探究里面的神奇，可以网上google一下，或者期待后续的源码分析篇</p>
<h3> 1. ContextReferer</h3>
<p>我们这里主要借助这个类来实现配置刷新，至于从哪里捞出来的这个东西，从Spring-Cloud-Config出发，看了下它怎么玩的，然后依葫芦画瓢</p>
<p>这个类全路径为 <code>org.springframework.cloud.context.refresh.ContextRefresher</code>，因此你的SpringBoot项目需要做一点修改</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就简单了，直接调用这个类的<code>refresh()</code>方法就可以了，just so easy~</p>
<h3> 2. 代码演示</h3>
<p>配置文件: application.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取配置的bean，演示了两种获取方式，分别如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启刷新的<code>@Value</code>注解方式，注意下面的<code>@RefreshScoe</code>注解，这个必须有，负责更新后的配置不会同步</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试<code>Controller</code>如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实例演示</h3>
<p>启动上面的应用，然后开启愉快的测试，调用refresh接口，发现每次的返回都不一样（因为配置文件使用了random随机生成），但是访问show接口时，每次返回的都是一样的，也就是说refresh接口中确实实现了配置的刷新</p>
<figure><img src="/imgs/180922/00.gif" alt="实例演示" tabindex="0" loading="lazy"><figcaption>实例演示</figcaption></figure>
<p><strong>说明</strong></p>
<ul>
<li>使用<code>ConfigurationProperties</code>方式获取注解时，自动支持刷新配置</li>
<li>使用<code>@Value</code>注解的方式，需要开启<code>@RefreshScope</code>注解（上面没有演示不开启这个注解的情况, 建议有兴趣的可以自己尝试一下）</li>
</ul>
<h2> II. 配置变更监听</h2>
<p>既然配置能刷新，那么如果我希望获取配置变更的事件，然后做一些其他的事情，是否ok呢？</p>
<p>其实进入 <code>ContextRefresher</code> 的源码，看下refresh接口，就很明确了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 配置变更监听</h3>
<p>从上面的源码中，借助spring的事件通知机制，很简单就可以知道该怎么做了，来一个简单的demo，这里顺带测试下上面漏掉的不刷新的场景</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接将Listener写在Controller类内部... 原则上不推荐上面的写法</p>
<h3> 2. 实测</h3>
<p>依然来个实测，主要注意下控制台的输出即可</p>
<figure><img src="/imgs/180922/01.gif" alt="配置刷新事件监听" tabindex="0" loading="lazy"><figcaption>配置刷新事件监听</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>modal： <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties" target="_blank" rel="noopener noreferrer">spring-boot-demo#002-properties</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180922/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.默认配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/05.180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/05.180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.默认配置</source>
      <description>前面关于配置信息的博文包括了如何读取配置信息的值，刷新配置信息，多环境的配置选择，加载自定义的配置信息，第一篇博文开头提出的几个问题目前还剩下一个，默认的配置有哪些，如果需要修改怎么做</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Tue, 25 Sep 2018 14:12:11 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面关于配置信息的博文包括了如何读取配置信息的值，刷新配置信息，多环境的配置选择，加载自定义的配置信息，第一篇博文开头提出的几个问题目前还剩下一个，默认的配置有哪些，如果需要修改怎么做</p>
<!-- more -->
<h2> I. 默认配置信息</h2>
<p>我们创建一个新的SpringBoot项目之后，不加任何配置，引入几个Starter就可以跑起来，一个常见的疑问就是当引入<code>spring-boot-starter-web</code>来启动web服务时，默认开启的端口号是什么？怎么改？</p>
<h3> 1. 默认的配置文件</h3>
<p>下面贴出的配置，来源于: <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener noreferrer">Appendix A. Common application properties</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的内容比较多了，后面说到相应的模块时，再相信说明每个配置的具体含义，以及如何修改，下面以redis的连接为例子，看一下默认配置如何用，以及如何修改</p>
<h3> 2. Redis配置相关</h3>
<p>完整的redis默认配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抓几个重点配置，<code>host</code>, <code>password</code>, <code>port</code>，这三个是最基本的配置了，默认的配置下，使用Redis的姿势可以如下</p>
<h4> a. 添加依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 开始使用</h4>
<p>基于默认的配置时，非常简单的一点是你可以直接注入系统Bean（即根据默认的配置会创建一个bean对象出来），所以redis的使用就很简单了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180925/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.实现一个自定义配置加载器（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/06.200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/06.200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.实现一个自定义配置加载器（应用篇）</source>
      <description>Spring中提供了@Value注解，用来绑定配置，可以实现从配置文件中，读取对应的配置并赋值给成员变量；某些时候，我们的配置可能并不是在配置文件中，如存在db/redis/其他文件/第三方配置服务，本文将手把手教你实现一个自定义的配置加载器，并支持@Value的使用姿势</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <category>应用篇</category>
      <pubDate>Thu, 07 May 2020 08:16:08 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring中提供了<code>@Value</code>注解，用来绑定配置，可以实现从配置文件中，读取对应的配置并赋值给成员变量；某些时候，我们的配置可能并不是在配置文件中，如存在db/redis/其他文件/第三方配置服务，本文将手把手教你实现一个自定义的配置加载器，并支持<code>@Value</code>的使用姿势</p>
<!-- more -->
<h2> I. 环境 &amp; 方案设计</h2>
<h3> 1. 环境</h3>
<ul>
<li>SpringBoot <code>2.2.1.RELEASE</code></li>
<li>IDEA + JDK8</li>
</ul>
<h3> 2. 方案设计</h3>
<p>自定义的配置加载，有两个核心的角色</p>
<ul>
<li>配置容器 <code>MetaValHolder</code>：与具体的配置打交道并提供配置</li>
<li>配置绑定 <code>@MetaVal</code>：类似<code>@Value</code>注解，用于绑定类属性与具体的配置，并实现配置初始化与配置变更时的刷新</li>
</ul>
<p>上面<code>@MetaVal</code>提到了两点，一个是初始化，一个是配置的刷新，接下来可以看一下如何支持这两点</p>
<h4> a. 初始化</h4>
<p>初始化的前提是需要获取到所有修饰有这个注解的成员，然后借助<code>MetaValHolder</code>来获取对应的配置，并初始化</p>
<p>为了实现上面这一点，最好的切入点是在Bean对象创建之后，获取bean的所有属性，查看是否标有这个注解，可以借助<code>InstantiationAwareBeanPostProcessorAdapter</code>来实现</p>
<h4> b. 刷新</h4>
<p>当配置发生变更时，我们也希望绑定的属性也会随之改变，因此我们需要保存<code>配置</code>与<code>bean属性</code>之间的绑定关系</p>
<p><code>配置变更</code> 与 <code>bean属性的刷新</code> 这两个操作，我们可以借助Spring的事件机制来解耦，当配置变更时，抛出一个<code>MetaChangeEvent</code>事件，我们默认提供一个事件处理器，用于更新通过<code>@MetaVal</code>注解绑定的bean属性</p>
<p><strong>使用事件除了解耦之外，另一个好处是更加灵活，如支持用户对配置使用的扩展</strong></p>
<h2> II. 实现</h2>
<h3> 1. MetaVal注解</h3>
<p>提供配置与bean属性的绑定关系，我们这里仅提供一个根据配置名获取配置的基础功能，有兴趣的小伙伴可以自行扩展支持SPEL</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的实现，除了value之外，还有一个parser，因为我们的配置value可能是String，当然也可能是其他的基本类型如int，boolean；所以提供了一个基本的类型转换器</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. MetaValHolder</h3>
<p>提供配置的核心类，我们这里只定义了一个接口，具体的配置获取与业务需求相关</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了支持配置刷新，我们提供一个基于Spring事件通知机制的抽象类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. <code>MetaValueRegister</code> 配置绑定与初始化</h3>
<p>这个类，主要提供扫描所有的bean，并获取到<code>@MetaVal</code>修饰的属性，并初始化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，上面核心点在<code>metaContainer.addInvokeCell(metaVal, bean, field);</code>这一行</p>
<h3> 4. MetaContainer</h3>
<p>配置容器，保存配置与field映射关系，提供配置的基本操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. Event/Listener</h3>
<p>接下来就是事件通知机制的支持了</p>
<p><strong>MetaChangeEvent配置变更事件，提供基本的三个信息，配置key，原value，新value</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MetaChangeListener事件处理器，刷新@MetaVal绑定的配置</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. bean配置</h3>
<p>上面五步，一个自定义的配置加载器基本上就完成了，剩下的就是bean的声明</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以二方工具包方式提供外部使用，所以需要在资源目录下，新建文件<code>META-INF/spring.factories</code>（常规套路了）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 6. 测试</h3>
<p>上面完成基本功能，接下来进入测试环节，自定义一个配置加载</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个使用<code>MetaVal</code>的demoBean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的REST服务，用于查看/更新配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动图演示配置获取和刷新过程</p>
<figure><img src="/imgs/200507/00.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>配置刷新时，会有日志输出，如下</p>
<figure><img src="/imgs/200507/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码:
<ul>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/002-dynamic-config" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/002-dynamic-config</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/002-dynamic-config-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/002-dynamic-config-demo</a></li>
</ul>
</li>
</ul>
<p><strong>推荐博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/25/191225-SpringBoot-%E5%BA%94%E7%94%A8%E7%AF%87-%E5%AE%9E%E7%8E%B0%E5%90%8E%E7%AB%AF%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81/" target="_blank" rel="noopener noreferrer">【WEB系列】实现后端的接口版本支持（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/02/200402-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BE%92%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E5%B7%A5%E7%A8%8B/" target="_blank" rel="noopener noreferrer">【WEB系列】徒手撸一个扫码登录示例工程（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/13/190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【基础系列】AOP实现一个日志插件（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之注销与动态注册实现服务mock（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之注销与动态注册实现服务mock（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之注销与动态注册实现服务mock（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之注销与动态注册实现服务mock（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/12/200412-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个简单的分布式定时任务(应用篇)</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200507/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>7.PropertySource加载Yaml配置文件实例演示</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/07.201226-SpringBoot%E7%B3%BB%E5%88%97PropertySource%E5%8A%A0%E8%BD%BDYaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/07.201226-SpringBoot%E7%B3%BB%E5%88%97PropertySource%E5%8A%A0%E8%BD%BDYaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.PropertySource加载Yaml配置文件实例演示</source>
      <description>在之前有介绍过借助注解@PropertySource来引入自定义的配置文件，在当时遇到抛出了一个问题，通过这个注解可以正确获取到.properties文件的配置信息，但是yaml文件却读取不到，最近又碰到这个问题，正好把之前挖的坑填上；本文将主要定位一下，为啥yml文件读取不了，又可以如何处理 如对之前博文有兴趣的小伙伴，可以查看: 180921-SpringBoot基础篇配置信息之自定义配置指定与配置内引用</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Sat, 26 Dec 2020 10:38:40 GMT</pubDate>
      <content:encoded><![CDATA[<p>在之前有介绍过借助注解<code>@PropertySource</code>来引入自定义的配置文件，在当时遇到抛出了一个问题，通过这个注解可以正确获取到<code>.properties</code>文件的配置信息，但是<code>yaml</code>文件却读取不到，最近又碰到这个问题，正好把之前挖的坑填上；本文将主要定位一下，为啥yml文件读取不了，又可以如何处理</p>
<p>如对之前博文有兴趣的小伙伴，可以查看: <a href="https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/" target="_blank" rel="noopener noreferrer">180921-SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 基本配置</h3>
<p>本文后续的源码定位以及实例演示都是基于<code>SpringBoot 2.2.1.RELEASE</code>进行，如需复现本文中的case，请确保环境一致</p>
<ul>
<li>IDEA</li>
<li>MAVEN</li>
<li>SpringBoot 2.2.1.RELEASE</li>
<li>JDK1.8</li>
</ul>
<h3> 2. 实例项目</h3>
<p>创建一个SpringBoot项目，用于后续的演示，首先创建一个配置文件<code>biz.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来定义对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后补上SpringBoot项目不可获取的启动类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. PropertySource原理分析</h2>
<p>想要定位为啥<code>@PropertySource</code>注解只会获取到<code>properties</code>文件的配置，而不能获取<code>yaml</code>文件配置信息，最直接的办法当然是直接撸源码（实际上最简单的办法直接借助搜索引擎，看一下有没有哪位大佬有过相关分享，如果不是为了写本文，我可是完全没想开撸，毕竟从提出这个问题到现在回复，也过了两年多了😭...）</p>
<h3> 1. 源码定位</h3>
<p>那么这个源码可以怎么定位分析呢，先直接进入这个注解瞅一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的特意留出来的<code>PropertySourceFactory</code>, 从命名上来看，大致就能感觉这个工厂类与属性有关了，主要就是为了创建<code>PropertySource</code>对象</p>
<p>它就比较有意思了，如果没有猜错的话，配置文件加载到Spring容器之后，多半就会与<code>PropertySource</code>关联起来了（所以说好的命名可以省很多注释说明）</p>
<p>接下来看一下这个工厂类的默认实现<code>DefaultPropertySourceFactory</code>，源码很简单</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们打个断点，确认一下会发生什么神器的事情</p>
<figure><img src="/imgs/201226/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的截图可以看到，这个<code>EncodedResource</code>包含了我们指定的配置文件，直接单步进去，可以看到执行的时候下面这个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，核心代码不是<code>super()</code>这个构造方法，而是传参的<code>PropertiesLoaderUtils.loadProperties(resource)</code></p>
<p>上面这一行调用，就是实现具体的从配置文件中获取配置信息</p>
<p>下面是具体的实现（摘抄有用的部分逻辑）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置信息的读取，最终依靠的就是<code>org.springframework.util.DefaultPropertiesPersister#load()</code>，到这里我们基本上就找到了从配置文件中读取配置的“幕后黑手”，直接看一下它的实现逻辑就能知道为啥不支持yaml了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接进入看到源码，非常简单直观的实现方式了，直接使用jdk的<code>java.util.Properties#load(java.io.InputStream)</code>来读取配置文件，所以真相已经大白了（原来都是jdk的锅😂）</p>
<h3> 2. yaml文件支持</h3>
<p>经过上面的一番操作，我们知道<code>@ConfigurationProperties</code>加载配置文件，主要是借助jdk的<code>Properties#load</code>方法来读取配置文件到容器内，那么若我们希望加载yaml配置文件，可以怎么搞呢？</p>
<p>因为SpringBoot是支持yaml配置文件的读取的，所以我们完全可以扩展一下，借助SpringBoot的工具类来实现配置文件加载，所以可以实现自定义的<code>PropertySourceFactory</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再我们希望使用的地方，利用自定义的工厂类替换默认的即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置文件如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后实例验证一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/201226/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 小结</h3>
<p>当我们希望加载自定义的配置文件时，<code>@PropertySource</code>注解是一个非常好的选择（当然也可以借助多环境配置方案，指定<code>spring.profiles.active</code>的值，实现加载前缀为<code>application-</code>的配置文件，有兴趣的小伙伴可以查看我之前的博文）</p>
<p>请注意<code>@PropertySource</code>引入的配置文件不支持<code>yaml</code>文件，如需支持，可以参考本文中的实现方式，自定义一个yaml文件的<code>PropertySourceFactory</code></p>
<p>最后提一句，遇到问题千万不要放过，尽量迅速解决，不要留待以后，不然拖延症发作的话，这个时间可能就一直悬着了...</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>项目源码</strong></p>
<ul>
<li>工程: <a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties</a></li>
</ul>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之默认配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之配置刷新</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之如何读取配置信息</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201226/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>8.ConfigurationProperties配置绑定中那些你不知道的事情</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/08.210117-SpringBoot%E7%B3%BB%E5%88%97ConfigurationProperties%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E4%B8%AD%E9%82%A3%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/08.210117-SpringBoot%E7%B3%BB%E5%88%97ConfigurationProperties%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E4%B8%AD%E9%82%A3%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.ConfigurationProperties配置绑定中那些你不知道的事情</source>
      <description>在SpringBoot项目中，获取配置属性可以说是一个非常简单的事情，将配置写在aplication.yml文件之后，我们就可以直接通过@Value注解来绑定并获取；此外我们也可以将一个结构化的配置，借助@ConfigurationPorperties绑定到一个POJO，然后供项目使用，那么在使用它的时候，不知是否有想过 @ConfigurationPorperties修饰的类如何生效 配置参数与定义的POJO类型不匹配时会怎样 配置参数的必要性校验可以怎么支持 自定义的配置参数，idea中如何自动补全 已废弃的参数定义，怎样友好的提示使用方 List/Map格式的参数，怎么使用 自定义参数解析规则如何支持 如果上面这些都已经了然于心，那么本文的帮助将不会特别大；如果对此有所疑问，接下来将逐一进行解惑</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Sun, 17 Jan 2021 19:39:51 GMT</pubDate>
      <content:encoded><![CDATA[<p>在SpringBoot项目中，获取配置属性可以说是一个非常简单的事情，将配置写在<code>aplication.yml</code>文件之后，我们就可以直接通过<code>@Value</code>注解来绑定并获取；此外我们也可以将一个结构化的配置，借助<code>@ConfigurationPorperties</code>绑定到一个POJO，然后供项目使用，那么在使用它的时候，不知是否有想过</p>
<ul>
<li><code>@ConfigurationPorperties</code>修饰的类如何生效</li>
<li>配置参数与定义的POJO类型不匹配时会怎样</li>
<li>配置参数的必要性校验可以怎么支持</li>
<li>自定义的配置参数，idea中如何自动补全</li>
<li>已废弃的参数定义，怎样友好的提示使用方</li>
<li>List/Map格式的参数，怎么使用</li>
<li>自定义参数解析规则如何支持</li>
</ul>
<p>如果上面这些都已经了然于心，那么本文的帮助将不会特别大；如果对此有所疑问，接下来将逐一进行解惑</p>
<!-- more -->
<h2> I. 项目环境</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. ConfigurationProperties详解</h2>
<h3> 1. 配置绑定</h3>
<p>假定我们现在自定义一个功能模块，里面有一些我们自定义的参数，支持通过yaml配置文件的方式注入</p>
<p>首先我们可以先定义一个配置类 <code>BindConfig</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的注解中，<code>prefix = hhui.bind</code>，简单来讲就是会读取配置文件中，前缀为 <code>hhui.bind</code> 的属性，然后依次赋值到这个类中</p>
<ul>
<li><code>BindConfig.name = hhui.bind.name</code></li>
<li><code>BindConfig.age = hhui.bind.age</code></li>
<li>...</li>
</ul>
<p>对应的配置文件如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong></p>
<ul>
<li>配置类必须有公共的Setter方法，上文中主要是借助lombok的<code>@Data</code>省略了Setter方法的显示声明而已</li>
<li>类的属性名与配置文件中的配置名要求匹配
<ul>
<li>大小写不敏感</li>
<li>支持下划线转驼峰</li>
</ul>
</li>
<li>配置类不要求必须是public</li>
</ul>
<p>关于上面最后一点，也就表明我们可以在自动AutoConfiguration类中，声明一个内部类来绑定配置信息，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 注册生效</h3>
<p>我们通过<code>@ConfigurationProperties</code>修饰配置类之后，是否直接会生效呢？通常来讲，让它生效有下面三种方式</p>
<h4> a. <code>@Component</code>等注解修饰方式</h4>
<p>直接在配置类上添加<code>@Component</code>, <code>@Configuration</code>等注解，让Spring容器扫描并加载它</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方式时，需要注意配置类在自动扫描的包路径下，否则可能不会被扫描（主要是作为第三方jar包提供服务时，可能出现扫描不到的问题）</p>
<h4> b. <code>@Bean</code>注册</h4>
<p>把它当成一个普通的bean，借助bean注册的方式来实现，也是一个可选的方案，一般的实现方式如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. <code>@EnableConfigurationProperties</code>方式</h4>
<p>在配置类上，添加这个注解之后，可以实现配置注册，一般常见的使用姿势如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. 小结</h4>
<p>上面三种注册方式，前面两种的思路是将配置类作为bean，第三种实现思路和主动注册bean一致（所以想实现主动注册bean，可以考虑它的实现逻辑）</p>
<h3> 3. 参数类型不匹配</h3>
<p>如果我们在配置中，一个本来希望接收int类型的参数，结果实际上填了一个非整形，会怎样？</p>
<p>比如前面的配置类，我们实际的配置文件将<code>age</code>填18y，来看一下最终会发生什么事情</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单演示，直接在启动类中测试一下会如何</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210117/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>参数异常之后，直接启动失败，如果对参数的要求没有那么严格，即允许失败，我们可以通过设置<code>ignoreInvalidFields = true</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行之后，会发现正常启动，输出如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意查看上面的age，因为传入的参数非法，所以是null</p>
<p><strong>说明</strong></p>
<p>结合默认值 + <code>ignoreInvalidFields</code> 方式来支持配置的最大可用性：</p>
<ul>
<li>直接在配置类中，设置属性的默认值，表示当这个配置不存在或者设置非法时，使用默认的配置</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行输出如</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. 配置解析规则</h3>
<p>常见的配置除了基本类型之外，能嵌套自定义对象么，非基本类型又可以如何解析呢？</p>
<h4> a. POJO,List,Map参数类型</h4>
<p>我们新定义一个Pwd类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后扩展一下<code>BindConfig</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候mainPwd对应的yaml配置文件可以如下设置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的介绍也可以看出，对于自定义的POJO类是支持的，使用姿势也没什么区别</p>
<p>此外，对于List和Map的使用也给出了实例</p>
<h4> b.自定义配置解析</h4>
<p>上面我们自定义的<code>Pwd</code>类，主要借助<code>setter</code>方法，将匹配的属性塞入进去；如果我的配置就是一个json串，可以注入到一个POJO类么</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的Jwt类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候如想实现上面的配置解析，可以通过实现<code>org.springframework.core.convert.converter.Converter</code>接口来支持，并通过<code>@ConfigurationPropertiesBinding</code>注解来表明这是个配置属性转换类，不加这个注解会不生效哦</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<p>使用自定义的配置解析规则时，注意两点</p>
<ul>
<li>实现接口<code>Converter</code></li>
<li>使用<code>@ConfigurationPropertiesBinding</code>修饰注解</li>
</ul>
<p>Spring提供了一些默认的配置解析规则，如</p>
<ul>
<li>文件大小<code>DataSize</code>
<ul>
<li>对应的value可以是 1B, 1KB, 1MB, 1GB...</li>
</ul>
</li>
<li>持续时间<code>Duration</code>
<ul>
<li>对应的value可已是 1ns，1us，1ms，1s，1m，1h，1d</li>
</ul>
</li>
</ul>
<h3> 5. 配置不存在场景</h3>
<p>一个配置类，对应的类中没有这个属性会怎样？</p>
<p>如针对前面的<code>BindConfig</code>，没有<code>notExist</code>这个属性，但是配置文件中，却加上了这个</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测之后，发现没有任何影响，通过查看<code>@ConfigurationProperties</code>注解的成员，发现可以设置<code>ignoreUnknownFields=false</code>，从字面上表示出现了未能识别的成员，不会略错误，但是在实际测试中，并没有生效</p>
<h3> 6. 参数校验</h3>
<p>参数校验可以说比较常用的case了，比如前面的配置<code>age</code>，基本上不会允许这个参数能是负数，如需要对参数进行校验，我们可以借助<code>@Validated</code>来实现校验</p>
<p>添加pom依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再配置类上添加<code>@Validated</code>，然后就可以在需要校验的字段上添加对应的限制</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们将age参数设置不满足上面的条件</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试会发现报如下错误</p>
<figure><img src="/imgs/210117/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 7. IDEA自动补全提示</h3>
<p>平时在Spring开发过程中，在yaml文件中添加配置时，配合idea有非常友好的提示，可以非常友好的补全参数配置</p>
<figure><img src="/imgs/210117/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>那么我们自定义的参数想实现这个效果应该怎么做呢？</p>
<p>添加文章最开头的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加上面的依赖之后，打包<code>mvn clean package</code>，然后会发现在META-INF下面有个<code>spring-configuration-metadata.json</code></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后自动补全就有了</p>
<figure><img src="/imgs/210117/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>说明</strong></p>
<p>idea推荐添加插件<code>Spring Assistant</code>，支持非常友好的配置注入</p>
<h3> 8.小结</h3>
<p>本文介绍了<code>@ConfigurationProperties</code>修饰POJO类，实现配置的绑定，可以通过将这个类声明为一个普通bean的方式进行注册，也可以借助<code>@EnableConfigurationProperties</code>来注册</p>
<p>在配置参数时，需要注意如果参数类型不一致，会导致项目启动失败；可以通过设置<code>ConfigurationProperties#ignoreInvalidFields = true</code>，来避免这种场景</p>
<p>通过实现接口<code>Converter</code> + <code>@ConfigurationPropertiesBinding</code>来自定义参数解析转换规则，可以实现各路姿势的参数解析</p>
<p>配置的自动提示支持也比较简单，添加<code>org.springframework.boot:spring-boot-configuration-processor</code>依赖，打包之后在META-INF中会多一个json文件<code>spring-configuration-metadata.json</code></p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-bind" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-bind</a></li>
</ul>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之默认配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之配置刷新</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之如何读取配置信息</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210117/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>9.@Value中哪些你不知道的知识点</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/09.210606-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87-Value%E4%B8%AD%E5%93%AA%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/09.210606-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87-Value%E4%B8%AD%E5%93%AA%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">9.@Value中哪些你不知道的知识点</source>
      <description>看到这个标题，有点夸张了啊，@Value 这个谁不知道啊，不就是绑定配置么，还能有什么特殊的玩法不成？ (如果下面列出的这些问题，已经熟练掌握，那确实没啥往下面看的必要了) @Value对应的配置不存在，会怎样? 默认值如何设置 配置文件中的列表可以直接映射到列表属性上么？ 配置参数映射为简单对象的三种配置方式 除了配置注入，字面量、SpEL支持是否了解？ 远程(如db,配置中心,http)配置注入可行否？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Sun, 06 Jun 2021 21:50:47 GMT</pubDate>
      <content:encoded><![CDATA[<p>看到这个标题，有点夸张了啊，<code>@Value</code> 这个谁不知道啊，不就是绑定配置么，还能有什么特殊的玩法不成？</p>
<p>(如果下面列出的这些问题，已经熟练掌握，那确实没啥往下面看的必要了)</p>
<ul>
<li><code>@Value</code>对应的配置不存在，会怎样?</li>
<li>默认值如何设置</li>
<li>配置文件中的列表可以直接映射到列表属性上么？</li>
<li>配置参数映射为简单对象的三种配置方式</li>
<li>除了配置注入，字面量、SpEL支持是否了解？</li>
<li>远程(如db,配置中心,http)配置注入可行否？</li>
</ul>
<!-- more -->
<p>接下来，限于篇幅问题，将针对上面提出的问题的前面几条进行说明，最后两个放在下篇</p>
<h2> I. 项目环境</h2>
<p>先创建一个用于测试的SpringBoot项目，源码在最后贴出，友情提示源码阅读更友好</p>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 2. 配置文件</h3>
<p>在配置文件中，加一些用于测试的配置信息</p>
<p>application.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 使用case</h2>
<h3> 1. 基本姿势</h3>
<p>通过<code>${}</code>来引入配置参数，当然前提是所在的类被Spring托管，也就是我们常说的bean</p>
<p>如下，一个常见的使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置不存在，抛异常</h3>
<p>接下来，引入一个配置不存在的注入，在项目启动的时候，会发现抛出异常，导致无法正常启动</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛出的异常属于<code>BeanCreationException</code>, 对应的异常提示 <code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'auth.jwt.no' in value "${auth.jwt.no}"</code></p>
<figure><img src="/imgs/210606/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>所以为了避免上面的问题，一般来讲，建议设置一个默认值，规则如 <code>${key:默认值}</code>， 在分号右边的就是默认值，当没有相关配置时，使用默认值初始化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 列表配置</h3>
<p>在配置文件中whiteList，对应的value是 <code>4,5,6</code>, 用英文逗号分隔，对于这种格式的参数值，可以直接赋予<code>List&lt;Long&gt;</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个属于正确的使用姿势，但是下面这个却不行了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们的配置参数 <code>auth.jwt.blackList</code>是数组，但是就没法映射到上面的blackList （即使换成 <code>List&lt;String&gt;</code> 也是不行的，并不是因为声明为<code>String[]</code>的原因）</p>
<p>我们可以通过查看Evnrionment来看一下配置是怎样的</p>
<figure><img src="/imgs/210606/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>通过<code>auth.jwt.blackList</code>是拿不到配置信息的，只能通过<code>auth.jwt.blackList[0]</code>, <code>auth.jwt.blackList[1]</code>来获取</p>
<p>那么问题来了，怎么解决这个呢？</p>
<p>要解决问题，关键就是需要知道<code>@Value</code>的工作原理，这里直接给出关键类 <code>org.springframework.context.support.PropertySourcesPlaceholderConfigurer</code></p>
<figure><img src="/imgs/210606/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>关键点就在上面圈出的地方，找到这里，我们就可以动手开撸，一个比较猥琐的方法，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p>
<ul>
<li>上面这种实现姿势很不优雅，讲道理应该有更简洁的方式，有请知道的老哥指教一二</li>
</ul>
<h3> 4. 配置转实体类</h3>
<p>通常，<code>@Value</code>只修饰基本类型，如果我想将配置转换为实体类，可性否？</p>
<p>当然是可行的，而且还有三种支持姿势</p>
<ul>
<li><code>PropertyEditor</code></li>
<li><code>Converter</code></li>
<li><code>Formatter</code></li>
</ul>
<p>接下来针对上面配置的<code>auth.jwt.tt</code>进行转换</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>映射为Jwt对象</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.1 PropertyEditor</h4>
<p>请注意<code>PropertyEditor</code>是java bean规范中的，主要用于对bean的属性进行编辑而定义的接口，Spring提供了支持；我们希望将String转换为bean属性类型，一般来讲就是一个POJO，对应一个Editor</p>
<p>所以自定义一个 <code>JwtEditor</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就需要注册这个Editor</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li>当上面的<code>JwtEditor</code>与<code>Jwt</code>对象，在相同的包路径下面的时候，不需要上面的主动注册，Spring会自动注册 （就是这么贴心）</li>
</ul>
<p>上面这个配置完毕之后，就可以正确的被注入了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210606/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> 4.2 Converter</h4>
<p>Spring的Converter接口也比较常见，至少比上面这个用得多一些，使用姿势也比较简单，实现接口、然后注册即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册转换类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，同样可以注入成功</p>
<figure><img src="/imgs/210606/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> 4.3 Formatter</h4>
<p>最后再介绍一个Formatter的使用姿势，它更常见于本地化相关的操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样注册一下（请注意，我们使用注册Formatter时，需要将前面Converter的注册bean给注释掉）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当Converter与Formatter同时存在时，后者优先级更高</p>
<figure><img src="/imgs/210606/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>限于篇幅，这里就暂告一段落，针对前面提到的几个问题，做一个简单的归纳小结</p>
<ul>
<li><code>@Value</code> 声明的配置不存在时，抛异常（项目会起不来）</li>
<li>通过设置默认值(语法 <code>${xxx:defaultValue})</code>可以解决上面的问题</li>
<li><code>yaml</code>配置中的数组，无法直接通过<code>@Value</code>绑定到列表/数组上</li>
<li>配置值为英文逗号分隔的场景，可以直接赋值给列表/数组</li>
<li>不支持将配置文件中的值直接转换为非简单对象，如果有需要有三种方式
<ul>
<li>使用<code>PropertyEditor</code>实现类型转换</li>
<li>使用<code>Converter</code>实现类型转换 （更推荐使用这种方式）</li>
<li>使用<code>Formater</code>实现类型转换</li>
</ul>
</li>
</ul>
<p>除了上面的知识点之外，针对最开始提出的问题，给出答案</p>
<ul>
<li><code>@Value</code>支持字面量，也支持SpEL表达式</li>
<li>既然支持SpEL表达式，当然就可以实现我们需求的远程配置注入了</li>
</ul>
<p>既然已经看到这里了，那么就再提两个问题吧，在SpringCloud微服务中，如果使用了SpringCloud Config，也是可以通过<code>@Value</code>来注入远程配置的，那么这个原理又是怎样的呢？</p>
<p><code>@Value</code>绑定的配置，如果想实现动态刷新，可行么？如果可以怎么玩？</p>
<p>（顺手不介意的话，关注下微信公众号"一灰灰blog", 下篇博文就给出答案)</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value</a></li>
</ul>
<p><strong>系列博文，配合阅读效果更好哦</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之默认配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之配置刷新</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之如何读取配置信息</a></li>
<li></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210606/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>10.自定义配置源的使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/10.210610-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/10.210610-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">10.自定义配置源的使用姿势</source>
      <description>前面一篇博文介绍了一个@Value的一些知识点，其中提了一个点，@Value对应的配置，除了是配置文件中之外，可以从其他的数据源中获取么，如从redis，db，http中获取配置？ 了解过SpringCloud Config的可以给出确切的答案，可以，而且用起来还老爽了，远程配置，支持配置动态刷新，接下来我们来看一下，在SpringBoot中，如何配置自定义的数据源</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Thu, 10 Jun 2021 19:44:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文介绍了一个<code>@Value</code>的一些知识点，其中提了一个点，<code>@Value</code>对应的配置，除了是配置文件中之外，可以从其他的数据源中获取么，如从redis，db，http中获取配置？</p>
<p>了解过SpringCloud Config的可以给出确切的答案，可以，而且用起来还老爽了，远程配置，支持配置动态刷新，接下来我们来看一下，在SpringBoot中，如何配置自定义的数据源</p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 自定义配置源</h2>
<p><code>@Value</code>修饰的成员，绑定配置时，是从<code>Envrionment</code>中读取配置的，所以我们需要做的就是注册一个自定义的配置源，借助<code>MapPropertySource</code>可以来实现我们需求场景</p>
<h3> 1. 自定义数据源</h3>
<p>演示一个最简单自定义的配置数据源，重写<code>MapPropertySource</code>的<code>getProperties</code>方法</p>
<p>实现如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据源注册</h3>
<p>上面只是声明了配置源，接下来把它注册到Environment中，这样就可以供应用使用了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210610/00.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的输出可以看出，自定义配置开头的会获取到随机的配置值；非<code>selfdefine</code>开头的，没有相应的配置，返回空</p>
<h3> 3. 基于文件的自定义配置源</h3>
<p>上面这个可能有点过于儿戏了，接下来我们将配置源放在自定义的文件中，并支持文件配置修改</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面写了一个定时器，每10s刷新一下内存中的配置信息，当然这里也是可以配置一个文件变动监听器，相关有兴趣的话，可以看下<a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247483855&amp;idx=1&amp;sn=918528761a188b664823dbf442ab681b&amp;chksm=fce71a63cb909375a46cd1ec966881ce075f2b98ac0a84aaf2eaa33f65063c6be11378676039&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">Java实现文件变动的监听可以怎么玩</a></p>
<p>对应的配置文件</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册的姿势与上面一致，就不单独说明了，接下来演示一下使用</p>
<figure><img src="/imgs/210610/01.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上可以看到文件中的配置修改之后，过一段时间会刷新</p>
<h3> 4. <code>@Value</code>绑定自定义配置</h3>
<p>接下来我们看一下，将<code>@Value</code>绑定自定义的配置，是否可以成功</p>
<p>调整一下上面的Application, 添加一个成员属性</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试发现抛异常了，说是这个配置不存在！！！</p>
<figure><img src="/imgs/210610/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（这就过分了啊，看了半天，结果告诉我不行，这还不得赶紧搞个差评么😡😡😡）</p>
<p>已经写到这里了，当然我也得继续尝试挽救一下，为啥前面直接通过<code>Environment</code>可以拿到配置，但是<code>@Value</code>注解绑定就不行呢？</p>
<p>”罪魁祸首“就在于初始化顺序，我自定义的配置源，还没有塞到<code>Envrionment</code>，你就开会着手绑定了，就像准备给”一灰灰blog“一个差评，结果发现还没关注...（好吧，我承认没关注也可以评论😭）</p>
<p>根据既往的知识点（至于是哪些知识点，那就长话短说不了了，看下面几篇精选的博文吧）</p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484553&amp;idx=1&amp;sn=f2d20abf3f3d409c53d0ee2675f7ab00&amp;chksm=fce71f25cb9096338452312fb211776dee65fabbbe35908b9b00b43631c62a0f397a5b4aecf7&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot基础系列-实战】如何指定 bean 最先加载(应用篇)</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484364&amp;idx=1&amp;sn=35eb49543198b283ec505139b0f7af6f&amp;chksm=fce71860cb909176b27ef22074970e3ac1746182b86b2a31d67fe5dcdedc59f99dc92eefa06a&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot系列教程之Bean之指定初始化顺序的若干姿势</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484360&amp;idx=1&amp;sn=97188fc2e5595b1ba67db2e2634262c3&amp;chksm=fce71864cb9091721af0288a0a4c9a4145b62dd63c927db6f0a14ceb8f13faa23183499f06e4&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot系列教程之Bean加载顺序之错误使用姿势辟谣</a></li>
</ul>
<p>要解决这个问题，一个最简单的方式如下</p>
<p>创建一个独立的配置类，实现自定义数据源的注册</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类上指定bean依赖</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，结果如下</p>
<figure><img src="/imgs/210610/03.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的演示动图可以看到，绑定自定义的数据源配置，没有问题，但是，当配置变更时，绑定的name字段，没有随之更新</p>
<p>简单来讲就是不支持动态刷新，这就难受了啊，我就想要动态刷新，那该怎么搞？</p>
<ul>
<li>不要急，新的博文已经安排上了，下篇奉上（怕迷路的小伙伴，不妨关注一下”一灰灰blog“🐺）</li>
</ul>
<h3> 5. 小结</h3>
<p>最后按照惯例小结一下，本文篇幅虽长，但知识点比较集中，总结下来，两句话搞定</p>
<ul>
<li>通过继承<code>MapPropertySource</code>来实现自定义配置源，注册到<code>Envrionment</code>可供<code>@Value</code>使用</li>
<li>使用<code>@Value</code>绑定自定义配置源时，注意注册的顺序要早于bean的初始化</li>
</ul>
<p>好的，到这里正文结束， 我是一灰灰，欢迎各位大佬来踩一踩长草的公众号"一灰灰blog"</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-dynamic-envronment" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-dynamic-envronment</a></li>
</ul>
<p><strong>配置系列博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486297&amp;idx=1&amp;sn=9c9014eb80987f8c6ef842b1ae02b155&amp;chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】@Value 中哪些你不知道的知识点</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485872&amp;idx=1&amp;sn=cb565e467d2d2dc9d69ad80a1f936813&amp;chksm=fce7121ccb909b0a0efe89c94d5eba504cf490e0f0bdd15502def81be8c23b96ea76b5f247c4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】ConfigurationProperties 配置绑定中那些你不知道的事情</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485754&amp;idx=1&amp;sn=724f1a314f64faaaff580dfac0b58e73&amp;chksm=fce71296cb909b8086442a6ebc982b5ed16b1a7252da2b8af27434c3dd6c757537867433efeb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】SpringBoot 配置篇之 PropertySource 加载 Yaml 配置文件实例演示</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484640&amp;idx=1&amp;sn=5ac20b68d7b539295dabc0c2aaf81314&amp;chksm=fce71f4ccb90965afb626b437cc618172b2a34d8ff72b2ec30eba71e85ff9330503e0ead9e9a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484056&amp;idx=1&amp;sn=90f705d698b2613bcc269fea98dc993e&amp;chksm=fce71934cb90902264f260b15977fc9bf7e19a3ebf3f779acec2f5842c9a8ff6ac514beebf60&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之配置刷新</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484054&amp;idx=1&amp;sn=954d2bb34b5ce288dcfc2451cbcd2830&amp;chksm=fce7193acb90902cf2ba829362da0e327d7849f3339e4d61188a03cabeb07af0590056f755d5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484053&amp;idx=1&amp;sn=3fc32d8a21a5cadc7b33b11681f272ae&amp;chksm=fce71939cb90902fdc5b352e0d135b395248aa9ef40acd5e145bdd05a62185ff538c66f4fe26&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484040&amp;idx=1&amp;sn=0b984bc76954f9214ed32ada38bc82d2&amp;chksm=fce71924cb909032ad7a06a12aa71c23afe5698d552f182cc96bb5486b54e5a7332d7ab0736d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之如何读取配置信息</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210610/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>11.@Value之字面量及SpEL知识点介绍篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/11.210615-SpringBoot%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%87-Value%E4%B9%8B%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8F%8ASpEL%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BB%8B%E7%BB%8D%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/11.210615-SpringBoot%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%87-Value%E4%B9%8B%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8F%8ASpEL%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BB%8B%E7%BB%8D%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">11.@Value之字面量及SpEL知识点介绍篇</source>
      <description>承接上一篇博文【SpringBoot 基础系列】@Value 中哪些你不知道的知识点 中提及到但没有细说的知识点，这一篇博文将来看一下@Value除了绑定配置文件中的属性配置之外，另外支持的两种姿势 字面量表达式支持 SpEL语法支持</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Tue, 15 Jun 2021 21:23:35 GMT</pubDate>
      <content:encoded><![CDATA[<p>承接上一篇博文<a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486297&amp;idx=1&amp;sn=9c9014eb80987f8c6ef842b1ae02b155&amp;chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】@Value 中哪些你不知道的知识点</a> 中提及到但没有细说的知识点，这一篇博文将来看一下<code>@Value</code>除了绑定配置文件中的属性配置之外，另外支持的两种姿势</p>
<ul>
<li>字面量表达式支持</li>
<li>SpEL语法支持</li>
</ul>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. @Value知识点</h2>
<p>上一篇的博文知道通过<code>${}</code>可以获取配置文件中对应的配置值，接下来我们看一下另外两种常见的姿势</p>
<h3> 1. 字面量</h3>
<p>字面量的使用比较简单，直接在<code>@Value</code>注解中写常量</p>
<p>一个demo如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种初始化之后，common的值会是 <code>1 + 2</code>；如果只是这种用法，这个东西就有些鸡肋了，我直接赋值不香嘛，为啥还有这样多此一举呢？</p>
<p>当然现实中（至少我有限的代码接触中），纯上面这种写法的不多，更常见的是下面这种</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字面量 + 配置联合使用，如我们的配置文件值为</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的prefixConf的取值，实际为 <code>demo_TOKEN.123</code></p>
<h3> 2. SpEL表达式</h3>
<p>@Value另外一个很强的使用姿势是支持SpEL表达式，至于SpEL是什么鬼，推荐查看<a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484665&amp;idx=1&amp;sn=d0e0ee3594ac0faa82c7ded5db178eef&amp;chksm=fce71f55cb90964379e9c3e724c07fe0c43f17acdc77c591d93ec1dbaab3440c4579eec5fc7c&amp;token=73054292&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】SpEL 语法扫盲与查询手册</a></p>
<h4> 2.1 基本姿势</h4>
<p>使用姿势是 <code>#{}</code>，表示这个大括弧里面的走SpEL表达式，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是几个基本的case了，字面量，表达式，列表/Map等，SpEL的基本使用姿势与扫盲博文中的没有什么区别，无外乎就是在外层多了一个<code>${}</code></p>
<p>当然如果仅仅只是介绍上面几个的话，就有点单调了，SpEL一个比较强大的就是可以访问bean的属性/方法，这就给了我们很多的想像空间了</p>
<h4> 2.2 调用静态方法：</h4>
<p>在上面这个配置类<code>com.git.hui.boot.properties.value.config.SpelProperties</code>中添加一个静态方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们尝试调用它</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样<code>spelStaticMethod</code>就会是一个 <code>"spel_"</code> 开头的随机字符串了</p>
<p><strong>请注意：如果在你的实际生产项目中，写出这样的代码，那多半意味着离找下家不远了</strong></p>
<h4> 2.3 嵌套使用</h4>
<p>接下来借助SpEL与配置绑定的嵌套使用，来稍微调整下上面的实现（实际上下面这种用法也不常见，虽然没问题，但这种代码就属于写时一时爽，维护火葬场了🙄）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于嵌套使用，下面再给出一个基础的使用姿势，供打开思路用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.4 Bean方法调用</h4>
<p>最后再来一个访问bean的方法的case</p>
<p>定义一个Service</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个使用的姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试</h3>
<p>最后给出一个注入的结果输出，查看下有没有什么偏离预期的场景</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210615/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>本篇博文主要介绍了<code>@Value</code>除了绑定配置文件中的配置之外，另外两种常见的case</p>
<ul>
<li>字面量</li>
<li>SpEL表达式：定义在<code>#{}</code>里面</li>
</ul>
<p>借助SpEL的强大功能，完全可以发挥我们的脑洞，让<code>@Value</code>修饰的属性初始化不再局限于简单的配置文件，比如从db,redis,http获取完全是可行的嘛，无非就是一个表达式而已</p>
<p>当然这里还存在一个待解决的问题，就是值刷新的支持，已知<code>@Value</code>只在bean初始化时执行一次，后续即便配置变更了，亦不会重新更改这个值，这种设计有好有坏，好处很明显，配置的不变性可以省去很多问题；缺点就是不灵活</p>
<p>那么如何让<code>@Value</code>的配置可以动态刷新呢？</p>
<p>咱么下篇博文见，我是一灰灰，欢迎关注长草的公众号<code>一灰灰blog</code></p>
<h3> III. 不能错过的源码和相关知识点</h3>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value</a></li>
</ul>
<p><strong>配置系列博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486363&amp;idx=1&amp;sn=259c4396393d6670e1caedd24a4d9af2&amp;chksm=fce71037cb909921d80559c0c48625f678957e4c7f8b12becacda83d120fe13f1eb40166da99&amp;token=1655903804&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】自定义配置源的使用姿势介绍</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486297&amp;idx=1&amp;sn=9c9014eb80987f8c6ef842b1ae02b155&amp;chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】@Value 中哪些你不知道的知识点</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485872&amp;idx=1&amp;sn=cb565e467d2d2dc9d69ad80a1f936813&amp;chksm=fce7121ccb909b0a0efe89c94d5eba504cf490e0f0bdd15502def81be8c23b96ea76b5f247c4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】ConfigurationProperties 配置绑定中那些你不知道的事情</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485754&amp;idx=1&amp;sn=724f1a314f64faaaff580dfac0b58e73&amp;chksm=fce71296cb909b8086442a6ebc982b5ed16b1a7252da2b8af27434c3dd6c757537867433efeb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】SpringBoot 配置篇之 PropertySource 加载 Yaml 配置文件实例演示</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484640&amp;idx=1&amp;sn=5ac20b68d7b539295dabc0c2aaf81314&amp;chksm=fce71f4ccb90965afb626b437cc618172b2a34d8ff72b2ec30eba71e85ff9330503e0ead9e9a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484056&amp;idx=1&amp;sn=90f705d698b2613bcc269fea98dc993e&amp;chksm=fce71934cb90902264f260b15977fc9bf7e19a3ebf3f779acec2f5842c9a8ff6ac514beebf60&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之配置刷新</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484054&amp;idx=1&amp;sn=954d2bb34b5ce288dcfc2451cbcd2830&amp;chksm=fce7193acb90902cf2ba829362da0e327d7849f3339e4d61188a03cabeb07af0590056f755d5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484053&amp;idx=1&amp;sn=3fc32d8a21a5cadc7b33b11681f272ae&amp;chksm=fce71939cb90902fdc5b352e0d135b395248aa9ef40acd5e145bdd05a62185ff538c66f4fe26&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484040&amp;idx=1&amp;sn=0b984bc76954f9214ed32ada38bc82d2&amp;chksm=fce71924cb909032ad7a06a12aa71c23afe5698d552f182cc96bb5486b54e5a7332d7ab0736d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">SpringBoot基础篇配置信息之如何读取配置信息</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210615/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>12.@Value注解支持配置自动刷新能力扩展</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/12.210801-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87-Value%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E8%83%BD%E5%8A%9B%E6%89%A9%E5%B1%95.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/12.210801-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87-Value%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E8%83%BD%E5%8A%9B%E6%89%A9%E5%B1%95.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">12.@Value注解支持配置自动刷新能力扩展</source>
      <description>在我们的日常开发中，使用@Value来绑定配置属于非常常见的基础操作，但是这个配置注入是一次性的，简单来说就是配置一旦赋值，则不会再修改； 通常来讲，这个并没有什么问题，基础的SpringBoot项目的配置也基本不存在配置变更，如果有使用过SpringCloudConfig的小伙伴，会知道@Value可以绑定远程配置，并支持动态刷新 接下来本文将通过一个实例来演示下，如何让@Value注解支持配置刷新；本文将涉及到以下知识点 BeanPostProcessorAdapter + 自定义注解：获取支持自动刷新的配置类 MapPropertySource：实现配置动态变更</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Sun, 01 Aug 2021 16:04:20 GMT</pubDate>
      <content:encoded><![CDATA[<p>在我们的日常开发中，使用<code>@Value</code>来绑定配置属于非常常见的基础操作，但是这个配置注入是一次性的，简单来说就是配置一旦赋值，则不会再修改；
通常来讲，这个并没有什么问题，基础的SpringBoot项目的配置也基本不存在配置变更，如果有使用过SpringCloudConfig的小伙伴，会知道<code>@Value</code>可以绑定远程配置，并支持动态刷新</p>
<p>接下来本文将通过一个实例来演示下，如何让<code>@Value</code>注解支持配置刷新；本文将涉及到以下知识点</p>
<ul>
<li>BeanPostProcessorAdapter + 自定义注解：获取支持自动刷新的配置类</li>
<li>MapPropertySource：实现配置动态变更</li>
</ul>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 配置动态刷新支持</h2>
<h3> 1. 思路介绍</h3>
<p>要支持配合的动态刷新，重点在于下面两点</p>
<ul>
<li>如何修改<code>Environment</code>中的配置源</li>
<li>配置变更之后，如何通知到相关的类同步更新</li>
</ul>
<h3> 2. 修改配置</h3>
<p>相信很多小伙伴都不会去修改<code>Environment</code>中的数据源，突然冒出一个让我来修改配置源的数据，还是有点懵的，这里推荐之前分享过一篇博文 <a href="https://spring.hhui.top/spring-blog/2021/06/10/210610-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">SpringBoot基础篇之自定义配置源的使用姿势</a></p>
<p>当我们知道如何去自定义配置源之后，再来修改数据源，就会有一点思路了</p>
<p>定义一个配置文件<code>application-dynamic.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在主配置文件中使用它</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置的java config</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来进入修改配置的正题</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现中，有几个疑问点</p>
<ul>
<li>name如何找到的？
<ul>
<li>debug...</li>
</ul>
</li>
<li>配置变更
<ul>
<li>注意修改配置是新建了一个Map，然后将旧的配置拷贝到新的Map，然后再执行替换；并不能直接进行修改，有兴趣的小伙伴可以实测一下为什么</li>
</ul>
</li>
</ul>
<h3> 3. 配置同步</h3>
<p>上面虽然是实现了配置的修改，但是对于使用<code>@Value</code>注解修饰的变量，已经被赋值了，如何能感知到配置的变更，并同步刷新呢？</p>
<p>这里就又可以拆分两块</p>
<ul>
<li>找到需要修改的配置</li>
<li>修改事件同步</li>
</ul>
<h4> 3.1 找出需要刷新的配置变量</h4>
<p>我们这里额外增加了一个注解，用来修饰需要支持动态刷新的场景</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们就是找出有上面这个注解的类，然后支持这些类中<code>@Value</code>注解绑定的变量动态刷新</p>
<p>关于这个就有很多实现方式了，我们这里选择<code>BeanPostProcessor</code>，bean创建完毕之后，借助反射来获取<code>@Value</code>绑定的变量，并缓存起来</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现虽然有点长，但是核心逻辑就下面节点</p>
<ul>
<li>processMetaValue():
<ul>
<li>通过反射，捞取带有<code>@Value</code>注解的变量</li>
</ul>
</li>
<li>pickPropertyKey()
<ul>
<li>主要就是解析<code>@Value</code>注解中表达式，挑出变量名，用于缓存</li>
<li>如: <code>@value("hello ${name:xhh} ${now:111}</code></li>
<li>解析之后，有两个变量，一个 <code>name</code> 一个 <code>now</code></li>
</ul>
</li>
<li>缓存<code>Map&lt;String, List&lt;FieldPair&gt;&gt;</code>
<ul>
<li>缓存的key，为变量名</li>
<li>缓存的value，自定义类，主要用于反射修改配置值</li>
</ul>
</li>
</ul>
<h4> 3.2 修改事件同步</h4>
<p>从命名也可以看出，我们这里选择事件机制来实现同步，直接借助Spring Event来完成</p>
<p>一个简单的自定义类事件类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费也比较简单，直接将下面这段代码，放在上面的<code>AnoValueRefreshPostProcessor</code>， 接收到变更事件，通过key从缓存中找到需要变更的Field，然后依次执行刷新即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 实例演示</h3>
<p>最后将前面修改配置的代码块封装一下，提供一个接口，来验证下我们的配置刷新</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210801/00.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5.小结</h3>
<p>本文主要通过简单的几步，对<code>@Value</code>进行了拓展，支持配置动态刷新，核心知识点下面三块：</p>
<ul>
<li>使用BeanPostProcess来扫描需要刷新的变量</li>
<li>利用Spring Event事件机制来实现刷新同步感知</li>
<li>至于配置的修改，则主要是<code>MapPropertySource</code>来实现配置的替换修改</li>
</ul>
<p>请注意，上面的这个实现思路，与Spring Cloud Config是有差异的，很久之前写过一个配置刷新的博文，有兴趣的小伙伴可以看一下 <a href="https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/" target="_blank" rel="noopener noreferrer">SpringBoot配置信息之配置刷新</a></p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value</a></li>
</ul>
<p><strong>配置系列博文</strong></p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486397&amp;idx=1&amp;sn=3943d245a421edafa7c5416e2e43100d&amp;chksm=fce71011cb909907af4dc9db57d7fcdc77fb46dcf187d6ed3c7eed4076422898d6a4885d7482&amp;token=908878619&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】@Value 之字面量及 SpEL 知识点介绍篇</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486363&amp;idx=1&amp;sn=259c4396393d6670e1caedd24a4d9af2&amp;chksm=fce71037cb909921d80559c0c48625f678957e4c7f8b12becacda83d120fe13f1eb40166da99&amp;token=1655903804&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】自定义配置源的使用姿势介绍</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486297&amp;idx=1&amp;sn=9c9014eb80987f8c6ef842b1ae02b155&amp;chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】@Value 中哪些你不知道的知识点</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485872&amp;idx=1&amp;sn=cb565e467d2d2dc9d69ad80a1f936813&amp;chksm=fce7121ccb909b0a0efe89c94d5eba504cf490e0f0bdd15502def81be8c23b96ea76b5f247c4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】ConfigurationProperties 配置绑定中那些你不知道的事情</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247485754&amp;idx=1&amp;sn=724f1a314f64faaaff580dfac0b58e73&amp;chksm=fce71296cb909b8086442a6ebc982b5ed16b1a7252da2b8af27434c3dd6c757537867433efeb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】SpringBoot 配置篇之 PropertySource 加载 Yaml 配置文件实例演示</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484640&amp;idx=1&amp;sn=5ac20b68d7b539295dabc0c2aaf81314&amp;chksm=fce71f4ccb90965afb626b437cc618172b2a34d8ff72b2ec30eba71e85ff9330503e0ead9e9a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484056&amp;idx=1&amp;sn=90f705d698b2613bcc269fea98dc993e&amp;chksm=fce71934cb90902264f260b15977fc9bf7e19a3ebf3f779acec2f5842c9a8ff6ac514beebf60&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】配置信息之配置刷新</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484054&amp;idx=1&amp;sn=954d2bb34b5ce288dcfc2451cbcd2830&amp;chksm=fce7193acb90902cf2ba829362da0e327d7849f3339e4d61188a03cabeb07af0590056f755d5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484053&amp;idx=1&amp;sn=3fc32d8a21a5cadc7b33b11681f272ae&amp;chksm=fce71939cb90902fdc5b352e0d135b395248aa9ef40acd5e145bdd05a62185ff538c66f4fe26&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】配置信息之多环境配置信息</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484040&amp;idx=1&amp;sn=0b984bc76954f9214ed32ada38bc82d2&amp;chksm=fce71924cb909032ad7a06a12aa71c23afe5698d552f182cc96bb5486b54e5a7332d7ab0736d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">【SpringBoot 基础系列】配置信息之如何读取配置信息</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210801/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>13.基于maven多环境配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/13.220425-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E4%BA%8Emaven%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/13.220425-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E4%BA%8Emaven%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">13.基于maven多环境配置</source>
      <description>SpringBoot系列之基于maven多环境配置 实际开发过程中，配置的多环境区分属于标配了，当我们不考虑配置中心时，将多环境的配置就放在项目的resource目录下，那么可以怎样做多环境的配置管理呢? 之前介绍过一篇基于 spring.profiles.active 配置来选择对应的配置文件的方式，有了解这个配置的小伙伴可以很快找到这种方式的特点 如配置值为dev，则加载 application-dev.yml 配置文件，如果为prod，则加载application-prod.yml 那么缺点就很明显了，当我每个环境的配置很多时，上面这种方式真的好用么？ 接下来本文介绍另外一种常见的基于maven的多环境配置方式</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>配置</category>
      <pubDate>Mon, 25 Apr 2022 20:45:50 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>SpringBoot系列之基于maven多环境配置</p>
</blockquote>
<p>实际开发过程中，配置的多环境区分属于标配了，当我们不考虑配置中心时，将多环境的配置就放在项目的resource目录下，那么可以怎样做多环境的配置管理呢?</p>
<p>之前介绍过一篇基于 <code>spring.profiles.active</code> 配置来选择对应的配置文件的方式，有了解这个配置的小伙伴可以很快找到这种方式的特点</p>
<p>如配置值为dev，则加载 <code>application-dev.yml</code> 配置文件，如果为prod，则加载<code>application-prod.yml</code></p>
<p>那么缺点就很明显了，当我每个环境的配置很多时，上面这种方式真的好用么？</p>
<p>接下来本文介绍另外一种常见的基于maven的多环境配置方式</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的页面模板 <code>resources/templates/index.html</code></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 多环境配置</h3>
<p>其次需要在<code>pom.xml</code>文件中，添加<code>&lt;profiles&gt;</code>，用于定义各种环境</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义了四个环境，默认处于dev开发环境</p>
<p>其次就是build标签中的<code>resource</code>，用于指定不同环境下的资源存放位置；在resources目录下的配置文件如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个表示会加载<code>application-dal.yml</code>配置文件；接下来看下不同环境中这个配置文件的具体存放位置如下</p>
<figure><img src="/imgs/220425/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>dev环境配置:</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pre环境配置</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>prod环境配置</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>test环境配置</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面四个配置文件的主要区别在于<code>username</code></p>
<h2> II. 环境选择验证</h2>
<h3> 1.配置类</h3>
<p>首先基于Spring AutoConfig定义一个配置属性类，用于映射<code>application-dal.yml</code>对应的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试端点</h3>
<p>写一个简单的测试端点，输出配置值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 启动测试</h3>
<p>项目启动之后，默认的是dev环境，此时访问之后结果如下</p>
<figure><img src="/imgs/220425/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>接下来如果我想启动test环境，可以如下操作</p>
<ul>
<li>idea右边maven，选中对应的环境</li>
</ul>
<figure><img src="/imgs/220425/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>再次启动测试一下</p>
<figure><img src="/imgs/220425/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面说的是idea启动测试，那么实际打包的时候怎么整呢？</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关键就是上面的 <code>-P</code> 来指定具体的环境</p>
<h3> 4. 小结</h3>
<p>最后小结一下本文介绍到基于mvn的环境配置策略，这里主要的知识点都在<code>pom.xml</code>中，指定<code>profiles</code>，然后在打包的时候通过<code>-P</code>确定具体的环境</p>
<p>在最终打包时，只会将对应环境的配置文件打到jar包中</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<p>相关博文</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之多环境配置信息 | 一灰灰Blog</a></li>
</ul>
<p>项目源码</p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties-env-mvn" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties-env-mvn</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/220425/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>基础配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">基础配置</source>
      <description>我们常说Spring约定大于配置，那么约定是什么？配置在哪里？怎么读取呢？多环境配置又改如何管理呢？本系列教程将为您一一解惑</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>我们常说Spring约定大于配置，那么约定是什么？配置在哪里？怎么读取呢？多环境配置又改如何管理呢？本系列教程将为您一一解惑</p>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">主要功能与配置演示</source>
      <description>目录 Markdown 展示 页面展示 禁用展示 加密展示</description>
      <category>使用指南</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 目录</h2>
<ul>
<li>
<p><a href="/tutorial/demo/markdown.html" target="blank">Markdown 展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/page.html" target="blank">页面展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/disable.html" target="blank">禁用展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/encrypt.html" target="blank">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>布局与功能禁用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/disable.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/disable.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">布局与功能禁用</source>
      <description>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</description>
      <category>使用指南</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>
<!-- more -->
<p>本页面就是一个示例，禁用了如下功能:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/encrypt.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/encrypt.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">密码加密的文章</source>
      <description>实际的文章内容。 段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。 段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 ...</description>
      <category>使用指南</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 展示</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/markdown.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/markdown.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Markdown 展示</source>
      <description>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。 你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</description>
      <category>使用指南</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>
<!-- more -->
<h2> Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<h2> Markdown 配置</h2>
<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2> Markdown 扩展</h2>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a> 。</p>
<h3> VuePress 扩展</h3>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h3> 主题扩展</h3>
<p>通过 <a href="https://theme-hope.vuejs.press/md-enhance/zh/" target="_blank" rel="noopener noreferrer"><code>vuepress-plugin-md-enhance</code></a>，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>
<h4> 自定义容器</h4>
<div v-pre="">
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 <a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8">链接</a>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>
<div class="hint-container tip">
<p class="hint-container-title">自定义标题</p>
<p>提示容器</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">自定义标题</p>
<p>警告容器</p>
</div>
<div class="hint-container danger">
<p class="hint-container-title">自定义标题</p>
<p>危险容器</p>
</div>
<details class="hint-container details"><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 代码块</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 上下角标</h4>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 自定义对齐</h4>
<div style="text-align:center">
<p>我是居中的</p>
</div>
<div style="text-align:right">
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> Attrs</h4>
<p>一个拥有 ID 的 <strong id="word">单词</strong>。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/attrs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 脚注</h4>
<p>此文字有脚注<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">.</a></p><a class="footnote-anchor" id="footnote-ref1">
</a><ul><a class="footnote-anchor" id="footnote-ref1">
</a><li><a class="footnote-anchor" id="footnote-ref1"></a><a href="https://theme-hope.vuejs.press/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 标记</h4>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 任务列表</h4>
<ul class="task-list-container">
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 计划 1</label></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 计划 2</label></p>
</li>
<li>
<p><a href="https://theme-hope.vuejs.press/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3> 图片增强</h3>
<p>支持为图片设置颜色模式和大小</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 图表</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> Echarts</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/echarts.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 流程图</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> Mermaid</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/mermaid.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> Tex 语法</h4>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0277em;vertical-align:-1.2777em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5017em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span></p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/tex.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 导入文件</h4>
<ul>
<li>
<p><a href="/tutorial/demo/markdown.html" target="blank">Markdown 展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/page.html" target="blank">页面展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/disable.html" target="blank">禁用展示</a></p>
</li>
<li>
<p><a href="/tutorial/demo/encrypt.html" target="blank">加密展示</a></p>
</li>
</ul>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/include.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 代码演示</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/demo.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 样式化</h4>
<p>向 Mr.Hope 捐赠一杯咖啡。 </p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/stylize.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 交互演示</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/playground.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> Vue 交互演示</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/vue-playground.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4> 幻灯片</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/presentation.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p>这是脚注内容 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/page.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/demo/page.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">页面配置</source>
      <description>more 注释之前的内容被视为文章摘要。</description>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>
<!-- more -->
<h2> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>作者设置为 Ms.Hope。</li>
<li>写作日期为 2020 年 1 月 1 日</li>
<li>分类为 “使用指南”</li>
<li>标签为 “页面配置” 和 “使用指南”</li>
</ul>
<h2> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<ul>
<li>
<p>你可以将图片和 Markdown 文件放置在一起，但是你需要使用<strong>相对链接</strong><code>./</code> 进行引用。</p>
</li>
<li>
<p>对于 <code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用。</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 </p>
</blockquote>
<h2> 页面结构</h2>
<p>此页面应当包含:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/breadcrumb.html" target="_blank" rel="noopener noreferrer">路径导航</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/page-info.html" target="_blank" rel="noopener noreferrer">标题和页面信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/page.html#%E6%A0%87%E9%A2%98%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">TOC (文章标题列表)</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/meta.html" target="_blank" rel="noopener noreferrer">贡献者、更新时间等页面元信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">评论</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>
<li>返回顶部按钮</li>
</ul>
<p>你可以通过主题选项和页面 Frontmatter 自定义它们。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Slide page</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/slides.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/slides.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Slide page</source>
      <description>slidestart Slide Demo A simple slide demo and useful hints. By Mr.Hope. Please scroll mouse wheel down to the next slide Marking Slides 👇 (#/1/1) -- Marking Slides Use --- to m...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<!-- markdownlint-disable MD024 MD033 MD051 -->
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>开源项目</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">开源项目</source>
      <description>以下为一灰灰的开源项目，欢迎感兴趣的小伙伴自取 项目列表 quick-media 相关信息 项目为一个提供了包括图片 + 音频 + 视频 + 二维码 + 网页 + markdown + svg等音视频、多媒体渲染的处理工具集 源码地址 github: https://github.com/liuyueyi/quick-media gitee: https://gitee.com/liuyueyi/quick-media</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>以下为一灰灰的开源项目，欢迎感兴趣的小伙伴自取</p>
<h2> 项目列表</h2>
<h3> quick-media</h3>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>项目为一个提供了包括图片 + 音频 + 视频 + 二维码 + 网页 + markdown + svg等音视频、多媒体渲染的处理工具集</p>
</div>
<p><strong>源码地址</strong></p>
<ul>
<li>github: <a href="https://github.com/liuyueyi/quick-media" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/quick-media</a></li>
<li>gitee: <a href="https://gitee.com/liuyueyi/quick-media" target="_blank" rel="noopener noreferrer">https://gitee.com/liuyueyi/quick-media</a></li>
</ul>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="/tutorial/git/quick-media/" target="blank">quick-media</a></li>
<li><a href="/tutorial/git/quick-media/qrcode/" target="blank">二维码插件</a></li>
</ul>
<h3> quick-chinese-transfer</h3>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>简体中文，繁体中文，香港繁体，台湾繁体 相互转换的Java库</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>指南</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">指南</source>
      <description>功能亮点 Bar baz ... Foo ray ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 功能亮点</h2>
<h3> Bar</h3>
<ul>
<li><a href="/tutorial/guide/bar/baz.html" target="blank">baz</a></li>
<li>...</li>
</ul>
<h3> Foo</h3>
<ul>
<li><a href="/tutorial/guide/foo/ray.html" target="blank">ray</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Spring系列专栏</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Spring系列专栏</source>
      <description>Spring系列文章 Spring-Boot-Demo</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Spring系列文章</h2>
<h1> Spring-Boot-Demo</h1>
<a href="https://blog.hhui.top" target="_blank">
    <img src="https://img.shields.io/badge/-微信关注“一灰灰blog”公众号-orange.svg" alt="#" align="right">
</a>
<p><a href="https://travis-ci.org/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer"><img src="https://travis-ci.org/liuyueyi/spring-boot-demo.svg?branch=master" alt="Build Status" loading="lazy"></a>
<a href="http://isitmaintained.com/project/liuyueyi/spring-boot-demo" title="Average time to resolve an issue" target="_blank" rel="noopener noreferrer"><img src="http://isitmaintained.com/badge/resolution/liuyueyi/spring-boot-demo.svg" alt="Average time to resolve an issue" loading="lazy"></a>
<a href="http://isitmaintained.com/project/liuyueyi/spring-boot-demo" title="Percentage of issues still open" target="_blank" rel="noopener noreferrer"><img src="http://isitmaintained.com/badge/open/liuyueyi/spring-boot-demo.svg" alt="Percentage of issues still open" loading="lazy"></a></p>
<blockquote>
<p>SpringBoot + SpringCloud + SpringSecurity学习过程中的源码汇总，沉淀记录下学习历程</p>
</blockquote>
<p>欢迎关注公众号 <code>一灰灰blog</code> 更多干货持续分享</p>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="QrCode" tabindex="0" loading="lazy"><figcaption>QrCode</figcaption></figure>
<h2> 0. 项目说明</h2>
<p>如果想在本机使用这个项目的demo，下面有一些注意事项</p>
<p>环境要求</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IDEA插件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. 知识点图谱</h2>
<p>所有博文集中发布在个人博客网站 ： <a href="http://spring.hhui.top/" target="_blank" rel="noopener noreferrer">一灰灰Blog-Spring</a></p>
<p>大致规划的内容包括以下章节，希望能用<del>半年到一年(严重超期)</del>的时间完成....</p>
<h3> I. <a href="http://spring.hhui.top/spring-blog/categories/SpringBoot/%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">基础篇</a></h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> <a href="http://spring.hhui.top/spring-blog/tags/Config/" target="_blank" rel="noopener noreferrer">配置相关</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> <a href="http://spring.hhui.top/spring-blog/tags/Bean/" target="_blank" rel="noopener noreferrer">Bean相关</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> <a href="http://spring.hhui.top//spring-blog/tags/Log/" target="_blank" rel="noopener noreferrer">日志相关</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> <a href="http://spring.hhui.top//spring-blog/tags/AOP/" target="_blank" rel="noopener noreferrer">AOP相关</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> <a href="https://spring.hhui.top/spring-blog/tags/SpEL/" target="_blank" rel="noopener noreferrer">SPEL</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> <a href="https://spring.hhui.top/spring-blog/tags/EventListener/" target="_blank" rel="noopener noreferrer">事件通知机制</a></label></li>
</ul>
<h3> II. 高级篇</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> <a href="http://spring.hhui.top/spring-blog/tags/DB/" target="_blank" rel="noopener noreferrer">db读写</a></label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 基本配置，数据源，多数据源</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> <a href="http://spring.hhui.top/spring-blog/tags/JdbcTemplate/" target="_blank" rel="noopener noreferrer">jdbcTemplate</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> <a href="http://spring.hhui.top/spring-blog/tags/JPA/" target="_blank" rel="noopener noreferrer">jpa</a></label>
<ul>
<li>项目工程： <a href="spring-boot/102-jpa">spring-boot/102-jpa</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> mybatis</label>
<ul>
<li>项目工程:  <a href="spring-boot/103-mybatis-xml">spring-boot/103-mybatis-xml</a> , <a href="spring-boot/104-mybatis-noxml">spring-boot/104-mybatis-noxml</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> mybatis plus</label>
<ul>
<li>项目工程: <a href="spring-boot/105-mybatis-plus">spring-boot/105-mybatis-plus</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> <a href="http://spring.hhui.top/spring-blog/tags/Jooq/" target="_blank" rel="noopener noreferrer">Jooq</a></label>
<ul>
<li>项目工程: <a href="spring-boot/108-jooq-curd">spring-boot/108-jooq-curd</a>, <a href="spring-boot/108-jooq-mysql">spring-boot/108-jooq-mysql</a></li>
</ul>
</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> influxdb 时序数据库
- 项目工程: <a href="spring-boot/130-influxdb">spring-boot/130-influxdb</a> ,  <a href="spring-boot/131-influxdb-java">spring-boot/131-influxdb-java</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> <a href="http://spring.hhui.top/spring-blog/tags/Mongo/" target="_blank" rel="noopener noreferrer">Mongo</a></label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> 项目工程</label>
<ul>
<li>基础环境 <a href="spring-boot/110-mongo-basic">spring-boot/110-mongo-basic</a></li>
<li>mongoTemplate使用姿势 <a href="spring-boot/111-mongo-template">spring-boot/111-mongo-template</a></li>
</ul>
</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> <a href="http://spring.hhui.top/spring-blog/tags/Redis/" target="_blank" rel="noopener noreferrer">Redis读写</a></label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> 项目工程：</label>
<ul>
<li>基本环境构建 <a href="spring-boot/120-redis-config">spring-boot/120-redis-config</a></li>
<li>jedis环境构建  <a href="spring-boot/121-redis-jedis-config">spring-boot/121-redis-jedis-config</a></li>
<li>redisTemplate使用姿势 <a href="spring-boot/122-redis-template">spring-boot/122-redis-template</a></li>
<li>lettuce环境构建 <a href="spring-boot/123-redis-lettuce-config">spring-boot/123-redis-lettuce-config</a></li>
<li>redis集群实例工程 <a href="spring-boot/124-redis-cluster">spring-boot/124-redis-cluster</a></li>
<li>排行榜应用实例工程 <a href="spring-case/120-redis-ranklist">spring-case/120-redis-ranklist</a></li>
<li>站点统计应用实例工程 <a href="spring-case/124-redis-sitecount">spring-case/124-redis-sitecount</a></li>
</ul>
</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> MemCache</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> InfluxDb</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> 项目工程：<a href="spring-boot/130-influxdb">spring-boot/130-influxdb</a></label></li>
<li><a href="https://blog.hhui.top/hexblog/categories/DB/InfluxDB/" target="_blank" rel="noopener noreferrer">InfluxDB系列博文</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-21" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-21"> SpringCache</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-22" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-22"> 项目工程：<a href="spring-boot/125-cache-ano">spring-boot/125-cache-ano</a></label></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-23" disabled="disabled"><label class="task-list-item-label" for="task-item-23"> 定时器</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-24" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-24"> 搜索 ES</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-25" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-25"> 项目工程: <a href="spring-boot/142-search-es">spring-boot/142-search-es</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-26" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-26"> <a href="https://spring.hhui.top/spring-blog/tags/ElasticSearch/" target="_blank" rel="noopener noreferrer">ES系列博文</a></label></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-27" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-27"> 搜索 <a href="http://spring.hhui.top/spring-blog/tags/Solr/" target="_blank" rel="noopener noreferrer">Solr</a></label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-28" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-28"> 项目工程：<a href="spring-boot/140-search-solr">spring-boot/140-search-solr</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-29" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-29"> <a href="http://spring.hhui.top/spring-blog/2019/05/10/190510-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87%E6%90%9C%E7%B4%A2%E4%B9%8BSolr%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener noreferrer">基本环境搭建</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-30" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-30"> <a href="http://spring.hhui.top/spring-blog/2019/05/26/190526-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87%E6%90%9C%E7%B4%A2Solr%E4%B9%8B%E6%96%87%E6%A1%A3%E6%96%B0%E5%A2%9E%E4%B8%8E%E4%BF%AE%E6%94%B9%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">新增与修改使用说明</a></label></li>
</ul>
</li>
</ul>
<h3> III. MVC篇</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-31" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-31"> 过滤器</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-32" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-32"> 项目工程:</label>
<ul>
<li>基本使用姿势：<a href="spring-boot/210-web-filter">spring-boot/210-web-filter</a></li>
<li>filter优先级: <a href="spring-boot/210-web-filter-order">spring-boot/210-web-filter-order</a></li>
</ul>
</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-33" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-33"> 拦截器</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-34" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-34"> 项目工程：<a href="spring-boot/213-web-interceptor">spring-boot/213-web-interceptor</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-35" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-35"> 基本使用姿势: <a href="https://spring.hhui.top/spring-blog/tags/Interceptor/" target="_blank" rel="noopener noreferrer">拦截器</a></label></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-36" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-36"> Get/Post/Put/Delete等http方法支持</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-37" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-37"> 参数绑定(get/post参数解析，自定义参数解析器)</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-38" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-38"> 项目工程: <a href="spring-boot/202-web-params">spring-boot/202-web-params</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-39" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-39"> <a href="http://spring.hhui.top/spring-blog/tags/%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/" target="_blank" rel="noopener noreferrer">请求参数解析姿势大全</a></label></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-40" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-40"> 返回相关</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-41" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-41"> 数据返回</label>
<ul>
<li>项目:<a href="spring-boot/207-web-response">spring-boot/207-web-response</a></li>
<li><a href="http://spring.hhui.top/spring-blog/tags/%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener noreferrer">返回数据姿势大全</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-42" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-42"> 视图绑定,</label>
<ul>
<li>项目: <a href="spring-boot/204-web-freemaker">spring-boot/204-web-freemaker</a> | <a href="spring-boot/205-web-thymeleaf">spring-boot/204-web-thymeleaf</a> <a href="spring-boot/206-web-beetl">spring-boot/204-web-beetl</a></li>
<li><a href="http://spring.hhui.top/spring-blog/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/" target="_blank" rel="noopener noreferrer">spring &amp; 模板引擎构建web项目</a></li>
</ul>
</li>
<li>返回头</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-43" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-43"> 异常处理</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-44" disabled="disabled"><label class="task-list-item-label" for="task-item-44"> 安全相关(SQL/XSS等注入)</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-45" disabled="disabled"><label class="task-list-item-label" for="task-item-45"> 跨域处理</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-46" disabled="disabled"><label class="task-list-item-label" for="task-item-46"> WebSocket</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-47" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-47"> <a href="http://spring.hhui.top/spring-blog/tags/WebSocket/" target="_blank" rel="noopener noreferrer">websocket基础</a></label></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-48" disabled="disabled"><label class="task-list-item-label" for="task-item-48"> reactive</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-49" disabled="disabled"><label class="task-list-item-label" for="task-item-49"> <a href="https://spring.hhui.top/spring-blog/tags/WebFlux/" target="_blank" rel="noopener noreferrer">webflux</a></label></li>
</ul>
</li>
</ul>
<h3> IV. SpringCloud篇</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-50" disabled="disabled"><label class="task-list-item-label" for="task-item-50"> 注册中心</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-51" disabled="disabled"><label class="task-list-item-label" for="task-item-51"> 配置中心</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-52" disabled="disabled"><label class="task-list-item-label" for="task-item-52"> 网关路由</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-53" disabled="disabled"><label class="task-list-item-label" for="task-item-53"> 负载均衡</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-54" disabled="disabled"><label class="task-list-item-label" for="task-item-54"> 熔断器</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-55" disabled="disabled"><label class="task-list-item-label" for="task-item-55"> 链路监控</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-56" disabled="disabled"><label class="task-list-item-label" for="task-item-56"> 安全模块</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-57" disabled="disabled"><label class="task-list-item-label" for="task-item-57"> oauth</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-58" disabled="disabled"><label class="task-list-item-label" for="task-item-58"> admin</label></li>
</ul>
<h3> V. 源码篇</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-59" disabled="disabled"><label class="task-list-item-label" for="task-item-59"> 扩展点</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-60" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-60"> <a href="/tutorial/spring/spring-extention/" target="blank">项目</a></label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-61" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-61"> <a href="https://spring.hhui.top/spring-blog/categories/Spring%E6%BA%90%E7%A0%81/%E6%89%A9%E5%B1%95%E7%82%B9/" target="_blank" rel="noopener noreferrer">Spring扩展点专栏</a></label></li>
</ul>
</li>
</ul>
<h3> VI. 项目说明</h3>
<details><summary> 项目说明 </summary>
<table>
<thead>
<tr>
<th>项目</th>
<th>说明</th>
<th>知识点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SpringBoot</strong></td>
<td>SpringBoot项目</td>
<td>-</td>
</tr>
<tr>
<td><a href="spring-boot/000-properties">000-properties</a></td>
<td>【配置】使用姿势</td>
<td><code>@PropertySource</code> 指定配置文件，<br> <code>@ConfigurationProperties</code> 指定配置前缀, <br><code>@value</code> 配置绑定</td>
</tr>
<tr>
<td><a href="spring-boot/001-properties">001-properties</a></td>
<td>【配置】环境选择</td>
<td>配置<code>spring.profiles.active</code>指定环境</td>
</tr>
<tr>
<td><a href="spring-boot/002-properties">002-properties</a></td>
<td>【配置】刷新示例</td>
<td>SpringCloud生态配置刷新<br><code>@RefreshScope</code>，<code>EnvironmentChangeEvent</code>配置变更事件</td>
</tr>
<tr>
<td><a href="spring-boot/002-properties-bind">002-properties-bind</a></td>
<td>【配置】刷新绑定的各种知识点</td>
<td><code>@ConfigurationProperties</code></td>
</tr>
<tr>
<td><a href="spring-boot/002-dynamic-envronment">002-dynamic-envronment</a></td>
<td>【配置】自定义配置源</td>
<td><code>MapPropertySource</code></td>
</tr>
<tr>
<td><a href="spring-boot/002-properties-value">002-properties-value</a></td>
<td>【配置】@Value扩展知识点</td>
<td><code>@Value</code></td>
</tr>
<tr>
<td><a href="spring-boot/003-log">003-log</a></td>
<td>【日志】集成logback</td>
<td>logback日志集成与配置</td>
</tr>
<tr>
<td><a href="spring-boot/003-log4j2">003-log4j2</a></td>
<td>【日志】集成log4j2</td>
<td>log4j2日志集成与配置</td>
</tr>
<tr>
<td><a href="spring-boot/004-bean">004-bean</a></td>
<td>【bean】使用姿势</td>
<td>bean三种定义姿势 <br> bean三种注入方式</td>
</tr>
<tr>
<td><a href="spring-boot/005-autoconfig">005-autoconfig</a></td>
<td>【bean】自动加载</td>
<td><code>@Configuration</code>自动加载配置类</td>
</tr>
<tr>
<td><a href="spring-boot/005-config-selector">005-config-selector</a></td>
<td>【bean】选择注入</td>
<td><code>ImportSelector</code> 选择在接口的多个实现中，具体实例化哪个</td>
</tr>
<tr>
<td><a href="spring-boot/006-dynamicbean">006-dynamicbean</a></td>
<td>【bean】动态注册bean</td>
<td><code>BeanDefinitionRegistryPostProcessor</code> 扩展实现bean动态注册</td>
</tr>
<tr>
<td><a href="spring-boot/007-conditionbean">007-conditionbean</a></td>
<td>【bean】条件注入</td>
<td><code>@Coinditional</code> 使用姿势</td>
</tr>
<tr>
<td><a href="spring-boot/008-beanorder">008-beanorder</a><br><a href="spring-boot/008-beanorder-addition">008-beanorder-addition</a><br> <a href="spring-boot/008-beanorder-addition2">008-beanorder-addition2</a></td>
<td>【bean】加载顺序</td>
<td>bean加载顺序的反面示例与正确写法</td>
</tr>
<tr>
<td><a href="spring-boot/009-schedule">009-schedule</a></td>
<td>【定时器】定时任务/计划任务</td>
<td><code>@Scheduled</code> 基本语法与自定义线程池</td>
</tr>
<tr>
<td><a href="spring-boot/010-aop">010-aop</a></td>
<td>【AOP】切面</td>
<td>aop基本使用姿势与注意事项</td>
</tr>
<tr>
<td><a href="spring-boot/011-aop-logaspect">011-aop-logaspect</a></td>
<td>【AOP】切面</td>
<td>实战，日志切面</td>
</tr>
<tr>
<td><a href="spring-boot/012-context-listener">012-context-listener</a></td>
<td>【Listener】事件</td>
<td>ContextListener</td>
</tr>
<tr>
<td><a href="spring-boot/013-spel">013-spel</a></td>
<td>【SpEL】</td>
<td>SpEL语法与实例</td>
</tr>
<tr>
<td><a href="spring-boot/014-spel-aop">014-spel-aop</a></td>
<td>【SpEL】</td>
<td>SpEL &amp; aop整合时注意事项</td>
</tr>
<tr>
<td><a href="spring-boot/100-h2database">100-h2database</a></td>
<td>【DB】h2database整合</td>
<td>-</td>
</tr>
<tr>
<td><a href="spring-boot/100-mysql">100-mysql</a></td>
<td>【DB】mysql整合</td>
<td>-</td>
</tr>
<tr>
<td><a href="spring-boot/101-jdbctemplate">101-jdbctemplate</a></td>
<td>【DB】jdbctemplate使用姿势 CURD详解</td>
<td><code>JdbcTemplate</code></td>
</tr>
<tr>
<td><a href="spring-boot/101-jdbctemplate-transaction">101-jdbctemplate-transaction</a></td>
<td>【DB】事务</td>
<td><code>@Transactional</code>声明式; 编程式事务 <br> - 隔离级别 <br> 传递属性</td>
</tr>
<tr>
<td><a href="spring-boot/102-jpa">102-jpa</a></td>
<td>【DB】 jpa使用姿势</td>
<td>JPA</td>
</tr>
<tr>
<td><a href="spring-boot/102-jpa-errorcase">102-jpa-errorcase</a></td>
<td>【DB】环境配置易错点</td>
<td><code>@EnableJpaRepositories</code>, <code>@EntityScan</code>指定扫描包</td>
</tr>
<tr>
<td><a href="spring-boot/102-jpa-errorcase2">102-jpa-errorcase2</a></td>
<td>【DB】Entity映射错误</td>
<td>Field映射POJO</td>
</tr>
<tr>
<td><a href="spring-boot/103-mybatis-xml">103-mybatis-xml</a></td>
<td>【DB】mybatis xml配置整合方式</td>
<td>mybatis</td>
</tr>
<tr>
<td><a href="spring-boot/104-mybatis-noxml">104-mybatis-noxml</a></td>
<td>【DB】mybatis 注解整合方式</td>
<td>mybatis</td>
</tr>
<tr>
<td><a href="spring-boot/105-mybatis-plus">105-mybatis-plus</a></td>
<td>【DB】mybatis-plus整合</td>
<td>mybatis-plus</td>
</tr>
<tr>
<td><a href="spring-boot/106-mybatis-plus-generator">106-mybatis-plus-generator</a></td>
<td>【DB】mybatis-plus代码自动生成</td>
<td>mybatis-plus</td>
</tr>
<tr>
<td><a href="spring-boot/107-jooq-aop">107-jooq-aop</a></td>
<td>【DB】jooq体验demo，jooq+aop导致项目启动巨慢的坑</td>
<td>jooq</td>
</tr>
<tr>
<td><a href="spring-boot/108-jooq-curd">108-jooq-curd</a></td>
<td>【DB】jooq CURD使用姿势</td>
<td>jooq</td>
</tr>
<tr>
<td><a href="spring-boot/108-jooq-mysql">108-jooq-mysql</a></td>
<td>【DB】jooq代码自动生成</td>
<td>jooq-code-gen</td>
</tr>
<tr>
<td><a href="spring-boot/109-multi-datasource">109-multi-datasource</a></td>
<td>【DB】多数据源配置</td>
<td>JdbcTemplate, DataSource</td>
</tr>
<tr>
<td><a href="spring-boot/109-multi-datasource-mybatis">109-multi-datasource-mybatis</a></td>
<td>【DB】mybatis多数据源配置</td>
<td>Mybatis DataSource</td>
</tr>
<tr>
<td><a href="spring-boot/109-multi-datasource-mybatis-ano">109-multi-datasource-mybatis-ano</a></td>
<td>【DB】mybatis多数据源配置</td>
<td>Mybatis DataSource</td>
</tr>
<tr>
<td><a href="spring-boot/109-multi-datasource-mybatis-plus">109-multi-datasource-mybatis-plus</a></td>
<td>【DB】mybatis-plus多数据源配置</td>
<td>Mybatis-Plus DataSource</td>
</tr>
<tr>
<td><a href="spring-boot/110-mongo-basic">110-mongo-basic</a></td>
<td>【DB】mongodb整合</td>
<td>mongodb</td>
</tr>
<tr>
<td><a href="spring-boot/111-mongo-template">111-mongo-template</a></td>
<td>【DB】mongodb CURD使用姿势</td>
<td><code>MongoTemplate</code></td>
</tr>
<tr>
<td><a href="spring-boot/120-redis-config">120-redis-config</a></td>
<td>【redis】环境配置与基本使用</td>
<td>redis</td>
</tr>
<tr>
<td><a href="spring-boot/121-redis-jedis-config">121-redis-jedis-config</a></td>
<td>【redis】jedis配置</td>
<td>jedis</td>
</tr>
<tr>
<td><a href="spring-boot/122-redis-template">122-redis-template</a></td>
<td>【redis】RedisTemplate 使用姿势详解</td>
<td><code>RedisTemplate</code></td>
</tr>
<tr>
<td><a href="spring-boot/123-redis-lettuce-config">123-redis-lettuce-config</a></td>
<td>【redis】lettuce配置</td>
<td>lettuce</td>
</tr>
<tr>
<td><a href="spring-boot/124-redis-cluster">124-redis-cluster</a></td>
<td>【redis】集群使用姿势</td>
<td>redis集群实例</td>
</tr>
<tr>
<td><a href="spring-boot/125-cache-ano">125-cache-ano</a></td>
<td>【Cache】缓存注解</td>
<td>Spring缓存注解使用姿势</td>
</tr>
<tr>
<td><a href="spring-boot/130-influxdb">130-influxdb</a></td>
<td>【DB】influxdb整合及CURD</td>
<td>时序数据库 influxdb</td>
</tr>
<tr>
<td><a href="spring-boot/131-influxdb-java">131-influxdb-java</a></td>
<td>【DB】influxdb封装</td>
<td>封装更服务SpringBoot规范的<code>InfluxTemplate</code>，待实现</td>
</tr>
<tr>
<td><a href="spring-boot/140-search-solr">140-search-solr</a></td>
<td>【Solr】solr环境+CURD使用姿势</td>
<td><code>SolrTemplate</code>, <code>SolrClient</code></td>
</tr>
<tr>
<td><a href="spring-boot/141-search-solr-auth">141-search-solr-auth</a></td>
<td>【Solr】solr开启授权无法更新索引的四种解决方案</td>
<td>解决solr更新索引报错问题</td>
</tr>
<tr>
<td><a href="spring-boot/142-search-es">142-search-es</a></td>
<td>【ES】es实例使用demo</td>
<td>ES，权限验证，CURD，高级特性等 <code>RestHighLevelClient</code></td>
</tr>
<tr>
<td><a href="spring-boot/150-i18n">150-i18n</a></td>
<td>【i18n】国际化</td>
<td>国际化支持</td>
</tr>
<tr>
<td><a href="spring-boot/161-schema-init">161-schema-init</a></td>
<td>【DB】数据初始化</td>
<td>数据初始化</td>
</tr>
<tr>
<td><a href="spring-boot/162-liquibase">162-liquibase</a></td>
<td>【DB】Liquibase</td>
<td>Liquibase数据库版本管理</td>
</tr>
<tr>
<td><a href="spring-boot/200-webflux">200-webflux</a></td>
<td>【web】WebFlux实例</td>
<td><code>React</code></td>
</tr>
<tr>
<td><a href="spring-boot/201-web">201-web</a></td>
<td>【web】basic http实例</td>
<td><code>springmvc</code></td>
</tr>
<tr>
<td><a href="spring-boot/202-web-params">202-web-params</a></td>
<td>【web】请求参数解析的各种姿势</td>
<td>get参数解析<br>post参数解析<br>自定义参数解析<code>HandlerMethodArgumentResolver</code></td>
</tr>
<tr>
<td><a href="spring-boot/202-web-params-validate">202-web-params-validate</a></td>
<td>【web】请求参数校验</td>
<td>参数校验validation-api</td>
</tr>
<tr>
<td><a href="spring-boot/203-websocket">203-websocket</a></td>
<td>【web】websocket实例</td>
<td><code>WebSocketHandler</code>, <code>WebSocketConfigurer</code></td>
</tr>
<tr>
<td><a href="spring-boot/204-web-static-resources">204-web-static-resources</a></td>
<td>【web】静态资源访问实例</td>
<td><code>WebMvcConfigure</code>, <code>spring.resources.static-locations</code></td>
</tr>
<tr>
<td><a href="spring-boot/204-web-static-resources-ui">204-web-static-resources-ui</a></td>
<td>【web】webjar静态资源</td>
<td>第三方jar包提供纯静态资源</td>
</tr>
<tr>
<td><a href="spring-boot/204-web-xml">204-web-xml</a></td>
<td>【web】xml传参与返回实例</td>
<td>xml传参返回使用姿势</td>
</tr>
<tr>
<td><a href="spring-boot/204-web-xml-json">204-web-xml-json</a></td>
<td>【web】自定义返回数据类型的几种方式</td>
<td>返回xml，返回json，请求头、返回头，内容协商<code>ContentNegotiationConfigurer</code></td>
</tr>
<tr>
<td><a href="spring-boot/204-web-freemaker">204-web-freemaker</a></td>
<td>【web】freemaker引擎整合</td>
<td>freemaker</td>
</tr>
<tr>
<td><a href="spring-boot/205-web-thymeleaf">205-web-thymeleaf</a></td>
<td>【web】thymeleaf引擎整合</td>
<td>thymeleaf</td>
</tr>
<tr>
<td><a href="spring-boot/206-web-beetl">206-web-beetl</a></td>
<td>【web】beetl引擎整合</td>
<td>beetl</td>
</tr>
<tr>
<td><a href="spring-boot/207-web-response">207-web-response</a></td>
<td>【web】http响应的各种姿势</td>
<td>基本数据返回 <br> 重定向 <br> 错误页面配置 <br> 定制http code</td>
</tr>
<tr>
<td><a href="spring-boot/208-web-mapping">208-web-mapping</a></td>
<td>【web】自定义url映射规则</td>
<td><code>RequestCondition</code></td>
</tr>
<tr>
<td><a href="spring-boot/209-web-error">209-web-error</a></td>
<td>【web】全局异常处理</td>
<td><code>ControllerAdvice</code>, <code>ExceptionHandler</code></td>
</tr>
<tr>
<td><a href="spring-boot/210-web-filter">210-web-filter</a></td>
<td>【web】filter使用姿势</td>
<td>HttpFilter过滤器</td>
</tr>
<tr>
<td><a href="spring-boot/210-web-filter-order">210-web-filter-order</a></td>
<td>【web】filter优先级使用姿势</td>
<td><code>HttpFilter</code>, <code>@Order</code></td>
</tr>
<tr>
<td><a href="spring-boot/211-web-servlet">211-web-servlet</a></td>
<td>【web】servlet使用姿势</td>
<td>Servlet</td>
</tr>
<tr>
<td><a href="spring-boot/212-web-listener">212-web-listener</a></td>
<td>【web】listener知识点</td>
<td>Listener</td>
</tr>
<tr>
<td><a href="spring-boot/219-web-asyn">219-web-asyn</a></td>
<td>【web】异步请求</td>
<td><code>AsyncContext方式</code> <br> <code>Callable</code> <br> <code>WebAsyncTask</code> <br><code>DeferredResult</code></td>
</tr>
<tr>
<td><a href="spring-boot/220-web-sse">220-web-sse</a></td>
<td>【web】sse 服务器发送事件</td>
<td><code>SseEmitter</code></td>
</tr>
<tr>
<td><a href="spring-boot/221-web-resttemplate">221-web-resttemplate</a></td>
<td>【web】RestTemplate使用姿势</td>
<td><code>RestTemplate</code></td>
</tr>
<tr>
<td><a href="spring-boot/222-web-client">222-web-client</a></td>
<td>【web】WebClient使用姿势</td>
<td><code>WebClient</code></td>
</tr>
<tr>
<td><a href="spring-boot/223-webflux-params">223-webflux-params</a></td>
<td>【web】webflux参数解析实例demo</td>
<td><code>webflux</code></td>
</tr>
<tr>
<td><a href="spring-boot/230-web-resin">230-web-resin</a></td>
<td>【web】resion容器整合</td>
<td><code>resin</code></td>
</tr>
<tr>
<td><a href="spring-boot/300-rabbitmq">300-rabbitmq</a></td>
<td>【web】rabbitmq整合</td>
<td>rabbitmq</td>
</tr>
<tr>
<td><a href="spring-boot/301-rabbitmq-publish">301-rabbitmq-publish</a></td>
<td>【web】rabbitmq发送消息</td>
<td><code>RabbitTemplate</code> <br> 消息确认模式 <br> 事务模式</td>
</tr>
<tr>
<td><a href="spring-boot/302-rabbitmq-consumer">302-rabbitmq-consumer</a></td>
<td>【web】rabbitmq消费消息姿势</td>
<td><code>@RabbitListener</code></td>
</tr>
<tr>
<td><a href="spring-boot/400-docker-demo">400-docker-demo</a></td>
<td>【docker】docker整合</td>
<td><code>Dockerfile</code></td>
</tr>
<tr>
<td><a href="spring-boot/410-zookeeper-basic">410-zookeeper-basic</a></td>
<td>【中间件】zk使用姿势</td>
<td><code>ZooKeeper</code></td>
</tr>
<tr>
<td><a href="spring-boot/411-zookeeper-distributelock">411-zookeeper-distributelock</a></td>
<td>【中间件】zk 分布式锁</td>
<td><code>DistributeLock</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>SpringCase</strong></td>
<td>实战/应用演练项目</td>
<td>-</td>
</tr>
<tr>
<td><a href="spring-case/000-spi-factorybean">000-spi-factorybean</a></td>
<td>借助FactoryBean实现SPI效果</td>
<td><code>FactoryBean</code></td>
</tr>
<tr>
<td><a href="spring-case/002-dynamic-config">002-dynamic-config</a> <br> <a href="spring-case/002-dynamic-config-demo">002-dynamic-config-demo</a></td>
<td>自定义配置加载与刷新示例工程</td>
<td>借助<code>InstantiationAwareBeanPostProcessorAdapter</code> + Spring事件机制实现<code>@Value</code> <code>@RefreshScope</code></td>
</tr>
<tr>
<td><a href="spring-case/006-importbean">006-importbean</a></td>
<td>将非spring项目导入Spring生态 <br> 自定义注入实例</td>
<td><code>ImportBeanDefinitionRegistrar</code></td>
</tr>
<tr>
<td><a href="spring-case/008-bean-order">008-bean-order</a><br><a href="spring-case/008-bean-order-client">008-bean-order-client</a></td>
<td>指定bean加载优先级，让中间件的核心bean优于业务bean被加载</td>
<td><code>InstantiationAwareBeanPostProcessorAdapter</code>, <code>@Import</code></td>
</tr>
<tr>
<td><a href="spring-case/009-distribute-scheduler-task">009-distribute-scheduler-task</a></td>
<td>分布式定时任务mock实例</td>
<td>AOP实现定时任务选择; 重写<code>ScheduledAnnotationBeanPostProcessor</code>扩展定时任务生成</td>
</tr>
<tr>
<td><a href="spring-case/010-auto-inject">010-auto-inject</a></td>
<td>自定义注入实现</td>
<td><code>BeanPostProcessor</code> 与 代理类创建</td>
</tr>
<tr>
<td><a href="spring-case/120-redis-ranklist">120-redis-ranklist</a></td>
<td>redis实现排行榜</td>
<td><code>zset</code></td>
</tr>
<tr>
<td><a href="spring-case/124-redis-sitecount">124-redis-sitecount</a></td>
<td>redis实现站点统计</td>
<td><code>redisTemplate</code></td>
</tr>
<tr>
<td><a href="spring-case/125-redis-distribuet-lock">125-redis-distribuet-lock</a></td>
<td>redis分布式锁</td>
<td><code>redisTemplate</code></td>
</tr>
<tr>
<td><a href="spring-case/126-redis-delay-list">126-redis-delay-list</a></td>
<td>redis实现的演示队列</td>
<td><code>redisTemplate</code></td>
</tr>
<tr>
<td><a href="spring-case/201-web-api-version">201-web-api-version</a></td>
<td>web版本控制</td>
<td><code>RequestMappingHandlerMapping</code></td>
</tr>
<tr>
<td><a href="spring-case/202-web-qrcode-login">202-web-qrcode-login</a></td>
<td>web扫码登录实战</td>
<td><code>SseEmitter</code></td>
</tr>
<tr>
<td><a href="spring-case/203-web-rest-adapter">203-web-rest-adapter</a></td>
<td>url匹配规则自定义，子类继承父类的参数注解</td>
<td><code>RequestMappingHandlerMapping</code>, <code>HandlerMethodArgumentResolver</code></td>
</tr>
<tr>
<td><a href="spring-case/204-web-request-proxy">204-web-request-proxy</a></td>
<td>基于接口的REST访问支持</td>
<td><code>ClassPathBeanDefinitionScanner</code>, <code>ImportBeanDefinitionRegistrar</code></td>
</tr>
<tr>
<td><a href="spring-case/205-web-rest-enhanced">205-web-rest-enhanced</a></td>
<td>单机应用最小成本扩展REST服务示例</td>
<td><code>RequestMappingHandlerMapping</code></td>
</tr>
<tr>
<td><a href="spring-case/421-prometheus-metric">421-prometheus-metric</a></td>
<td>AOP实现自定义的Prometheus埋点上报</td>
<td><code>Prometheus</code></td>
</tr>
<tr>
<td><a href="spring-case/430-mail-alarm">430-mail-alarm</a></td>
<td>基于日志的邮件报警</td>
<td><code>javaMailSender</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>SpringSecurity</strong></td>
<td>安全</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/000-basic-demo">000-basic-demo</a></td>
<td>整合实例</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/001-authentication-mem-config">001-authentication-mem-config</a></td>
<td>内存认证</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/001-authentication-mem-userdetail">001-authentication-mem-userdetail</a></td>
<td>内存认证</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/002-authentication-db">002-authentication-db</a></td>
<td>db认证</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/010-accesscontrol-rbac">010-accesscontrol-rbac</a></td>
<td>rbac 权限管理</td>
<td></td>
</tr>
<tr>
<td><a href="spring-security/011-accesscontrol-acl">011-accesscontrol-acl</a></td>
<td>acl权限管理</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>spring-cloud</strong></td>
<td>微服务</td>
<td></td>
</tr>
<tr>
<td><a href="spring-cloud/config-server">config-server</a></td>
<td>配置中心</td>
<td>spring cloud config</td>
</tr>
<tr>
<td><a href="spring-cloud/eurka-server">eurka-server</a></td>
<td>注册中心</td>
<td>spring cloud eurka</td>
</tr>
<tr>
<td><a href="spring-cloud/eurka-service-consumer">eurka-service-consumer</a></td>
<td>服务提供者</td>
<td>spring cloud eurka</td>
</tr>
<tr>
<td><a href="spring-cloud/eurka-service-provider">eurka-service-provider</a></td>
<td>服务消费者</td>
<td>ribbon feign</td>
</tr>
<tr>
<td><a href="spring-cloud/gateway">gateway</a></td>
<td>网关</td>
<td>spring cloud gateway 网关</td>
</tr>
<tr>
<td><strong>spring-extention</strong></td>
<td>Spring的扩展点</td>
<td></td>
</tr>
<tr>
<td><a href="spring-extention/100-application-context-extend">100-application-context-extend</a></td>
<td>上下文刷新前扩展点ApplicationContextInitializer</td>
<td>ApplicationContextInitializer</td>
</tr>
</tbody>
</table>
</details>
<h2> 2. 系列博文</h2>
<h3> 0. 实战系列</h3>
<ol>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】Bean之注销与动态注册实现服务mock</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/24/181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】FactoryBean及代理实现SPI机制的实例</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】借助Redis实现排行榜功能</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】借助Redis搭建一个简单站点统计服务</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/13/190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】AOP实现日志功能</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/02/200402-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BE%92%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E5%B7%A5%E7%A8%8B/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】徒手撸一个扫码登录示例工程</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/12/200412-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】mock一个简单的分布式定时任务</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/30/201030-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%89/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】Redis实现分布式锁（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/05/210805-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E5%80%9F%E5%8A%A9redis%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/" target="_blank" rel="noopener noreferrer">【SpringBoot实战】借助redis来实现延时队列（应用篇）</a></li>
</ol>
<h3> 1. 基础系列</h3>
<p>基础系列博文包括 AOP, IoC(DI,Bean), 日志, 自动配置等</p>
<p><strong>配置</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之如何读取配置信息</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之多环境配置信息</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之配置刷新</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置信息之默认配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个自定义配置加载器（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/26/201226-SpringBoot%E7%B3%BB%E5%88%97PropertySource%E5%8A%A0%E8%BD%BDYaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot配置篇之PropertySource加载Yaml配置文件实例演示</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/17/210117-SpringBoot%E7%B3%BB%E5%88%97ConfigurationProperties%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E4%B8%AD%E9%82%A3%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85/" target="_blank" rel="noopener noreferrer">【基础系列】ConfigurationProperties配置绑定中那些你不知道的事情</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/06/15/210615-SpringBoot%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%87-Value%E4%B9%8B%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8F%8ASpEL%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BB%8B%E7%BB%8D%E7%AF%87/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot @Value之字面量及SpEL知识点介绍篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/06/10/210610-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot之自定义配置源的使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/06/06/210606-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87-Value%E4%B8%AD%E5%93%AA%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot基础篇@Value中哪些你不知道的知识点</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/01/210801-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87-Value%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E8%83%BD%E5%8A%9B%E6%89%A9%E5%B1%95/" target="_blank" rel="noopener noreferrer">【基础系列】SpringBoot应用篇@Value注解支持配置自动刷新能力扩展</a></li>
</ul>
<p><strong>IoC(DI/bean)</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之条件注入@ConditionalOnExpression</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之多实例选择</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/23/191023-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E4%B9%8B%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%BE%9F%E8%B0%A3/" target="_blank" rel="noopener noreferrer">【配置系列】Bean加载顺序之错误使用姿势辟谣</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/29/191029-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E4%B9%8B%E6%8C%87%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【基础系列】指定Bean初始化顺序的若干姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/14/191214-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%80%89%E6%8B%A9%E7%94%9F%E6%95%88/" target="_blank" rel="noopener noreferrer">【基础系列】自动配置选择生效</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">【基础系列】Bean之注销与动态注册实现服务mock（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/24/181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/" target="_blank" rel="noopener noreferrer">【基础系列】FactoryBean及代理实现SPI机制的实例（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/13/191213-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89Bean%E6%B3%A8%E5%86%8C%E5%99%A8/" target="_blank" rel="noopener noreferrer">【基础系列】从0到1实现一个自定义Bean注册器（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/03/17/200317-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9Abean%E6%9C%80%E5%85%88%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">【基础系列-实战】如何指定bean最先加载(应用篇)</a></li>
</ul>
<p><strong>AOP相关</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【基础系列】AOP之基本使用姿势小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/02/190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD/" target="_blank" rel="noopener noreferrer">【基础系列】AOP之高级使用技能</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/10/190310-SpringCloud%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">【基础系列】AOP之拦截优先级详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/13/190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【基础系列】AOP实现一个日志插件（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/05/25/210525-SpringBoot%E6%8E%A5%E5%8F%A3%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E5%9C%BA%E6%99%AF%E5%85%BC%E5%AE%B9/" target="_blank" rel="noopener noreferrer">【基础系列】接口上注解AOP拦截不到场景兼容</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/06/08/210608-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E7%BB%93%E5%90%88SpEL%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/" target="_blank" rel="noopener noreferrer">【基础系列】Spring之AOP结合SpEL实现日志输出的注意事项</a></li>
</ul>
<p><strong>日志</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/27/180927-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【基础系列】日志管理之默认配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/29/180929-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B9%8Blogback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener noreferrer">【基础系列】日志管理之logback配置文件</a></li>
</ul>
<p><strong>定时任务</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/12/200412-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【基础系列】实现一个简单的分布式定时任务(应用篇)</a></li>
</ul>
<p><strong>SpEL</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/05/18/200518-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BSpEL%E8%AF%AD%E6%B3%95%E6%89%AB%E7%9B%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener noreferrer">【基础系列】SpEL语法扫盲与查询手册</a></li>
</ul>
<p><strong>事件</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/04/29/210429-SpringBoot%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%B6%88%E8%B4%B9%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【基础系列】事件机制的两种消费姿势</a></li>
</ul>
<p><strong>国际化</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/05/09/210509-SpringBoot%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96%E6%94%AF%E6%8C%81%E5%AE%9E%E4%BE%8B%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener noreferrer">【基础系列】国际化支持实例开发</a></li>
</ul>
<h3> 2. DB系列</h3>
<p>我们将db区分为传统的关系型数据库如mysql，NoSql如redis、mongodb，时序数据库influxdb</p>
<p><strong>h2database</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/11/200911-SpringBoot%E7%B3%BB%E5%88%97h2databse%E9%9B%86%E6%88%90%E7%A4%BA%E4%BE%8Bdemo/" target="_blank" rel="noopener noreferrer">【DB系列】h2databse集成示例demo</a></li>
</ul>
<p><strong>MongoDB</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】MongoDB之基本环境搭建与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/01/13/190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】MongoDB之查询基本使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/01/24/190124-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%A6%82%E4%BD%95%E6%96%B0%E5%A2%9E%E6%96%87%E6%A1%A3/" target="_blank" rel="noopener noreferrer">【DB系列】MongoDB之如何新增文档</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/02/18/190218-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E4%BF%AE%E6%94%B9%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】MongoDB之修改基本使用姿势</a></li>
</ul>
<p><strong>redis</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之发布订阅</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/21/201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之HyperLoglog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/27/201027-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BGEO/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之GEO</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/06/16/210616-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable-CacheEvit-CachePut%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】缓存注解@Cacheable @CacheEvit @CachePut使用姿势介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/01/210701-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89key%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E6%97%B6%E9%97%B4%E6%8C%87%E5%AE%9A/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot缓存注解@Cacheable之自定义key策略及缓存失效时间指定</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/05/210805-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E5%80%9F%E5%8A%A9redis%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/" target="_blank" rel="noopener noreferrer">【DB系列】借助redis来实现延时队列（应用篇）</a></li>
</ul>
<p><strong>mysql</strong></p>
<p>分别介绍多种不同的操作姿势</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】mysql基本项目演示</a></li>
</ul>
<blockquote>
<p>JdbcTemplate</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据更新与删除</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
</ul>
<blockquote>
<p>jpa</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之基础环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/23/190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之update使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/07/02/190702-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bdelete%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之delete使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/07/17/190717-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bquery%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之query使用姿势详解之基础篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/11/19/191119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%8C%87%E5%AE%9Aid%E4%BF%9D%E5%AD%98/" target="_blank" rel="noopener noreferrer">【DB系列】JPA之指定id保存</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/18/191218-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA-%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener noreferrer">【DB系列】JPA 错误姿势之环境配置问题</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/03/200103-SpringBoot%E7%B3%BB%E5%88%97JPA%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8BEntity%E6%98%A0%E5%B0%84/" target="_blank" rel="noopener noreferrer">【DB系列】JPA错误姿势之Entity映射</a></li>
</ul>
<blockquote>
<p>mybatis</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis基于AbstractRoutingDataSource与AOP实现多数据源切换</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus多数据源配置</a></li>
</ul>
<blockquote>
<p>事务</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">【DB系列】声明式事务Transactional</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/20/200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【DB系列】事务隔离级别知识点小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/02/200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">【DB系列】事务传递属性</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/03/200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase/" target="_blank" rel="noopener noreferrer">【DB系列】事务不生效的几种case</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/04/200204-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】编程式事务使用姿势介绍篇</a></li>
</ul>
<blockquote>
<p>采坑、填坑</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/10/191210-SpringBoot-Mysql-%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98emoj%E8%A1%A8%E6%83%85%EF%BC%9F/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot+Mysql 无法保存emoj表情</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq批量写入采坑记录</a></li>
</ul>
<blockquote>
<p>jooq</p>
</blockquote>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq初体验</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之记录更新与删除</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之记录查询基础篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/05/201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之聚合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/10/201210-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之常用函数使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/11/201211-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之多表联合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/13/201213-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E4%BA%8B%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之事务</a></li>
</ul>
<blockquote>
<p>数据初始化</p>
</blockquote>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2022/12/21/221221-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96-datasource%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】数据库初始化-datasource配置方式 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/12/21/221221-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96-jpa%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】数据库初始化-jpa配置方式 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/12/21/221221-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96-DataSourceInitializer%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】数据库初始化-DataSourceInitializer方式 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/12/22/221222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86Liquibase%E9%9B%86%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】数据库版本管理Liquibase集成 | 一灰灰Blog</a></li>
</ul>
<h3> 3. 搜索系列</h3>
<p>搜索主要会区分solr和es</p>
<p><strong>solr</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/05/10/190510-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87%E6%90%9C%E7%B4%A2%E4%B9%8BSolr%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener noreferrer">【搜索系列】Solr环境搭建与简单测试</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/05/26/190526-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87%E6%90%9C%E7%B4%A2Solr%E4%B9%8B%E6%96%87%E6%A1%A3%E6%96%B0%E5%A2%9E%E4%B8%8E%E4%BF%AE%E6%94%B9%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【搜索系列】Solr之文档新增与修改使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/14/200114-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BSolr%E4%B9%8B%E6%96%87%E6%A1%A3%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【搜索系列】Solr文档删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/15/200115-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BSolr%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【搜索系列】Solr查询使用姿势小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/03/30/200330-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BSolr%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%9B%B4%E6%96%B0%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/" target="_blank" rel="noopener noreferrer">【搜索系列】Solr身份认证与授权更新异常解决方案</a></li>
</ul>
<p><strong>es</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2022/03/28/220328-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BES%E5%9F%BA%E6%9C%AC%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【搜索系列】ES基本项目搭建</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/03/31/220331-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BES%E6%96%87%E6%A1%A3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9CCURD%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA/" target="_blank" rel="noopener noreferrer">【搜索系列】ES文档基本操作CURD实例演示</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/04/18/220418-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BES%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%B8%B8%E7%94%A8%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA/" target="_blank" rel="noopener noreferrer">【搜索系列】ES查询常用实例演示</a></li>
</ul>
<h3> 4. MQ系列</h3>
<p>消息队列，如rabbitmq, rocketmq, activemq, kafaka</p>
<p><strong>rabbitmq</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/10/200210-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRabbitMq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【MQ系列】springboot + rabbitmq初体验</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/12/200212-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRabbitMq%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【MQ系列】RabbitMq核心知识点小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/18/200218-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRabbitMq%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【MQ系列】SprigBoot + RabbitMq发送消息基本使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/19/200219-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRabbitMq%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6-%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【MQ系列】RabbitMq消息确认机制/事务的使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/03/18/200318-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRabbitListener%E6%B6%88%E8%B4%B9%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【MQ系列】RabbitListener消费基本使用姿势介绍</a></li>
</ul>
<h3> 5. WEB系列</h3>
<p>web系列的东西就比较多了，基本上日常开发中，你需要的都会有；你没用过的也会有</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/16/190316-Spring-MVC%E4%B9%8B%E5%9F%BA%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E7%9A%84web%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】Spring MVC之基于xml配置的web应用构建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/17/190317-Spring-MVC%E4%B9%8B%E5%9F%BA%E4%BA%8Ejava-config%E6%97%A0xml%E9%85%8D%E7%BD%AE%E7%9A%84web%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】Spring MVC之基于java config无xml配置的web应用构建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/19/190319-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87WEB%E4%B9%8Bdemo%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】一个web demo应用构建全过程</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/23/190323-Spring-MVC%E4%B9%8BFilter%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】Spring MVC之Filter基本使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/16/191016-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%99%A8Filter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener noreferrer">【WEB系列】过滤器Filter使用指南</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/18/191018-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%99%A8Filter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E6%89%A9%E5%B1%95%E7%AF%87/" target="_blank" rel="noopener noreferrer">【WEB系列】过滤器Filter使用指南扩展篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/11/22/191122-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87Servlet-%E6%B3%A8%E5%86%8C%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】Servlet 注册的四种姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/06/191206-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87Listener%E5%9B%9B%E7%A7%8D%E6%B3%A8%E5%86%8C%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】Listener四种注册姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/04/210804-SpringBoot%E7%B3%BB%E5%88%97Web%E7%AF%87%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8Interceptor%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【WEB系列】拦截器Interceptor使用姿势介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/11/15/211115-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E6%B3%A8%E5%85%A5Bean%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】SpringBoot之拦截器注入Bean的几种姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/24/190824-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8BGet%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener noreferrer">【WEB系列】Get请求参数解析姿势汇总</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/28/190828-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8BPost%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener noreferrer">【WEB系列】Post请求参数解析姿势汇总</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/31/190831-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/" target="_blank" rel="noopener noreferrer">【WEB系列】如何自定义参数解析器</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/01/17/220117-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BWeb%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81%E4%B8%8B%E5%88%92%E7%BA%BF%E9%A9%BC%E5%B3%B0%E4%BA%92%E8%BD%AC%E7%9A%84%E4%BC%A0%E5%8F%82%E4%B8%8E%E8%BF%94%E5%9B%9E/" target="_blank" rel="noopener noreferrer">【WEB系列】如何支持下划线驼峰互转的传参与返回</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/01/23/220123-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89web%E5%8F%82%E6%95%B0%E6%98%A0%E5%B0%84%E5%99%A8/" target="_blank" rel="noopener noreferrer">【WEB系列】从0到1实现自定义web参数映射器</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/05/26/200526-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【WEB系列】参数校验Validation</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/22/191222-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%8C%B9%E9%85%8D%E6%9D%A1%E4%BB%B6RequestCondition/" target="_blank" rel="noopener noreferrer">【WEB系列】自定义请求匹配条件RequestCondition</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/06/11/200611-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BWeb%E7%AF%87%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】静态资源配置与读取</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/07/04/220704-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BXML%E4%BC%A0%E5%8F%82%E8%BF%94%E5%9B%9E%E5%AE%9E%E6%88%98/" target="_blank" rel="noopener noreferrer">【WEB系列】XML传参返回实战 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/08/17/220817-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【WEB系列】定义接口返回类型的几种方式 | 一灰灰Blog</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/16/190816-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8BFreemaker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】Freemaker环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/20/190820-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8BThymeleaf%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】Thymeleaf环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/08/22/190822-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8BBeetl%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">【WEB系列】Beetl环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/09/13/190913-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E8%BF%94%E5%9B%9E%E6%96%87%E6%9C%AC%E3%80%81%E7%BD%91%E9%A1%B5%E3%80%81%E5%9B%BE%E7%89%87%E7%9A%84%E6%93%8D%E4%BD%9C%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】返回文本、网页、图片的操作姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/09/29/190929-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91/" target="_blank" rel="noopener noreferrer">【WEB系列】请求重定向</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/10/191010-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/" target="_blank" rel="noopener noreferrer">【WEB系列】全局异常处理</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/10/12/191012-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86HandlerExceptionResolver/" target="_blank" rel="noopener noreferrer">【WEB系列】自定义异常处理HandlerExceptionResolver</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/11/20/191120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BWeb%E7%AF%87%E4%B9%8B%E5%BC%80%E5%90%AFGZIP%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/" target="_blank" rel="noopener noreferrer">【WEB系列】开启GZIP数据压缩</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/05/200105-SpringBoot%E7%B3%BB%E5%88%97web%E7%AF%87%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9EHttp-Code%E7%9A%84n%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】自定义返回Http Code的n种姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/03/29/200329-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%9C%80%E5%85%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】异步请求知识点与使用姿势小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/01/200401-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BSSE%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">【WEB系列】SSE服务器发送事件详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/21/190421-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87WEB%E4%B9%8Bwebsocket%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/" target="_blank" rel="noopener noreferrer">【WEB系列】springboot + websocket初体验</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/04/200104-SpringWeb%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRestTemplate-4xx-5xx-%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E6%8D%95%E8%8E%B7/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate 4xx/5xx 异常信息捕获</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/06/17/200617-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate基础用法小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/06/30/200630-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之自定义请求头</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/01/200701-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98fix/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之中文乱码问题fix</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/02/200702-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之超时设置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/03/200703-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之代理访问</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/04/200704-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8BBasic-Auth%E6%8E%88%E6%9D%83/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之Basic Auth授权</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/05/200705-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E9%9D%9E200%E7%8A%B6%E6%80%81%E7%A0%81%E4%BF%A1%E6%81%AF%E6%8D%95%E8%8E%B7/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之非200状态码信息捕获</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/10/200710-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之文件上传</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/07/200707-SpringBoot%E7%B3%BB%E5%88%97AsyncRestTemplate%E4%B9%8B%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%BB%8B%E7%BB%8D%E7%AF%87/" target="_blank" rel="noopener noreferrer">【WEB系列】AsyncRestTemplate之异步非阻塞网络请求介绍篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/09/30/190930-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B404%E3%80%81500%E5%BC%82%E5%B8%B8%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】404、500异常页面配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/06/200706-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8Bxml%E4%BC%A0%E5%8F%82%E4%B8%8E%E8%BF%94%E5%9B%9E%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】xml传参与返回使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2021/01/26/210126-SpringBoot%E7%B3%BB%E5%88%97%E6%95%B4%E5%90%88resin%E5%AE%B9%E5%99%A8/" target="_blank" rel="noopener noreferrer">【WEB系列】整合resin容器</a></li>
</ul>
<p><strong>采坑、填坑</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/02/13/190213-SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%8F%90%E7%A4%BAThe-temporary-upload-location-xxx-is-not-valid/" target="_blank" rel="noopener noreferrer">【WEB系列】SpringBoot文件上传异常之提示The temporary upload location xxx is not valid（填坑篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/09/05/190905-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8Bweb%E7%AF%87%E4%B9%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener noreferrer">【WEB系列】中文乱码问题解决（填坑篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/27/190327-Spring-RestTemplate%E4%B9%8Burlencode%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%BC%82%E5%B8%B8%E5%85%A8%E7%A8%8B%E5%88%86%E6%9E%90/" target="_blank" rel="noopener noreferrer">【WEB系列】RestTemplate之urlencode参数解析异常全程分析（填坑篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/11/13/211113-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8Bthymeleaf-foreach%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【WEB系列】thymeleaf foreach踩坑记录</a></li>
</ul>
<p><strong>应用实战</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/25/191225-SpringBoot-%E5%BA%94%E7%94%A8%E7%AF%87-%E5%AE%9E%E7%8E%B0%E5%90%8E%E7%AB%AF%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81/" target="_blank" rel="noopener noreferrer">【WEB系列】实现后端的接口版本支持（应用篇）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/02/200402-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BE%92%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E5%B7%A5%E7%A8%8B/" target="_blank" rel="noopener noreferrer">【WEB系列】徒手撸一个扫码登录示例工程（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/03/08/210308-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E5%AE%9E%E4%BE%8B/" target="_blank" rel="noopener noreferrer">【WEB系列】一步步实现一个面向接口的网络访问实例(应用篇)</a></li>
</ul>
<p><strong>WebFlux系列</strong></p>
<p>由于WebFlux和SpringMVC在一些基础上差别较大，单独开一个系列教程版块</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/04/21/200421-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BWebFlux%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【WEB系列】WebFlux之初体验</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/06/12/200612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BWebFlux%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】WebFlux静态资源配置与访问</a></li>
<li><a href="https://hhui.top/spring-blog/2020/08/27/200827-SpringBoot%E7%B3%BB%E5%88%97WebFlux%E4%B9%8BPath%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%8Eurl%E6%98%A0%E5%B0%84/" target="_blank" rel="noopener noreferrer">【WEB系列】WebFlux之Path参数解析与url映射</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/07/200907-SpringBoot%E7%B3%BB%E5%88%97WebFlux%E4%B9%8Bheader%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener noreferrer">【WEB系列】WebFlux之header参数解析</a></li>
</ul>
<p>webclient异步网络请求</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/09/200709-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之基础使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/13/200713-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之文件上传</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/14/200714-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%A4%B4%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之请求头设置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/16/200716-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8BBasic-Auth%E6%8E%88%E6%9D%83/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之Basic Auth授权</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/17/200717-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之超时设置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/07/28/200728-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8Bretrieve%E4%B8%8Eexchange%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%88%AB%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之retrieve与exchange的使用区别介绍</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/08/03/200803-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E9%9D%9E200%E7%8A%B6%E6%80%81%E7%A0%81%E4%BF%A1%E6%81%AF%E6%8D%95%E8%8E%B7/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之非200状态码信息捕获</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/08/11/200811-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E7%AD%96%E7%95%A5%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之策略设置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/08/20/200820-SpringBoot%E7%B3%BB%E5%88%97WebClient%E4%B9%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/" target="_blank" rel="noopener noreferrer">【WEB系列】WebClient之同步与异步</a></li>
</ul>
<h3> 6. SpringSecurity系列</h3>
<p>记录SpringSecurity相关的所有技术文章，分类汇总如下，持续更新中</p>
<p><strong>简单抽象的说一下SpringSecurity它的定义</strong></p>
<ul>
<li>很🐂的认证和访问权限校验框架</li>
</ul>
<p><strong>那么具体能干嘛？</strong></p>
<ul>
<li>用户登录认证：用户名+密码登录，确定用户身份</li>
<li>用户访问鉴权（常见的ACL访问控制列表，RBAC角色访问控制）：判定是否有权限访问某个资源</li>
<li>安全保护（CSRF跨站点攻击,Session Fixation会话固定攻击…）</li>
</ul>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/23/191223-SpringBoot-%E6%95%B4%E5%90%88-SpringSecurity-%E4%B9%8B%E8%B5%B7%E6%BA%90%E7%AF%87%EF%BC%88%E9%9B%B6%EF%BC%89/" target="_blank" rel="noopener noreferrer">【SpringSecurity系列】起源篇（零）</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/11/200111-SpringBoot-%E6%95%B4%E5%90%88-SpringSecurity-%E4%B9%8B%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E8%AE%A4%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener noreferrer">【SpringSecurity系列】基于内存认证（一）</a></li>
</ul>
<h3> 7. SpringCloud系列</h3>
<p>微服务系列</p>
<p><strong>Eureka系列</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/05/13/200513-SpringCloud%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BEureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringCloud系列】Eureka注册中心初体验</a></li>
</ul>
<p><strong>踩坑、填坑</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/06/190306-SpringCloud%E4%B9%8BFeign%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%8C%85%E8%A3%85%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/" target="_blank" rel="noopener noreferrer">【Feign系列】Feign请求参数包装异常问题定位</a></li>
</ul>
<h3> 8. 运维</h3>
<p><strong>docker</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/03/04/210304-SpringBoot%E7%B3%BB%E5%88%97%E6%95%B4%E5%90%88docker%E9%95%9C%E5%83%8F%E6%89%93%E5%8C%85/" target="_blank" rel="noopener noreferrer">【运维系列】整合docker镜像打包</a></li>
</ul>
<h3> 9. 中间件</h3>
<p><strong>zookeeper</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/04/14/210414-SpringBoot%E6%95%B4%E5%90%88zookeeper%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【中间件】zookeeper基础使用介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/04/15/210415-SpringBoot%E6%95%B4%E5%90%88Zookeeper%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/" target="_blank" rel="noopener noreferrer">【中间件】Zookeeper从0到1实现一个分布式锁</a></li>
</ul>
<p><strong>prometheus</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/12/23/211223-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%A4%A7%E7%9B%98%E9%85%8D%E7%BD%AE%E5%AE%9E%E6%88%98/" target="_blank" rel="noopener noreferrer">【中间件】Prometheus大盘配置实战 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/12/22/211222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%9F%8B%E7%82%B9%E9%87%87%E9%9B%86%E4%B8%8A%E6%8A%A5/" target="_blank" rel="noopener noreferrer">【中间件】Prometheus基于AOP实现埋点采集上报 | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/11/09/211109-SpringBoot%E4%B9%8BPrometheus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%8B%E7%82%B9%E4%B8%8A%E6%8A%A5/" target="_blank" rel="noopener noreferrer">【中间件】Prometheus自定义埋点上报</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/04/19/210419-SpringBoot%E6%95%B4%E5%90%88Prometheus%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/" target="_blank" rel="noopener noreferrer">【中间件】SpringBoot整合Prometheus实现应用监控</a></li>
</ul>
<p><strong>邮件</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/02/210802-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8B%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【中间件】SpringBoot系列之邮件发送姿势介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/03/210803-SpringBoot%E5%AE%9E%E6%88%98%E5%9F%BA%E4%BA%8E%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/" target="_blank" rel="noopener noreferrer">【中间件】SpringBoot实战基于异常日志的邮件报警</a></li>
</ul>
<h3> 10. 扩展点</h3>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2022/09/27/220927-Spring%E6%89%A9%E5%B1%95%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0%E5%89%8D%E5%9B%9E%E8%B0%83ApplicationContextInitializer/" target="_blank" rel="noopener noreferrer">【扩展点】 容器刷新前回调ApplicationContextInitializer | 一灰灰Blog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/10/26/221026-Spring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89bean%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">【扩展点】 自定义bean注册扩展机制BeanDefinitionRegistryPostProcessor | 一灰灰Blog</a></li>
</ul>
<h2> 3. 其他</h2>
<p>拒绝单机，欢迎start或者加好友支持</p>
<h3> 声明</h3>
<p>尽信书则不如无书，以上内容，一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<ul>
<li>微博地址: 小灰灰Blog</li>
<li>QQ： 一灰灰/3302797840</li>
<li>WeChat: 一灰/liuyueyi25</li>
</ul>
<h3> 扫描关注</h3>
<p>公众号&amp;博客</p>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="QrCode" tabindex="0" loading="lazy"><figcaption>QrCode</figcaption></figure>
<p>打赏码</p>
<figure><img src="https://gitee.com/liuyueyi/Source/raw/master/img/pay/pay.png" alt="pay" tabindex="0" loading="lazy"><figcaption>pay</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://travis-ci.org/liuyueyi/spring-boot-demo.svg?branch=master" type="image/"/>
    </item>
    <item>
      <title>Features Demo</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Features Demo</source>
      <description>Catalog Markdown Enhance Page Config Function Disable Encryption Demo</description>
      <category>Guide</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Catalog</h2>
<ul>
<li>
<p><a href="/tutorial/en/demo/markdown.html" target="blank">Markdown Enhance</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/page.html" target="blank">Page Config</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/disable.html" target="blank">Function Disable</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/encrypt.html" target="blank">Encryption Demo</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Disabling layout and features</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/disable.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/disable.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Disabling layout and features</source>
      <description>You can disable some function and layout on the page by setting the Frontmatter of the page.</description>
      <category>Guide</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can disable some function and layout on the page by setting the Frontmatter of the page.</p>
<!-- more -->
<p>This page is an demo that disables the following features:</p>
<ul>
<li>Navbar</li>
<li>Sidebar</li>
<li>Breadcrumb</li>
<li>Page information</li>
<li>Contributors</li>
<li>Edit link</li>
<li>Update time</li>
<li>Prev/Next link</li>
<li>Comment</li>
<li>Footer</li>
<li>Back to top button</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Encryption Article</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/encrypt.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/encrypt.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Encryption Article</source>
      <description>The actual article content. Paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 t...</description>
      <category>Guide</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Encryption Article</h1>
<p>The actual article content.</p>
<p>Paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text.</p>
<p>Paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown Enhance</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/markdown.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/markdown.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Markdown Enhance</source>
      <description>VuePress basically generate pages from Markdown files. So you can use it to generate documentation or blog sites easily. You should create and write Markdown files, so that VuePress can convert them to different pages according to file structure.</description>
      <category>Guide</category>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress basically generate pages from Markdown files. So you can use it to generate documentation or blog sites easily.</p>
<p>You should create and write Markdown files, so that VuePress can convert them to different pages according to file structure.</p>
<!-- more -->
<h2> Markdown Introduction</h2>
<p>If you are a new learner and don’t know how to write Markdown, please read <a href="https://theme-hope.vuejs.press/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown Intro</a> and <a href="https://theme-hope.vuejs.press/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown Demo</a>.</p>
<h2> Markdown Config</h2>
<p>VuePress introduce configuration for each Markdown page using Frontmatter.</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Frontmatter is a important concept in VuePress. If you don’t know it, you need to read <a href="https://theme-hope.vuejs.press/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter Introduction</a>.</p>
</div>
<h2> Markdown Extension</h2>
<p>The Markdown content in VuePress will be parsed by <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a>, which supports <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">syntax extensions</a> via markdown-it plugins.</p>
<h3> VuePress Enhancement</h3>
<p>To enrich document writing, VuePress has extended Markdown syntax.</p>
<p>For these extensions, please read <a href="https://theme-hope.vuejs.press/basic/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">Markdown extensions in VuePress</a>.</p>
<h3> Theme Enhancement</h3>
<p>By using <a href="https://theme-hope.vuejs.press/md-enhance/" target="_blank" rel="noopener noreferrer"><code>vuepress-plugin-md-enhance</code></a>, the theme extends more Markdown syntax and provides richer writing functions.</p>
<h4> Custom Container</h4>
<div v-pre="">
<p>Safely use {{ variable }} in Markdown.</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">Custom Title</p>
<p>A custom information container with <code>code</code>, <a href="#custom-container">link</a>.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>
<div class="hint-container tip">
<p class="hint-container-title">Custom Title</p>
<p>A custom tip container</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">Custom Title</p>
<p>A custom warning container</p>
</div>
<div class="hint-container danger">
<p class="hint-container-title">Custom Title</p>
<p>A custom danger container</p>
</div>
<details class="hint-container details"><summary>Custom Title</summary>
<p>A custom details container</p>
</details>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Tabs</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/tabs.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Code Tabs</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Superscript and Subscript</h4>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Align</h4>
<div style="text-align:center">
<p>I am center</p>
</div>
<div style="text-align:right">
<p>I am right align</p>
</div>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Attrs</h4>
<p>A <strong id="word">word</strong> having id.</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/attrs.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Footnote</h4>
<p>This text has footnote<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">.</a></p><a class="footnote-anchor" id="footnote-ref1">
</a><ul><a class="footnote-anchor" id="footnote-ref1">
</a><li><a class="footnote-anchor" id="footnote-ref1"></a><a href="https://theme-hope.vuejs.press/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Mark</h4>
<p>You can mark <mark>important words</mark> .</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Tasklist</h4>
<ul class="task-list-container">
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> Plan A</label></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> Plan B</label></p>
</li>
<li>
<p><a href="https://theme-hope.vuejs.press/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">View Detail</a></p>
</li>
</ul>
<h4> Image Enhancement</h4>
<p>Support setting color scheme and size</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Chart</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Echarts</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/echarts.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Flowchart</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Mermaid</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/mermaid.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Tex</h4>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0277em;vertical-align:-1.2777em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5017em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span></p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/tex.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Include files</h4>
<ul>
<li>
<p><a href="/tutorial/en/demo/markdown.html" target="blank">Markdown Enhance</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/page.html" target="blank">Page Config</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/disable.html" target="blank">Function Disable</a></p>
</li>
<li>
<p><a href="/tutorial/en/demo/encrypt.html" target="blank">Encryption Demo</a></p>
</li>
</ul>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/include.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Code Demo</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/demo.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Stylize</h4>
<p>Donate Mr.Hope a cup of coffee. </p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/stylize.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Playground</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/playground.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Vue Playground</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/vue-playground.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h4> Presentation</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/presentation.html" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p>This is footnote content <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>Page Config</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/page.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/demo/page.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Page Config</source>
      <description>Content before more comment is regarded as page excerpt.</description>
      <category>Guide</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Content before <code>more</code> comment is regarded as page excerpt.</p>
<!-- more -->
<h2> Page Information</h2>
<p>You can set page information in Markdown’s Frontmatter.</p>
<ul>
<li>The author is Ms.Hope.</li>
<li>The writing date is January 1, 2020</li>
<li>Category is "Guide"</li>
<li>Tags are "Page Config" and "Guide"</li>
</ul>
<h2> Page Content</h2>
<p>You are free to write your Markdown here.</p>
<div class="hint-container tip">
<p class="hint-container-title">Assets</p>
<ul>
<li>
<p>You can place images besides your Markdown files, but you should use <strong>relative links</strong> (i.e.: starting with <code>./</code>) for them.</p>
</li>
<li>
<p>For images in <code>.vuepress/public</code> directory, please use absolute links (i.e.: starting with <code>/</code>) for them.</p>
</li>
</ul>
</div>
<p>The theme contains a custom badge:</p>
<blockquote>
<p>A dark blue badge text badge at the end of line. </p>
</blockquote>
<h2> Page Structure</h2>
<p>This page should contain:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/layout/breadcrumb.html" target="_blank" rel="noopener noreferrer">BreadCrumb</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/page-info.html" target="_blank" rel="noopener noreferrer">Title and information</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/layout/page.html#header-list" target="_blank" rel="noopener noreferrer">TOC (Table of Contents)</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/meta.html" target="_blank" rel="noopener noreferrer">Meta information including update time and contributors</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">Comments</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">Navbar</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">Sidebar</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">Footer</a></li>
<li>Back to top button</li>
</ul>
<p>You can customize them in theme options and page frontmatter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <description>Highlight Features Bar baz ... Foo ray ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Highlight Features</h2>
<h3> Bar</h3>
<ul>
<li><a href="/tutorial/en/guide/bar/baz.html" target="blank">baz</a></li>
<li>...</li>
</ul>
<h3> Foo</h3>
<ul>
<li><a href="/tutorial/en/guide/foo/ray.html" target="blank">ray</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>quick-chinese-transfer</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-chinese-transfer/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-chinese-transfer/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">quick-chinese-transfer</source>
      <description>中文简繁转换java库</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>中文简繁转换java库</p>
]]></content:encoded>
    </item>
    <item>
      <title>version</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-chinese-transfer/version.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-chinese-transfer/version.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">version</source>
      <pubDate>Mon, 08 Aug 2022 12:26:49 GMT</pubDate>
    </item>
    <item>
      <title>quick-media</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">quick-media</source>
      <description>![Join the chat at https://gitter.im/quick-media/Lobby (https://badges.gitter.im/quick-media/Lobby.svg)](https://gitter.im/quick-media/Lobby?utmsource=badge&amp;utmmedium=badge&amp;utmc...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<a href="https://blog.hhui.top" target="_blank">
    <img src="https://img.shields.io/badge/-微信关注“一灰灰blog”公众号-orange.svg" alt="#" align="right" style="margin-right: 20%;">
</a>
<p><a href="https://gitter.im/quick-media/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="noopener noreferrer"><img src="https://badges.gitter.im/quick-media/Lobby.svg" alt="Join the chat at https://gitter.im/quick-media/Lobby" loading="lazy"></a>
<a href="https://travis-ci.org/liuyueyi/quick-media" target="_blank" rel="noopener noreferrer"><img src="https://travis-ci.org/liuyueyi/quick-media.svg?branch=master" alt="Builder" loading="lazy"></a>
<a href="https://jitpack.io/#liuyueyi/quick-media" target="_blank" rel="noopener noreferrer"><img src="https://jitpack.io/v/liuyueyi/quick-media.svg" alt="JitPack" loading="lazy"></a>
<a href="https://search.maven.org/search?q=g:com.github.liuyueyi.media" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/maven-central/v/com.github.liuyueyi.media/plugins.svg" alt="Maven Central with version prefix filter" loading="lazy"></a>
<a href="https://codecov.io/gh/liuyueyi/quick-media" target="_blank" rel="noopener noreferrer"><img src="https://codecov.io/gh/liuyueyi/quick-media/branch/master/graph/badge.svg" alt="codecov" loading="lazy"></a>
<a href="http://isitmaintained.com/project/liuyueyi/quick-media" title="Average time to resolve an issue" target="_blank" rel="noopener noreferrer"><img src="http://isitmaintained.com/badge/resolution/liuyueyi/quick-media.svg" alt="Average time to resolve an issue" loading="lazy"></a>
<a href="http://isitmaintained.com/project/liuyueyi/quick-media" title="Percentage of issues still open" target="_blank" rel="noopener noreferrer"><img src="http://isitmaintained.com/badge/open/liuyueyi/quick-media.svg" alt="Percentage of issues still open" loading="lazy"></a></p>
<blockquote>
<p>多媒体处理web服务</p>
<p>mult-media process Web Service by FFMPEG &amp; ImageMagic &amp; SpringMVC</p>
</blockquote>
<p>组建了一个微信技术交流群，有兴趣的小伙伴欢迎关注公众号<code>一灰灰blog</code>，回复加群一起愉快玩耍</p>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="QrCode" tabindex="0" loading="lazy"><figcaption>QrCode</figcaption></figure>
<p>本项目为一个提供图片 + 音频 + 视频 + 二维码 + 网页 + markdown处理的Web项目，我们的目标是封装一套多媒体文件处理的公共类库，简化各种复杂的调用；利用 spring-boot 来提供http接口实现多媒体的操作实例功能</p>
<p>整理了下QuickMedia的使用与技术文档，可以通过下面的链接进行查看</p>
<ul>
<li><a href="http://liuyueyi.gitee.io/quick-media/#/" target="_blank" rel="noopener noreferrer">http://liuyueyi.gitee.io/quick-media/#/</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/" target="_blank" rel="noopener noreferrer">https://liuyueyi.github.io/quick-media/#/</a></li>
</ul>
<p>线上体验地址</p>
<ul>
<li>Z+ | web : <a href="http://tool.hhui.top" target="_blank" rel="noopener noreferrer">http://tool.hhui.top</a></li>
</ul>
<h3> 使用说明</h3>
<p>目前最新版jar包已提交到maven仓库，因此想直接引入的小伙伴，不需要再采用下面的两种方案了（请注意jitpack的包通常来讲更新会更频繁些，而中央仓库的会更稳定些；相同的版本号对应的代码保持一致）</p>
<p>中央仓库引入地址: <a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/artifact/com.github.liuyueyi.media</a></p>
<p>举例如二维码插件的依赖如下即可</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>在下载本项目之后，有些常见事项需要注意一二</p>
<ul>
<li><s>工程中使用lombok简化大量的代码，因此使用idea的童鞋请装一下lombok的插件(最新版已移除lombok依赖)</s></li>
<li>部分插件依赖第三方库，如 ffmpge, phantomjs, image-magic，请确保已经安装</li>
</ul>
<p><strong>jitpack使用方式</strong></p>
<p>由于某些原因，导致github访问太慢，无法下载依赖包时，这里也给出了第二种选择方案，借助<code>jitpack</code>仓库，详情使用文档，请查看：<a href="https://github.com/liuyueyi/quick-media/#/%E8%BF%AD%E4%BB%A3/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97?id=b-jitpack-%e4%bb%93%e5%ba%93" target="_blank" rel="noopener noreferrer">quick-media jitpack-仓库导入</a></p>
<p>一个简单的示例如下:</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> I. 项目分析</h2>
<h3> 1. 技术栈</h3>
<ul>
<li>spring-boot</li>
<li>ffmpeg</li>
<li>ImageMagic</li>
<li>zxing</li>
<li>batik</li>
<li>flexmark</li>
<li>phantomjs</li>
<li>jhlabs</li>
</ul>
<h3> 2. 结构分析</h3>
<p>目前项目主要结构区分为web/plugins两个模块，</p>
<h4> web</h4>
<ul>
<li>根据spring-boot可以迅速搭建一个web服务，提供http接口用于功能测试</li>
<li><s>内部集成了一个简单的web网站，打开: <a href="http://media.hhui.top:8089/media/webs" target="_blank" rel="noopener noreferrer">http://media.hhui.top:8089/media/webs</a> 查看</s></li>
<li><s>使用ReactJS，前后端分离，写了一个更友好的网站，打开: <a href="https://zweb.hhui.top/#/index" target="_blank" rel="noopener noreferrer">https://zweb.hhui.top/#/index</a> 查看</s></li>
<li>内部实现了小程序【图文小工具】的后端逻辑</li>
<li>本项目所有功能，将移植到 <a href="https://tool.hhui.top" target="_blank" rel="noopener noreferrer">一灰灰的神奇小工具</a></li>
</ul>
<h4> plugins</h4>
<p>插件工程，根据不同的场景，支持不同的服务功能，目前将所有的插件抽象出来，可以独立作为工具包提供给第三方依赖，直接引入使用</p>
<p><strong>audio-plugin</strong></p>
<p>提供音频转码服务，使用依赖如下，详细查看: <a href="/tutorial/git/quick-media/audio/" target="blank">audio-plugin说明</a></p>
<p>中央仓库导入方式，注意groupId不同(为什么需要改变groupId? 因为上传到maven中央仓库，要求groupId与github的项目所属相同)</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>date-plugin</strong></p>
<p>提供时间戳、日期转换为农历日期，详细查看：<a href="/tutorial/git/quick-media/date/" target="blank">date-plugin说明</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>image-plugin</strong></p>
<p>提供图片合成，提供gif图片生成等图片操作的封装类，详细查看： <a href="/tutorial/git/quick-media/image/" target="blank">image-plugin说明</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>markdown-plugin</strong></p>
<p>markdown转html，转图片的封装类， 详细内容查看: <a href="/tutorial/git/quick-media/markdown/" target="blank">markdown-plugin</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>phantom-plugin</strong></p>
<p>提供根据phantomjs渲染html的封装</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>qrcode-plugin</strong></p>
<p>提供二维码生成和解析的封装，详细查看: <a href="/tutorial/git/quick-media/qrcode/" target="blank">qrcode-plugin使用说明</a></p>
<blockquote>
<p><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" target="_blank" rel="noopener noreferrer">qrcode使用手册</a></p>
</blockquote>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>svg-plugin</strong></p>
<p>提供svg文档的渲染，输出图片的封装，详细查看: <a href="/tutorial/git/quick-media/svg/" target="blank">svg-plugin使用说明</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>imagic-plugin</strong></p>
<p>基于imagic-magic实现的图片编辑插件封装，详细查看: <a href="/tutorial/git/quick-media/imagic/" target="blank">imagic-plugin使用说明</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>photo-plugin</strong></p>
<p>相片、图片处理插件，适用于图像的各种处理，如灰度，素描，滤镜等</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 已支持服务</h2>
<h3> 1. 音频转码</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 音频不同格式的相互转码</label></li>
</ul>
<h3> 2. 二维码生成 &amp; 解析</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 二维码生成</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 个性二维码生成</label>
<ul>
<li>支持logo</li>
<li>支持logo样式 （圆角logo， 边框）</li>
<li>支持二维码颜色设置</li>
<li>支持二维码圆角</li>
<li>支持探测图形颜色设置</li>
<li>支持探测图形图片定制</li>
<li>支持背景图</li>
<li>支持背景图圆角设置</li>
<li>支持base64格式的二维码图片</li>
<li>支持二维码定制绘制信息样式</li>
<li>三角形</li>
<li>矩形</li>
<li>五边形 （五角星待支持）</li>
<li>六边形</li>
<li>八边形</li>
<li>圆</li>
<li>自定义图片</li>
<li>前置图支持</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 动态二维码生成支持</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 二维码信息解析</label></li>
</ul>
<p><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" target="_blank" rel="noopener noreferrer">查看更多二维码详情</a></p>
<p>给出一个实际生成的case如下:</p>
<img src="http://ww1.sinaimg.cn/large/8154e929gy1g8wadvkt56g20pz08zwl5.gif">
<h3> 3. 图片</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 长图文生成</label>
<ul>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/image/Java%E5%AE%9E%E7%8E%B0%E9%95%BF%E5%9B%BE%E6%96%87%E7%94%9F%E6%88%90" target="_blank" rel="noopener noreferrer">水平文字，上下布局长图文生成</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/image/Java%E5%AE%9E%E7%8E%B0%E7%AB%96%E6%8E%92%E9%95%BF%E5%9B%BE%E6%96%87%E7%94%9F%E6%88%90" target="_blank" rel="noopener noreferrer">垂直文字，左右布局长图文生成</a></li>
<li>第三方字体支持</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> markdown 转 image</label>
<ul>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/markdown/markdown%E8%BD%AChtml" target="_blank" rel="noopener noreferrer">markdown 转 html</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/markdown%E8%BD%ACimage" target="_blank" rel="noopener noreferrer">html 转 image</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/phantom/Java&amp;PhantomJs%E5%AE%9E%E7%8E%B0html%E8%BE%93%E5%87%BA%E5%9B%BE%E7%89%87" target="_blank" rel="noopener noreferrer">利用phantomjs实现html转image</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> gif图生成</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 合成</label>
<ul>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/image/%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90" target="_blank" rel="noopener noreferrer">图片合成支持</a></li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 水印</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> svg渲染</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 裁剪</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> 压缩</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> 旋转</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> 缩放</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> 灰度化，像素化</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> 转字符图</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> 位图转矢量图</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> 格式转换</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> 相片处理</label>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> 相片转素描</label></li>
</ul>
</li>
</ul>
<p><a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/image/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" target="_blank" rel="noopener noreferrer">查看更多图片服务详情</a></p>
<h3> 4. 图像</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-21" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-21"> 图像转素描风格</label></li>
</ul>
<h3> 5. 视频相关</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-22" disabled="disabled"><label class="task-list-item-label" for="task-item-22"> 视频压缩</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-23" disabled="disabled"><label class="task-list-item-label" for="task-item-23"> 转码</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-24" disabled="disabled"><label class="task-list-item-label" for="task-item-24"> 截取</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-25" disabled="disabled"><label class="task-list-item-label" for="task-item-25"> 码率调整</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-26" disabled="disabled"><label class="task-list-item-label" for="task-item-26"> 生成gif</label></li>
</ul>
<h2> III. 阶段记录</h2>
<p>详情查看: <a href="https://liuyueyi.github.io/quick-media/#/%E8%BF%AD%E4%BB%A3/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97" target="_blank" rel="noopener noreferrer">quick-media更新迭代日志</a></p>
<h2> IV. 文档</h2>
<p>所有使用以及技术文档，开发过程中一些常见问题汇总，可以点击👉: <a href="https://liuyueyi.github.io/quick-media/#/" target="_blank" rel="noopener noreferrer">quick-media文档</a></p>
<h3> 问题记录汇总</h3>
<ul>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E9%87%87%E5%9D%91/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D" target="_blank" rel="noopener noreferrer">图片旋转不生效问题</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E9%87%87%E5%9D%91/markdown%E8%BD%AC%E5%9B%BE%E7%89%87%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81" target="_blank" rel="noopener noreferrer">markdonw转图片中文乱码问题</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E9%87%87%E5%9D%91/Batik%E6%B8%B2%E6%9F%93png%E5%9B%BE%E7%89%87%E5%BC%82%E5%B8%B8%E7%9A%84bug%E4%BF%AE%E5%A4%8D" target="_blank" rel="noopener noreferrer">兼容ImageIO读取jpeg图片变红</a></li>
<li><a href="https://liuyueyi.github.io/quick-media/#/%E9%87%87%E5%9D%91/%E5%85%BC%E5%AE%B9ImageIO%E8%AF%BB%E5%8F%96jpeg%E5%9B%BE%E7%89%87%E5%8F%98%E7%BA%A2" target="_blank" rel="noopener noreferrer">Batik渲染png图片异常的bug修复</a></li>
</ul>
<h2> V. 其他</h2>
<h3> 其他</h3>
<p>看到下面的star走势图，难道真的没有动心点点🖱小小的👍一下么</p>
<figure><a href="https://starchart.cc/liuyueyi/quick-media" target="_blank" rel="noopener noreferrer"><img src="https://starchart.cc/liuyueyi/quick-media.svg" alt="Stargazers over time" tabindex="0" loading="lazy"></a><figcaption>Stargazers over time</figcaption></figure>
<h3> 声明</h3>
<p>尽信书则不如，已上内容，一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<ul>
<li>微博地址: 小灰灰Blog</li>
<li>QQ： 一灰灰/3302797840</li>
<li>WeChat: 一灰/liuyueyi25</li>
</ul>
<h3> 扫描关注</h3>
<p><strong>打赏列表</strong></p>
<blockquote>
<p>1一分也是❤️，感谢大佬的打赏 (打赏的小伙伴不妨留个备注名)</p>
</blockquote>
<ul>
<li><a href="https://github.com/datouliang" target="_blank" rel="noopener noreferrer">datouliang</a></li>
<li><a href="">*桑</a></li>
<li><a href="">坏笑</a></li>
</ul>
<p><strong>公众号&amp;博客</strong></p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/info/blogHhui.png" alt="QrCode" tabindex="0" loading="lazy"><figcaption>QrCode</figcaption></figure>
<p><strong>打赏码</strong></p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/info/payHhui.png" alt="pay" tabindex="0" loading="lazy"><figcaption>pay</figcaption></figure>
<hr>
<h3> 实例演示</h3>
<h4> 0. 应用网站</h4>
<p>项目本身提供一个控制台，基于reactjs搭建，在console模块下，启动即可</p>
<ul>
<li><a href="http://localhost:8089" target="_blank" rel="noopener noreferrer">http://localhost:8089</a></li>
</ul>
<p>使用react.js重构后的前端网站，实现前后端分离，前端网页借助gitee的pages直接部署，测试链接</p>
<ul>
<li>gitee静态页面: <a href="http://liuyueyi.gitee.io/zweb" target="_blank" rel="noopener noreferrer">http://liuyueyi.gitee.io/zweb</a></li>
<li><del> <a href="https://zweb.hhui.top/#/index" target="_blank" rel="noopener noreferrer">https://zweb.hhui.top/#/index</a> 服务器hold不住，后端逻辑已下线😭 </del></li>
</ul>
<p>web实际演示图:</p>
<figure><img src="/imgs/qrcode/zwebdemo.gif" alt="demo" tabindex="0" loading="lazy"><figcaption>demo</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://badges.gitter.im/quick-media/Lobby.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>version</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/version.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/version.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">version</source>
      <description>版本记录 记录quick-media开源项目的版本变更历史 0.时间线 Aug 9, 2022 插件3.0升级，升级各种依赖，调整写法等 Jul 29, 2021 二维码支持设置图片资源 Jan 14, 2021 二维码前置图支持 Nov 30, 2020 代码提交中央仓库 Nov 8, 2019 动态二维码支持 Jun 20, 2019 插件2.0版本提供 Jun 19, 2019 添加项目主页，基于doscify搭建的简易项目主页 Mar 13, 2019 二维码插件个性化定制升级，实现各种几何样式的二维码生成，并支持颜色、logo相关指定设置 Apr 17, 2018 imagemagic-plugin 插件完成，提供对image-magic的调用封装，实现对图片的各种编辑功能 Mar 30, 2018 首个web工程，提供对各插件的使用demo Mar 27, 2018 各插件提供使用说明文档 Jan 14, 2018 svg-plugin 插件诞生，实现svg渲染输出图片，首次支持的就是我个人目前沿用至今的博文宣传图 2017.12.03 markdown-plugin 插件诞生，实现markdown与html的互转，实现html渲染输出图片的功能支持 2017.12.01 phamtomjs-plugin 插件诞生，封装phantomjs，其诞生主要目的就是为了支持html渲染输出图片 2017.11.11 image-plugin 插件提供水印生成功能 2017.09.18 date-plugin 插件立项，支持阴历、阳历的互转 2017.09.15 image-plugin 扩展，支持生成动图，第一个支持特效为打字机的动图 2017.08.18 image-plugin 图片合成插件立项，旨在提供一个便捷的基于java的图片合成编辑功能 2017.07.18 qrcode-plugin 二维码插件正式立项，2017.08.13 个性二维码插件完成 2017.07.13 首次提交项目提交，第一个插件功能支持音频转码</description>
      <pubDate>Mon, 08 Aug 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">版本记录</p>
<p>记录quick-media开源项目的版本变更历史</p>
</div>
<h2> 0.时间线</h2>
<ul>
<li>Aug 9, 2022 插件3.0升级，升级各种依赖，调整写法等</li>
<li>Jul 29, 2021 二维码支持设置图片资源</li>
<li>Jan 14, 2021 二维码前置图支持</li>
<li>Nov 30, 2020 代码提交中央仓库</li>
<li>Nov 8, 2019 动态二维码支持</li>
<li>Jun 20, 2019 插件2.0版本提供</li>
<li>Jun 19, 2019 添加项目主页，基于doscify搭建的简易项目主页</li>
<li>Mar 13, 2019 二维码插件个性化定制升级，实现各种几何样式的二维码生成，并支持颜色、logo相关指定设置</li>
<li>Apr 17, 2018 imagemagic-plugin 插件完成，提供对image-magic的调用封装，实现对图片的各种编辑功能</li>
<li>Mar 30, 2018 首个web工程，提供对各插件的使用demo</li>
<li>Mar 27, 2018 各插件提供使用说明文档</li>
<li>Jan 14, 2018 svg-plugin 插件诞生，实现svg渲染输出图片，首次支持的就是我个人目前沿用至今的博文宣传图</li>
<li>2017.12.03 markdown-plugin 插件诞生，实现markdown与html的互转，实现html渲染输出图片的功能支持</li>
<li>2017.12.01 phamtomjs-plugin 插件诞生，封装phantomjs，其诞生主要目的就是为了支持html渲染输出图片</li>
<li>2017.11.11 image-plugin 插件提供水印生成功能</li>
<li>2017.09.18 date-plugin 插件立项，支持阴历、阳历的互转</li>
<li>2017.09.15 image-plugin 扩展，支持生成动图，第一个支持特效为打字机的动图</li>
<li>2017.08.18 image-plugin 图片合成插件立项，旨在提供一个便捷的基于java的图片合成编辑功能</li>
<li>2017.07.18 qrcode-plugin 二维码插件正式立项，2017.08.13 个性二维码插件完成</li>
<li>2017.07.13 首次提交项目提交，第一个插件功能支持音频转码</li>
</ul>
<h2> 1. 迭代记录</h2>
<details> <summary>tag历史</summary>
<ol>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.001" target="_blank" rel="noopener noreferrer">v0.001</a></p>
<ul>
<li>实现音频转码服务</li>
<li>实现二维码基础服务，完成基于zxing的二维码深度定制</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.002" target="_blank" rel="noopener noreferrer">v0.002</a></p>
<ul>
<li>重写zxing的二维码渲染逻辑，只使用二维码矩阵的生成逻辑，支持二维码的全面定制化</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.003" target="_blank" rel="noopener noreferrer">v0.003</a></p>
<ul>
<li>长图文生成的支持</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.004" target="_blank" rel="noopener noreferrer">v0.004</a></p>
<ul>
<li>markdown 语法文本转html， 转image</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.005" target="_blank" rel="noopener noreferrer">v0.005</a></p>
<ul>
<li>fix markdown 转图片中文乱码</li>
<li>图片合成服务支持</li>
<li>微信小程序（图文小工具）服务端源码</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.006" target="_blank" rel="noopener noreferrer">v0.006</a></p>
<ul>
<li>svg渲染支持</li>
<li>利用phantomjs实现html渲染</li>
<li>实现应用网站搭建</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.007" target="_blank" rel="noopener noreferrer">v0.007</a></p>
<ul>
<li>结构调整</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v0.008" target="_blank" rel="noopener noreferrer">v0.008</a></p>
<ul>
<li>实现imagic-plugin插件，封装imagic-magic使用姿势</li>
<li>完成图片旋转、裁剪、压缩等基本功能</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v1.0" target="_blank" rel="noopener noreferrer">v1.0</a></p>
<ul>
<li>第一个相对稳定的正式版本</li>
<li>全线插件，升级版本为 <code>2.0</code></li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.2" target="_blank" rel="noopener noreferrer">2.2</a></p>
<ul>
<li>升级springboot版本</li>
<li>qrcode升级2.2</li>
<li>开启 <code>jitpack</code> maven仓库依赖</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/v2.4" target="_blank" rel="noopener noreferrer">2.4</a></p>
<ul>
<li>升级 collections-utils 3.2.2</li>
<li>升级 guava</li>
<li>qrcode升级2.4
<ul>
<li>支持圆形logo</li>
<li>支持文字二维码</li>
<li>重写几何二维码渲染逻辑，与图片渲染逻辑保持一致</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.4.1" target="_blank" rel="noopener noreferrer">2.4.1</a></p>
<ul>
<li>qrcode升级2.4.1
<ul>
<li>文字二维码支持随机+顺序两种渲染模式</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.4.2" target="_blank" rel="noopener noreferrer">2.4.2</a></p>
<ul>
<li>qrcode升级2.4.2
<ul>
<li>fix <a href="https://github.com/liuyueyi/quick-media/issues/74" target="_blank" rel="noopener noreferrer">#74</a> 优化logo锯齿严重问题</li>
<li>fix <a href="https://github.com/liuyueyi/quick-media/issues/75" target="_blank" rel="noopener noreferrer">#75</a>  指定二维码0/1渲染图片时，且不指定探测图形时，0点渲染逻辑bug</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.5" target="_blank" rel="noopener noreferrer">2.5</a></p>
<ul>
<li>所有插件升级 2.5</li>
<li>移除lombok依赖</li>
<li>image-plugin:
<ul>
<li>RectCell: 矩形样式支持</li>
<li>RectFillCell: 支持圆角绘制</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.5.1" target="_blank" rel="noopener noreferrer">2.5.1</a></p>
<ul>
<li>qrcode升级2.5.1，修复非矩形logo绘制问题</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.5.2" target="_blank" rel="noopener noreferrer">2.5.2</a></p>
<ul>
<li>qrcode升级2.5.2</li>
<li>新增二维码圆角设置  -&gt; <a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C?id=a-%e5%9f%ba%e6%9c%ac%e4%ba%8c%e7%bb%b4%e7%a0%81" target="_blank" rel="noopener noreferrer">使用姿势</a></li>
<li>新增背景图圆角/圆形设置 -&gt; <a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C?id=d-%e6%8c%87%e5%ae%9a%e8%83%8c%e6%99%af%e5%9b%be" target="_blank" rel="noopener noreferrer">使用姿势</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.5.3" target="_blank" rel="noopener noreferrer">2.5.3</a></p>
<ul>
<li>qrcode升级2.5.3
<ul>
<li>新增前置图渲染 -&gt; <a href="https://liuyueyi.github.io/quick-media/#/%E6%8F%92%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C?id=i-%e5%89%8d%e7%bd%ae%e5%9b%be" target="_blank" rel="noopener noreferrer">前置图</a></li>
<li>支持二维码周边添加渲染逻辑了</li>
</ul>
</li>
<li>其他插件 2.5.1
<ul>
<li>base-plugin
<ul>
<li>修复win文件保存时npe问题</li>
<li>GraphicUtil 功能扩展，新增创建图片时，指定填充色</li>
</ul>
</li>
<li>image-plugin
<ul>
<li>修复文字竖排渲染bug</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.5.4" target="_blank" rel="noopener noreferrer">2.5.4</a></p>
<ul>
<li>qrcode升级2.5.4
<ul>
<li>修复二维码前置渲染模板为gif时的bug</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.6.0" target="_blank" rel="noopener noreferrer">2.6.0</a></p>
<ul>
<li>全线升级2.6.0</li>
<li>base-plugin:
<ul>
<li>GraphicUtil 新增 scaleImage 方法</li>
</ul>
</li>
<li>qrcode-plugin:
<ul>
<li>支持mini_rect二维码</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.6.1" target="_blank" rel="noopener noreferrer">2.6.1</a></p>
<ul>
<li>全线升级2.6.1</li>
<li>修复io流未关闭bug</li>
</ul>
</li>
<li>
<p><a href="https://github.com/liuyueyi/quick-media/releases/tag/2.6.3" target="_blank" rel="noopener noreferrer">2.6.3</a></p>
<ul>
<li>全线升级2.6.3</li>
<li>base-plugin
<ul>
<li>FileWriteUtil新增写文本方法</li>
</ul>
</li>
<li>image-plugin:
<ul>
<li>新增图片像素化处理封装类 ImgPixelWrapper</li>
<li>图片灰度化</li>
<li>图片像素化</li>
<li>图片转字符图</li>
<li>图片生成字符数组</li>
<li>位图转矢量图</li>
</ul>
</li>
<li>qrcode-plugin
<ul>
<li>升级图片渲染IMG_V2，支持更灵活的图片渲染方式</li>
</ul>
</li>
</ul>
</li>
</ol>
</details>
<h2> 2. 版本说明</h2>
<blockquote>
<p>因为之前过于随意，没有记录下版本对应的改动，在2.0版本之前干了些，也不记得了...</p>
<p>后续的版本说明，尽量规范整齐🤕🤕🤕</p>
</blockquote>

<h3> 2.1 audio-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/audio-version">audio插件版本历史</a></li>
</ul>
<hr>
<h3> 2.2 date-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/date-version">date插件版本历史</a></li>
</ul>
<hr>
<h3> 2.3 image-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/image-version">image插件版本历史</a></li>
</ul>
<hr>
<h3> 2.4 imagic-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/imagic-version">imagic插件版本历史</a></li>
</ul>
<hr>
<h3> 2.5 markdown-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/markdown-version">markdown插件版本历史</a></li>
</ul>
<hr>
<h3> 2.6 phantom-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/phantom-version">phantom插件版本历史</a></li>
</ul>
<hr>
<h3> 2.7 qrcode-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/qrcode-version">QrCode插件版本历史</a></li>
</ul>
<hr>
<h3> 2.8 svg-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/svg-version">svg插件版本历史</a></li>
</ul>
<hr>
<h3> 2.9 svg-plugin</h3>
<blockquote>
<p>最新版本 3.0.0</p>
</blockquote>
<ul>
<li><a href="../version/photo-version">photo插件版本历史</a></li>
</ul>
<h2> 3. 最新版本</h2>
<p>下面提供当前所有插件的最新版本，同步更新，在引入之前，先添加repository地址</p>
<h3> a. 中央仓库导入</h3>
<p>中央仓库所在地址: <a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/artifact/com.github.liuyueyi.media</a></p>
<p><strong>对应版本情况</strong></p>
<table>
    <tbody><tr>
        <th>插件</th>
        <th>最新版本</th>
        <th>中央仓库地址</th>
        <th>说明</th>
    </tr>
    <tr>
        <td><code>audio-plugin</code></td>
        <td><textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;audio-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea></td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/audio-plugin" target="_blank">超链</a></td>
        <td>音频转码</td>
    </tr>
    <tr>
        <td><code>date-plugin</code></td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;date-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/date-plugin" target="_blank">超链</a></td>
        <td>公历/农历互转</td>
    </tr>
    <tr>
        <td>
            <code>image-plugin</code>
        </td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;image-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/image-plugin" target="_blank">超链</a></td>
        <td>基于jdk图片合成</td>
    </tr>
    <tr>
        <td>
            <code>imagic-plugin</code>
        </td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;imagic-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/imagic-plugin" target="_blank">超链</a></td>
        <td>imageMagic图片编辑封装插件</td>
    </tr>
    <tr>
        <td><code>markdown-plugin</code></td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;markdown-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/markdown-plugin" target="_blank">超链</a></td>
        <td>markdown2html, html2image</td>
    </tr>
    <tr>
        <td>
            <code>phantom-plugin</code>
        </td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;phantom-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/phantom-plugin" target="_blank">超链</a></td>
        <td>phatomjs封装</td>
    </tr>
    <tr>
        <td>
            <code>qrcode-plugin</code>
        </td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;qrcode-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/qrcode-plugin" target="_blank">超链</a></td>
        <td>二维码生成解码</td>
    </tr>
    <tr>
        <td>
            <code>svg-plugin</code>
        </td>
        <td>
            <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;svg-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
            </textarea>
        </td>
        <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/svg-plugin" target="_blank">超链</a></td>
        <td>svg渲染</td>
    </tr>
   <tr>
    <td>
        <code>photo-plugin</code>
    </td>
    <td>
        <textarea v-pre="" data-lang="xml" style="resize:none;width: 350px;height: 200px;border: none;background-color: #ff000000;" disabled="disabled">&lt;dependency&gt;
    &lt;groupId&gt;com.github.liuyueyi.media&lt;/groupId&gt;
    &lt;artifactId&gt;photo-plugin&lt;/artifactId&gt;
&lt;/dependency&gt;
        </textarea>
    </td>
    <td><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/photo-plugin" target="_blank">超链</a></td>
    <td>相片滤镜、处理</td>
</tr>
</tbody></table>
<h3> b. jitpack 仓库</h3>
<p>使用jitpack仓库时，同样需要添加仓库地址</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前最新的版本为<code>3.0.0</code>，如依赖所有的包</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只想依赖部分的包, 可以按需添加依赖，注意最新的版本都是<code>3.0.0</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果idea下载jar包失败，请不妨在控制台直接使用<code>mvn clean install -DskipTests=true</code>，可能有奇迹发生哦</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Bar 功能</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/bar/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/bar/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Bar 功能</source>
      <description>介绍 我们支持 bar 功能，... 详情 baz ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<p>我们支持 bar 功能，...</p>
<h2> 详情</h2>
<ul>
<li><a href="/tutorial/guide/bar/baz.html" target="blank">baz</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Baz</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/bar/baz.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/bar/baz.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Baz</source>
      <description>功能详情...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>功能详情...</p>
]]></content:encoded>
    </item>
    <item>
      <title>Foo 功能</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/foo/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/foo/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Foo 功能</source>
      <description>介绍 我们支持 foo 功能，... 详情 ray ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<p>我们支持 foo 功能，...</p>
<h2> 详情</h2>
<ul>
<li><a href="/tutorial/guide/foo/ray.html" target="blank">ray</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Ray</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/foo/ray.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/guide/foo/ray.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Ray</source>
      <description>功能详情...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>功能详情...</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring基础专栏</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Spring基础专栏</source>
      <description>专栏说明 Spring基础知识点汇总, 包含以下专栏详情 《SpringBoot 配置手册》 config 我们常说Spring约定大于配置，那么约定是什么？配置在哪里？怎么读取呢？多环境配置又改如何管理呢？本系列教程将为您一一解惑</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">专栏说明</p>
<p>Spring基础知识点汇总, 包含以下专栏详情</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/" target="blank">《SpringBoot 配置手册》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">config</p>
<p>我们常说Spring约定大于配置，那么约定是什么？配置在哪里？怎么读取呢？多环境配置又改如何管理呢？本系列教程将为您一一解惑</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/aop/" target="blank">《SpringBoot AOP扫盲》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">aop</p>
<p>教你如何玩转Spring的两大特性之一AOP，掌握工作中的代码整洁之道</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/bean/" target="blank">《SpringBoot Bean工厂》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">bean工厂</p>
<p>对象作为Java第一等公民，而Bean可算是Spring的一等公民了，如何声明、初始化、注入Bean是学习Spring中不可缺少的一环</p>
</div>
<ul>
<li><a href="spel">《SpringBoot SpEL表达式》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">SpEL</p>
<p>Spring Expression Language在Spring生态中应用颇广，如配置读取，AOP注解的增强，条件注入等等，推荐有兴趣的了解一下</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/%E4%BA%8B%E4%BB%B6/" target="blank">《SpringBoot 消息事件》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">Event/Listener</p>
<p>消息事件大量应用在Spring中，传说中的解耦神器；当然这里的消息事件是jvm级别的，本系列将带你了解Spring容器的哪些事件，以及如何自定义生产消费事件</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/%E5%9B%BD%E9%99%85%E5%8C%96/" target="blank">《SpringBoot 国际化》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">i18n</p>
<p>手把手教你国际化配置支持，多语言开发者的福音</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/%E5%AE%9A%E6%97%B6%E5%99%A8/" target="blank">《SpringBoot 定时器》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">schedule</p>
<p>基于Spring容器，分分钟教你实现JVM级别的定时任务</p>
</div>
<ul>
<li><a href="/tutorial/spring/basic/%E6%97%A5%E5%BF%97/" target="blank">《SpringBoot 日志》</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">log</p>
<p>所有开发者的好基友，一个成熟的系统离不开日志系统的建设，这里将介绍下如何配置日志、使用日志</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/cloud/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/cloud/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/extend/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/extend/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/middle/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/middle/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/mq/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/mq/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/search/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/search/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/security/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/security/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Guide</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/web/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/web/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Guide</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>Bar feature</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/bar/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/bar/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Bar feature</source>
      <description>Introduction We support bar feature, ... Details baz ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Introduction</h2>
<p>We support bar feature, ...</p>
<h2> Details</h2>
<ul>
<li><a href="/tutorial/en/guide/bar/baz.html" target="blank">baz</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Baz</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/bar/baz.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/bar/baz.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Baz</source>
      <description>Feature details here.</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>Feature details here.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Foo feature</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/foo/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/foo/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Foo feature</source>
      <description>Introduction We support foo feature, ... Details ray ...</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Introduction</h2>
<p>We support foo feature, ...</p>
<h2> Details</h2>
<ul>
<li><a href="/tutorial/en/guide/foo/ray.html" target="blank">ray</a></li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Ray</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/foo/ray.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/en/guide/foo/ray.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Ray</source>
      <description>Feature details here.</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>Feature details here.</p>
]]></content:encoded>
    </item>
    <item>
      <title>audio-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/audio/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/audio/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">audio-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>date-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/date/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/date/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">date-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>image-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/image/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/image/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">image-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>imagic-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/imagic/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/imagic/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">imagic-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>markdown-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/markdown/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/markdown/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">markdown-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>phantom-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/phantom/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/phantom/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">phantom-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>photo-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/photo/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/photo/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">photo-plugin</source>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
    </item>
    <item>
      <title>2.x使用示例</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/2.x%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/2.x%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.x使用示例</source>
      <description>qrcode-plugin 2.0使用教程 本文中所有示例case，均可在测试用例中获取： QrCodeGenUserGuide.java</description>
      <pubDate>Mon, 08 Aug 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>qrcode-plugin 2.0使用教程</p>
<p>本文中所有示例case，均可在测试用例中获取： <a href="https://github.com/liuyueyi/quick-media/blob/master/plugins/qrcode-plugin/src/test/java/com/github/hui/quick/plugin/test/QrCodeGenUserGuide.java" target="_blank" rel="noopener noreferrer">QrCodeGenUserGuide.java</a></p>
</blockquote>
<h2> 1. 功能介绍</h2>
<p>大的方面主要分为二维码的生成和解析两块，qrcode-plugin生成二维码的功能上，做了深度的开发定制，目前基本上可以覆盖二维码的各种生成场景</p>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 个性二维码生成</label>
<ul>
<li>支持logo</li>
<li>支持logo样式 （圆角logo， 边框， 圆形logo）</li>
<li>支持二维码颜色设置</li>
<li>支持二维码圆角</li>
<li>支持探测图形颜色设置</li>
<li>支持探测图形选用图片</li>
<li>支持背景图，三种背景样式</li>
<li>支持背景图圆角设置</li>
<li>支持base64格式的二维码图片</li>
<li>支持二维码定制绘制信息样式</li>
<li>三角形</li>
<li>矩形</li>
<li>五边形 （五角星待支持）</li>
<li>六边形</li>
<li>八边形</li>
<li>圆</li>
<li>自定义图片</li>
<li>文字二维码</li>
<li>前置图支持</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 动态二维码生成支持</label></li>
</ul>
<h2> 2. 使用尝鲜</h2>
<h3> - 环境配置</h3>
<p>请直接使用中央仓库引入最新依赖</p>
<ul>
<li><a href="https://mvnrepository.com/artifact/com.github.liuyueyi.media/qrcode-plugin" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/artifact/com.github.liuyueyi.media/qrcode-plugin</a></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - 配置介绍</h3>
<p>使用<code>qrcode-plugin</code>插件生成二维码是一个非常简单的事情，通过一些基本的参数来控制输出二维码样式，一个链式调用即可完成</p>
<p><strong>参数说明</strong></p>
<p>二维码图片的基本参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>探测图形(二维码左上，右上，左下三个方框)的参数配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二维码图形(就是普通二维码中的黑点)绘制参数:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>logo样式配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>背景图配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前置图配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们通过一系列的实例代码，来演示如何生成各种酷炫的二维码</p>
<h3> a. 基本二维码</h3>
<p>生成一个最常见的最普通的二维码，并保存到<code>qr.png</code>文件，一行代码即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/dq.jpg" alt="dq" tabindex="0" loading="lazy"><figcaption>dq</figcaption></figure>
<p><strong>v2.5.2 新增二维码圆角设置</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出圆角的二维码图片(建议图片右键新标签页打开，可以看到明显的四边圆角)</p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/dq_corner1.png" alt="圆角二维码" tabindex="0" loading="lazy"><figcaption>圆角二维码</figcaption></figure>
<h3> b. 颜色指定</h3>
<p>默认的二维码为白底黑块，如果我希望生成白底蓝块（探测图形外青内红）的二维码，可以如下使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/cqr.jpg" alt="cqr.png" tabindex="0" loading="lazy"><figcaption>cqr.png</figcaption></figure>
<h3> c. 带logo二维码生成</h3>
<p>logo目前支持两种样式，一个是圆角logo，一个是直接原图不做处理；下面是一个简单的圆角logo，并带上边框的实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图展示了四张带logo的二维码</p>
<ul>
<li>原始logo</li>
<li>直角带logo背景色</li>
<li>圆角带logo背景色</li>
<li>圆角带logo背景，边框</li>
</ul>
<p><strong>说明：2.4.2版本优化了logo的锯齿严重的问题</strong></p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/logo.jpg" alt="logo" tabindex="0" loading="lazy"><figcaption>logo</figcaption></figure>
<p><strong>v2.4版本新增圆形logo</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/lqr4.png" alt="logo" tabindex="0" loading="lazy"><figcaption>logo</figcaption></figure>
<h3> d. 指定背景图</h3>
<p>背景图目前支持三种样式，分别是二维码全覆盖在背景图上，在背景图的自定区间进行绘制二维码，生成透明二维码但使用背景图进行渲染，下面</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/qbg.jpg" alt="qbg.png" tabindex="0" loading="lazy"><figcaption>qbg.png</figcaption></figure>
<p>给出一个背景图为文字的二维码输出演示case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/bqrTxt.png" alt="bgTxt.png" tabindex="0" loading="lazy"><figcaption>bgTxt.png</figcaption></figure>
<p><strong>v2.5.2 支持背景图圆角、圆形设置</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/bg_style.png" alt="bg_style" tabindex="0" loading="lazy"><figcaption>bg_style</figcaption></figure>
<h3> e. 探测图形样式指定</h3>
<p>探测图形，指的是左上角、右上角、左下角的三个”回字“，除了上面介绍到的指定不同的颜色之外，还可以用图片替换</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/tqr.jpg" alt="探测" tabindex="0" loading="lazy"><figcaption>探测</figcaption></figure>
<p><strong>v2.4 探测图形新增参数special</strong></p>
<ul>
<li>true: 表示探测图形独立绘制，与二维码的绘制样式不同；请注意当设置探测图形img时，这个参数默认为true</li>
<li>false: 探测图形的渲染和二维码一致</li>
</ul>
<p>下面两段代码生成分别为下图一二，请注意<code>setDetectSpecial()</code>设置之后探测图形并不一样了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/tqr3.png" alt="探测" tabindex="0" loading="lazy"><figcaption>探测</figcaption></figure>
<h3> f. 几何样式二维码生成</h3>
<p>默认的二维码的信息为黑色小方块，本插件提供了其他的几个常见的几何形式支持，如圆点，三角，钻石，六边形，八边形；通过指定DrawStyle参数即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/dqr6.jpg" alt="几何" tabindex="0" loading="lazy"><figcaption>几何</figcaption></figure>
<p><strong>v2.4 新增文字二维码</strong></p>
<ul>
<li>指定一串字符串，根据字符串内容生成二维码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/fontQr1.png" alt="文字二维码" tabindex="0" loading="lazy"><figcaption>文字二维码</figcaption></figure>
<p><strong>v2.4.1 支持文字二维码渲染模式（顺序or随机）</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>v2.6.0 新增MINI_RECT样式</strong></p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/dqr0_260.png" alt="MINI_RECT" tabindex="0" loading="lazy"><figcaption>MINI_RECT</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> g. 图片填充</h3>
<p>如果你有一套完整的素材，那么可以考虑用这些素材来生成一个更漂亮的二维码；</p>
<p>比如项目的测试中，给出了两套输出，一个爱心，一个集合图形</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方式，需要稍微注意一下</p>
<ul>
<li>必须指定DrawStyle为图片模式</li>
<li><code>addImg(row, column, img)</code> 来声明素材对应的应用场景，这个表示当出现一个row行，column列都有信息时，用img来填充</li>
<li><code>setDrawImg</code>: 如果所有的二维码图片都是一个的话，可以用这个方法替代<code>addImg(1,1,img)</code></li>
<li><code>setDrawBgImg</code>: 设置的是二维码矩阵中为0（即白色小方块）的渲染图片，不是整个二维码的背景图哦</li>
<li><code>setDrawBgColor(ColorUtil.OPACITY)</code>: 设置二维码绘制背景色为透明，可以充分利用素材图片的透明区域，使显示效果更优雅</li>
</ul>
<p>下面是一个是quick-media提供的三种样式模板</p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/imgQr.jpg" alt="imgQr" tabindex="0" loading="lazy"><figcaption>imgQr</figcaption></figure>
<p><strong>v2.6.0 图片二维码的支持相同位置的多图随机渲染</strong></p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/imgQr2_260.png" alt="MINI_RECT" tabindex="0" loading="lazy"><figcaption>MINI_RECT</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> h. 动态二维码</h3>
<p>接下来介绍一下动态二维码的生成，和背景图的使用姿势基本上完全以往，唯一的区别就是背景图为gif动图</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/list.gif" alt="list.gif" tabindex="0" loading="lazy"><figcaption>list.gif</figcaption></figure>
<h3> i. 前置图</h3>
<p><code>qrcode v2.5.3</code> 提供前置图功能，支持在二维码上层覆盖图片，基本使用姿势如下（项目源码的test中，通过<code>QrCodeGenUserGuide#ft1</code>查看）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/ft.jpg" alt="list.gif" tabindex="0" loading="lazy"><figcaption>list.gif</figcaption></figure>
<p>借助前置图，可以实现某些小伙伴希望在二维码的周边加文字的需求，一种方法是设计一个固定文字的模板，直接作为前置图，使用上面的姿势</p>
<p>也可以自己来生成动态的文字前置图，下面是一个具体实现case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望文字动态，那么更推荐的是结合<code>image-plugin</code>来使用，比如我可以实现文字垂直输出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前置渲染模板还支持动态gif，如添加一个动态的logo</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的二维码如下:</p>
<figure><img src="https://blog.hhui.top/hexblog/imgs/210123/05.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> j. 综合</h3>
<p>上面的几种case，是可以组合使用的，最后给一个综合的"求关注"动态二维码的生成实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.hhui.top/hexblog/imgs/quick/quick-media/star.gif" alt="求关注" tabindex="0" loading="lazy"><figcaption>求关注</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://blog.hhui.top/hexblog/imgs/quick/quick-media/dq.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.x使用示例</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.x使用示例</source>
      <description>3.x版本的二维码做了较大的改进，使用姿势与之前的2.0相比，大体上是一致的；但是细节处有一些差异，在实际使用时，请以3.0系列的使用手册为准</description>
      <pubDate>Sat, 17 Sep 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>3.x版本的二维码做了较大的改进，使用姿势与之前的2.0相比，大体上是一致的；但是细节处有一些差异，在实际使用时，请以3.0系列的使用手册为准</p>
<!-- more -->
<p>本片作为图片二维码的第一篇，将主要介绍一些最常规的基本使用姿势，对于进阶的使用请看后续的详细章节</p>
<h2> 1. 依赖引入</h2>
<blockquote>
<p>项目已发布到maven中央仓库，因此无需额外操作，直接依赖即可</p>
</blockquote>
<p>对于maven进行项目管理，可以在pom.xml文件中，添加下面的依赖，请注意使用最新的版本</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于gradle进行项目管理，可以再gradle文件中，添加下面的依赖</p>
<div class="language-groovy line-numbers-mode" data-ext="groovy"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. 二维码各元素说明</h2>
<p>对于Quick-Media项目而言，我们针对最终生成的二维码，进行了以下几个层级的区分</p>
<figure><img src="/imgs/qrcode/basic/level.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>如上图所示，从上到下，分为四层</p>
<ul>
<li>前置图</li>
<li>logo</li>
<li>二维码</li>
<li>背景图</li>
</ul>
<p>上一层的内容会覆盖下一层的内容，一般通过opacity来设置上一层资源的透明度，其值越偏向于0，则透明度越高</p>
<p>其次再看一下二维码的各要素</p>
<figure><img src="/imgs/qrcode/basic/qrInfo.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>定位探测图形/码眼：即二维码中的三个回字型图案
<ul>
<li>LT(left top) 表示左上</li>
<li>LD(left down) 表示左下</li>
<li>RT(right top) 表示右上</li>
</ul>
</li>
<li>码元/信息点：即二维码中的黑色小方块</li>
<li>背景点：即二维码中的白色小方块</li>
</ul>
<p>上面的三类信息，都支持定制，根据给定的样式、资源进行渲染</p>
<h2> 3. 使用姿势</h2>
<h3> 3.1 基本使用</h3>
<p>最简单的使用姿势无非就是给如一段文本，然后输出对应的二维码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用姿势非常简单，三段式使用姿势：</p>
<ul>
<li><code>QrCodeGenV3.of()</code> 传参为需要二维码的正文信息；返回的是一个 <code>QrCodeV3Options</code> 对象</li>
<li>重点注意这个配置类<code>QrCodeV3Options</code>，后面二维码的各种参数配置、输出格式、资源信息指定，都是通过它来进行的，以 <code>build()</code> 方法表示完成相应的参数配置，此时返回<code>QrCodeGenV3</code>对象</li>
<li><code>asXxx</code> 表示输出二维码，当前中支持多种格式的输出，如base64加密后的文本，BufferedImage，svg文本，文件，二进制流</li>
</ul>
<p>在实际的使用时，可以省略<code>QrCodeV3Options.build()</code>方法的显示调用，即在参数设置完成之后，直接接上<code>asXxx</code>输出二维码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2 基础参数设置</h3>
<p>常规的二维码配置中，有错误级别，边框留白程度，生成二维码大小，输出文件格式等设置，在本实例中，实现上面的配置将是一件非常简单省心的事情</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的 <code>basicConfigAsSvg()</code>，当生成文件的时候，<code>setQrType()</code> 是可以省略的，默认会根据宝成文件名的后缀进行推测，需要创建的是矢量的svg二维码还是普通的图片二维码</p>
<p>如当我们希望生成jpg格式的二维码时，可以如下操作（注意指定 picType = JPG，否则生成二维码可能会出现偏红的场景）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是上面两个实例的实际输出</p>
<table>
<thead>
<tr>
<th style="text-align:center">basicConfigAsSvg</th>
<th style="text-align:center">basicConfigAsJpg</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/basic/qr.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/basic/qr.jpg" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
<h3> 3.3 颜色样式设置</h3>
<p>最常见的个性二维码就是设置二维码的颜色了，我们支持设置探测图形、码元、背景点的颜色，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>几个颜色的设置</strong></p>
<ul>
<li>背景点颜色设置：  setBgColor(xxx)</li>
<li>信息点颜色设置：  setPreColor(xxx)</li>
<li>探测图形颜色设置:  setDetectColor
<ul>
<li>对于探测图形，还可以分别设置外层和内层的颜色</li>
<li>setDetectOutColor 设置外层颜色</li>
<li>setDetectInColor 设置内层颜色</li>
</ul>
</li>
<li>其次设置颜色时，支持三种传参模式
<ul>
<li>color对象</li>
<li>int: 注意jdk的color转int之后，透明度是高两位，请不要省略</li>
<li>string: html格式颜色</li>
</ul>
</li>
</ul>
<p><strong>绘制样式指定</strong></p>
<p>通过指定DrawStyle为MINI_RECT，输出小矩形样式的二维码，当前插件内嵌了矩形、圆、三角形、小矩形、圆角矩形、五边形、星星、六边形、八边形等几种几何样式，具体的使用将在后续的几何渲染篇进行介绍</p>
<p>示例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是上面两个实例的实际输出</p>
<table>
<thead>
<tr>
<th style="text-align:center">colorAsPng</th>
<th style="text-align:center">colorAsPngV2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/basic/colorQr.png" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/basic/colorQr2.png" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
<h3> 3.4 logo设置</h3>
<p>这一节将简单介绍二维码添加logo的使用姿势，更多详情请移步 <a href="">logo使用实例</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接通过 <code>setLogo()</code> 来指定logo的资源图片，上面这种表示从相对路径加载资源文件；同样我们也是支持直接从网络中获取图片</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<figure><img src="/imgs/qrcode/img/logo_override.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>关于logo的设置，还支持下面几个配置</p>
<ul>
<li>setLogoRate: 设置logo大小</li>
<li>setLogoBorderColor: logo边框颜色</li>
<li>setLogoOutBorderColor: logo外层边框颜色</li>
<li>setLogo(new QrResource().setImg().setPicStyle(PicStyle.CIRCLE)): 圆行logo，圆角logo</li>
</ul>
<h3> 3.5 背景设置</h3>
<p>设置二维码的背景也是非常常见的需求，我们支持三种样式的背景选择</p>
<ul>
<li>BgStyle.OVERRIDE:  通常应用于背景图与二维码等大小的场景，将二维码全覆盖到背景图上，然后设置二维码的透明度，这个也是默认的背景样式</li>
<li>BgStyle.FILL: 将二维码绘制在背景图上的指定区域</li>
<li>BgStyle.PENETRATE: 背景图穿透显示, 即二维码主题色为透明，由背景图的颜色进行填充，因此当背景图时渐变色彩时，我们可以得到一个渐变的二维码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际输出结果如下</p>
<figure><img src="/imgs/qrcode/img/bg_default.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3.6 前置图设置</h3>
<p>前置图从层级来看在最上层，主要用于给二维码添加一些装饰修饰，其使用姿势与背景图差不多，唯一需要重点注意的是ftX,ftY这个坐标值</p>
<p>这个坐标表示的是二维码在前置图上绘制的坐标点；因此当前置图小于二维码时，这个坐标可以为负数</p>
<p>当前置图大于二维码时，若前置图为png，存在透明区域，可以通过设置 fillColor 参数来指定透明区域的填充色；</p>
<blockquote>
<p>更多的使用姿势，请移步 <a href="">二维码前置图使用实例</a></p>
</blockquote>
<p>一个简单的使用实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出图如</p>
<figure><img src="/imgs/qrcode/img/ft_basic.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 4. 模板使用</h2>
<p>二维码插件提供了丰富的自定义渲染支持，因此对于一些个性化的二维码生成时，可能会发现设置这些参数会变得非常的复杂；为了解决这个问题，3.x 版本特意支持了模板参数</p>
<blockquote>
<p>模板定义: <a href="https://hhui.top/quick/quick-media/qrcode/3.0%E8%B5%84%E6%BA%90%E6%A8%A1%E6%9D%BF/" target="_blank" rel="noopener noreferrer">3.x资源模板定义</a></p>
</blockquote>
<p>模板使用示例</p>
<ul>
<li>svg矢量二维码： setSvgTemplate(String)</li>
<li>图片二维码: setImgTemplate(String)</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th style="text-align:center">svgTemplate</th>
<th style="text-align:center">imgTplTest</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/tpl/愤怒的小猪.svg" alt="愤怒的小猪" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/tpl/花花草草.jpg" style="max-height: 600px;"></td>
</tr>
</tbody>
</table>
<p>在使用图片资源模板时，请注意，由于图片的资源模板为json格式，因此需要使用第三方的json序列化工具进行反序列化，当前qrcode-plugin内部提供了gson/fastjson/jackson三种序列化框架的支持，但是qrcode-plugin本身不提供对第三方json包的依赖，所以在使用时，请确保项目本身是引入了上面三个依赖包中的任意一个，否则就需要显示依赖一个了</p>
<h2> 5. 小结</h2>
<p>本文作为3.x使用教程的概览，介绍了定制二维码的基本使用姿势，若发现上面的内容不满足您的需求场景，请查看后续的高级使用教程示例</p>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/qrcode/basic/level.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.x矢量二维码之探测图形</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E7%9F%A2%E9%87%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%A0%81%E7%9C%BC_%E5%AE%9A%E4%BD%8D%E7%82%B9%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E7%9F%A2%E9%87%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%A0%81%E7%9C%BC_%E5%AE%9A%E4%BD%8D%E7%82%B9%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.x矢量二维码之探测图形</source>
      <description>接下来将主要看下二维码中的探测图形与定位点的个性化渲染使用实例 关于二维码的各元素介绍，请查看 3.x使用实例#二维码各元素说明</description>
      <pubDate>Mon, 17 Oct 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>接下来将主要看下二维码中的探测图形与定位点的个性化渲染使用实例</p>
<blockquote>
<p>关于二维码的各元素介绍，请查看 <a href="/tutorial/git/quick-media/qrcode/3.x%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html" target="blank">3.x使用实例#二维码各元素说明</a></p>
</blockquote>
<!-- more -->
<h2> 1. 基本介绍</h2>
<p>这一节实例主要针对的是二维码中的探测图形以及定位点，即下图中的几个要素</p>
]]></content:encoded>
    </item>
    <item>
      <title>3.x矢量二维码之个性化绘制</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E7%9F%A2%E9%87%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%BB%98%E5%88%B6%E6%A0%B7%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E7%9F%A2%E9%87%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%BB%98%E5%88%B6%E6%A0%B7%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.x矢量二维码之个性化绘制</source>
      <description>本片文章将主要介绍矢量二维码(svg格式)的绘制样式使用示例，如何将二维码中的黑色/白色矩形(即码元)替换为更多丰富的图形图案 关于二维码的各元素介绍，请查看 3.x使用实例#二维码各元素说明</description>
      <pubDate>Sat, 17 Sep 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>本片文章将主要介绍矢量二维码(svg格式)的绘制样式使用示例，如何将二维码中的黑色/白色矩形(即码元)替换为更多丰富的图形图案</p>
<blockquote>
<p>关于二维码的各元素介绍，请查看 <a href="/tutorial/git/quick-media/qrcode/3.x%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html" target="blank">3.x使用实例#二维码各元素说明</a></p>
</blockquote>
<!-- more -->
<h2> 1. 几何绘制样式</h2>
<p>以下所有实例，可以再源码中获取</p>
<ul>
<li><a href="https://github.com/liuyueyi/quick-media/blob/master/plugins/qrcode-plugin/src/test/java/com/github/hui/quick/plugin/test/v3/svg/QrSvgGeometryGenTest.java" target="_blank" rel="noopener noreferrer">QrSvgGeometryGenTest | GitHub</a></li>
<li><a href="https://gitee.com/liuyueyi/quick-media/blob/master/plugins/qrcode-plugin/src/test/java/com/github/hui/quick/plugin/test/v3/svg/QrSvgGeometryGenTest.java" target="_blank" rel="noopener noreferrer">QrSvgDrawGenTest | Gitee</a></li>
</ul>
<h3> 0.前置准备</h3>
<p>在实际使用时，添加pom依赖，一些术语层级的理解请参看: <a href="../3.x%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF">3.x二维码基本使用姿势</a></p>
<p>基本测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 矩形二维码</h3>
<p>最常规的黑白矩形二维码，也是默认的绘制样式，主要是通过设置 <code>DrawOptions#DrawStyle</code> 来指定具体的二维码样式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现姿势，设置<code>DrawOptions</code>时，一般的方式是：</p>
<ul>
<li>newDrawOptions() 表示开始进入DrawOptions的配置</li>
<li>xxx : 具体的参数配置</li>
<li>complete(): 表示DrawOptions配置完成</li>
</ul>
<p>当然除了上面这种设置方式，也提供了更便捷的配置设置，可以直接省略掉上面的 <code>newDrawOptions</code> 和 <code>complete</code></p>
<p>下面的实现实际与上面的是等价的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li>上面两种方式如何选择？</li>
<li>当配置参数较多时，推荐使用第一种方式，将DrawOptions相关的配置，都放在一起；阅读管理更方便</li>
<li>当配置参数较小时，使用便捷的方式则会使整体用起来、看起来更简单</li>
</ul>
<h3> 2. 圆角矩形</h3>
<p>与上面的区别在于 DrawStyle 的设置不同，其他没有什么区别</p>
<p><strong>DrawStyle.ROUND_RECT</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 小矩形</h3>
<p><strong>DrawStyle.MINI_RECT</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 三角形</h3>
<p><strong>DrawStyle.TRIANGLE</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 五边形</h3>
<p><strong>DrawStyle.DIAMOND</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 五角星</h3>
<p><strong>DrawStyle.STAR</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 六边形</h3>
<p><strong>DrawStyle.HEXAGON</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8. 八边形</h3>
<p><strong>DrawStyle.OCTAGON</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9. 圆</h3>
<p><strong>DrawStyle.CIRCLE</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10. 旋转矩形</h3>
<p><strong>DrawStyle.ROTATE_RECT</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11. 渲染图片示例</h3>
<table>
<thead>
<tr>
<th style="text-align:center">rect</th>
<th style="text-align:center">roundRect</th>
<th style="text-align:center">miniRect</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/rect.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/roundRect.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/miniRect.svg" alt="" loading="lazy"></td>
</tr>
<tr>
<td style="text-align:center">triangle</td>
<td style="text-align:center">diamond</td>
<td style="text-align:center">star</td>
</tr>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/triangle.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/diamond.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/star.svg" alt="" loading="lazy"></td>
</tr>
<tr>
<td style="text-align:center">hexagon</td>
<td style="text-align:center">octagon</td>
<td style="text-align:center">circle</td>
</tr>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/hexagon.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/octagon.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/circle.svg" alt="" loading="lazy"></td>
</tr>
<tr>
<td style="text-align:center">rotateRect</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/rotateRect.svg" alt="" loading="lazy"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2> 2. 个性化样式</h2>
<p>除了以上内置的几何样式的二维码之外，我们还支持直接通过设置svg资源样式，来实现更酷炫的二维码生成</p>
<h3> 0. 资源位定义</h3>
<p>对于信息点/码元，支持直接使用特殊的资源位进行替换</p>
<p>对于svg而言，直接通过设置<code>symbol</code>标签来引入资源位，因此有必要看一下资源位的定义规则，基本上与模板定义的保持一致；</p>
<p>模板标签定义如下</p>
<div class="language-svg line-numbers-mode" data-ext="svg"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性名</th>
<th>实例</th>
<th>是否必须</th>
<th>属性类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>logo</td>
<td>是</td>
<td>svg属性</td>
<td>标签的唯一id</td>
</tr>
<tr>
<td>viwBox</td>
<td>"0 0 128 128"</td>
<td>是</td>
<td>svg属性</td>
<td>svg的视窗</td>
</tr>
<tr>
<td>width</td>
<td>50</td>
<td>否</td>
<td>svg属性</td>
<td>定义资源占用的宽度</td>
</tr>
<tr>
<td>height</td>
<td>50</td>
<td>否</td>
<td>svg属性</td>
<td>定义资源占用的高度</td>
</tr>
<tr>
<td>size</td>
<td>1x1,2x2</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源，在最终二维码中可以占据的位置，如1个黑色点，2x2的黑色点）</td>
</tr>
<tr>
<td>count</td>
<td>-1</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源在最终二维码中最多出现次数，-1表示无次数限制；&gt;0则表示为次数上限</td>
</tr>
<tr>
<td>miss</td>
<td>1-1,2-2</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源未能覆盖的区域</td>
</tr>
<tr>
<td>type</td>
<td><code>pre,bg,logo,detect,detect_lt,detect_ld,detect_rt</code></td>
<td>否</td>
<td>模板自有属性</td>
<td>不存在时默认值为pre,用于定义这个资源类型</td>
</tr>
</tbody>
</table>
<p>当然我们在实际使用过程中，对于资源位的指定，并不需要在标签中指明这些属性，更通常的情况是直接设置一个id即可，而size,count,miss等属性，则由代码侧进行设置</p>
<h3> 1. 统一资源位设置</h3>
<p>当所有的信息点/码元，都使用相同的资源位进行渲染时，可以如下使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是个相对完整的配置，当然我们也提供了更简洁的使用方式，如省略掉<code>newDrawOptions</code> + <code>complete</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意观察上面的 <code>drawPreResourcesV2</code>，省略了设置 DrawStyle, 通常这是没有什么问题的，会自动根据存在自定义的svg资源从而设置全局的绘制样式，但是并不能100%保证这个是没有问题的；因此更推荐的是显示设置这个参数</p>
<p>其次就是资源信息的指定</p>
<ul>
<li><code>new QrResource()</code></li>
</ul>
<p>外部指定的特殊资源，都是放在这个类中，其除了指定资源之外，还可以指定这个资源对应的绘制样式，颜色等其他选项；在只需要指定资源信息时，可以直接省略掉这个类的显示创建，直接通过 <code>setDrawResource(string)</code> 达到同样的效果</p>
<h3> 2. 同时设置信息点，背景点</h3>
<p>上面是设置全局的信息点，我们也支持设置背景点，即将原来的白色小方块用我们自定义的资源进行替换，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的写法也是可以进行简化的；有兴趣的小伙伴可以尝试一下</p>
<h3> 3. 同时支持多种绘制样式</h3>
<p>当我们希望一个二维码中存在多种绘制样式时，也可以非常简单的实现，如下面的示例中，二维码中将存在矩形，圆、三角形、五角星</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义资源和内部提供的几何样式也可以混搭使用，指定不同资源的占位，指定资源出现的次数等</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>drawSpecialResourceV4</code>这个示例非常有代表性，每个资源位除了代替1x1的码元之外，还可以用于渲染MxN的码元，其主要使用姿势在于访问方法<code>createSource()</code>时，前面两个参数就是这个资源位占据的宽高</p>
<p>至于资源位的本身描述信息，如空缺的位置，出现的次数，字体相关的设置，则都是在 <code>QrResource</code> 类中</p>
<p>一个MxN位置的资源，可以是多种类型的，通过<code>addResource()</code>进行添加相同大小的资源信息，最终渲染时默认是随机的方式进行挑选，当一个资源位设置完毕之后，请显示调用build表示结束；所有的资源位通过显示调用<code>over</code>表示设置完成</p>
<h3> 4. 十字格式资源位渲染示例</h3>
<p>默认的资源表示的完全替换 MxN 大小的码元信息；但是如十字架这种资源信息，它是存在空缺的，四个角都是空白的，如果直接渲染3x3的码元，会导致最终的二维码信息缺失</p>
<p>对于这种场景，则会使用到资源位的miss参数，来指定缺省的坐标，如十字格式的资源，缺省坐标为</p>
<ul>
<li>(0,0), (2,0), (0,2), (2,2)</li>
<li>那么对应的配置为 <code>0-0,2-0,0-2,2-2</code></li>
</ul>
<p>具体的使用实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再给一个更复杂点的十字 + 旗子的实例，其中还包含了指定渲染次数，要求全匹配</p>
<ul>
<li>对于这个全匹配的理解，
<ul>
<li>如十字资源没有设置这个，那么允许十字资源的四个角出现star</li>
<li>而flag设置了这个，则旗帜的杆子所在的区域，不能出现star</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 全资源-吃豆人实例</h3>
<p>接下来我们再看一个所有信息点都根据传入的资源进行替换的案例，一个吃豆人的二维码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 文字二维码</h3>
<p>最后在给一个文字二维码的使用姿势，通常来讲这个有两种使用姿势，一个是文字本身就是一个svg资源信息；一个则是直接传入text文本</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个case属于文字的混搭，有传入的文本"小灰"，限制最多只出现6次，其中每个字符按照顺序依次出现，也可以通过设置<code>TxtMode.RANDOM</code>来设置为随机出现</p>
<p>对于文字的二维码方式，下面再给个经典的千字文的二维码样式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 渲染图示例</h3>
<table>
<thead>
<tr>
<th style="text-align:center">drawPreResources</th>
<th style="text-align:center">drawBgPreResources</th>
<th style="text-align:center">drawSpecialResourceV3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_01.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_02.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_03.svg" alt="" loading="lazy"></td>
</tr>
<tr>
<td style="text-align:center">drawSpecialResourceV4</td>
<td style="text-align:center">drawSpecialResourceV5</td>
<td style="text-align:center">drawSpecialResourceV6</td>
</tr>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_04.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_05.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/draw_06.svg" alt="" loading="lazy"></td>
</tr>
<tr>
<td style="text-align:center">symbolCdr</td>
<td style="text-align:center">textQrcode</td>
<td style="text-align:center">textQrCodeV2</td>
</tr>
<tr>
<td style="text-align:center"><img src="/imgs/qrcode/svg/吃豆人.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/txt.svg" alt="" loading="lazy"></td>
<td style="text-align:center"><img src="/imgs/qrcode/svg/txtv2.svg" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/qrcode/svg/rect.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>3.x资源模板定义</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E8%B5%84%E6%BA%90%E6%A8%A1%E6%9D%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/3.x%E8%B5%84%E6%BA%90%E6%A8%A1%E6%9D%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.x资源模板定义</source>
      <description>为了简化设置的复杂性，特意针对svg/img资源渲染方式实现了两个模板解析，省略链式设置的复杂性；通过设置资源模板 tpl 文件，来实现个性二维码的生成 说明：资源模板当前只支持3.x版本，若2.x版本需要使用，请升级 1. svg模板 svg模板中主要定义svg格式的资源信息，当前支持以下几种资源的的设置 二维码信息点/码元 即我们常见的二维码中的黑白方块，其对应的type = pre/bg</description>
      <pubDate>Tue, 09 Aug 2022 12:26:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>为了简化设置的复杂性，特意针对svg/img资源渲染方式实现了两个模板解析，省略链式设置的复杂性；通过设置资源模板 <code>tpl</code> 文件，来实现个性二维码的生成</p>
<blockquote>
<p>说明：资源模板当前只支持3.x版本，若2.x版本需要使用，请升级</p>
</blockquote>
<h2> 1. svg模板</h2>
<p>svg模板中主要定义svg格式的资源信息，当前支持以下几种资源的的设置</p>
<p><strong>二维码信息点/码元</strong></p>
<p>即我们常见的二维码中的黑白方块，其对应的<code>type = pre/bg</code></p>
<p><strong>探测图形</strong></p>
<p>即三个回字形码眼，其设置方式有两种，若所有的码眼都是相同的资源，设置一个 <code>type = detect</code> 的symbol标签即可</p>
<p>若每个码眼对应的资源都是独立的，则需要设置三个symbol标签，对应的type分别为</p>
<ul>
<li>detect_lt: 左上角  (left top)</li>
<li>detect_rt: 右上角  (right top)</li>
<li>detect_ld: 左下角  (left down)</li>
</ul>
<p><strong>logo</strong></p>
<p>svg二维码依然支持logo设置，注意logo对应的资源标签symbol的属性 <code>type = logo</code></p>
<h3> 1.1 模板格式说明</h3>
<p>下面是一个可以直接使用的模板定义文件，将给予它对照说明</p>
<p>以一个可用的模板“愤怒的小猪”进行演示说明</p>
<details> <summary> 点击展开 【愤怒的小猪】  </summary> 
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<br>
<p><strong>模板资源文件定义说明</strong></p>
<p>一级标签支持支持两种：</p>
<ul>
<li><code>&lt;defs&gt;</code>: 等同于svg标准的defs标签用法，其中定义一些svg形状，供其他<code>&lt;symbol&gt;</code>标签通过<code>&lt;use&gt;</code>方式进行引用
<ul>
<li>注意，一个模板文件中，只能有一个<code>&lt;defs&gt;</code>标签，请教所有共用的形状定义放在一起</li>
</ul>
</li>
<li><code>&lt;symbol&gt;</code>： 定义最终输出二维码图片的资源信息，如上面提到的二维码信息点，探测图形，logo，都是放在symbol标签中</li>
</ul>
<h3> 1.2 symbol标签属性说明</h3>
<p>通常而言，一个symbol标签会包含以下几个属性</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>实例</th>
<th>是否必须</th>
<th>属性类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>logo</td>
<td>是</td>
<td>svg属性</td>
<td>标签的唯一id</td>
</tr>
<tr>
<td>viwBox</td>
<td>"0 0 128 128"</td>
<td>是</td>
<td>svg属性</td>
<td>svg的视窗</td>
</tr>
<tr>
<td>width</td>
<td>50</td>
<td>否</td>
<td>svg属性</td>
<td>定义资源占用的宽度</td>
</tr>
<tr>
<td>height</td>
<td>50</td>
<td>否</td>
<td>svg属性</td>
<td>定义资源占用的高度</td>
</tr>
<tr>
<td>size</td>
<td>1x1,2x2</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源，在最终二维码中可以占据的位置，如1个黑色点，2x2的黑色点）</td>
</tr>
<tr>
<td>count</td>
<td>-1</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源在最终二维码中最多出现次数，-1表示无次数限制；&gt;0则表示为次数上限</td>
</tr>
<tr>
<td>miss</td>
<td>1-1,2-2</td>
<td>否</td>
<td>模板自有属性</td>
<td>定义这个资源未能覆盖的区域</td>
</tr>
<tr>
<td>type</td>
<td><code>pre,bg,logo,detect,detect_lt,detect_ld,detect_rt</code></td>
<td>否</td>
<td>模板自有属性</td>
<td>不存在时默认值为pre,用于定义这个资源类型</td>
</tr>
</tbody>
</table>
<p>其中size,count,miss三个属性的设置实际上对应的是二维码配置参数中的三个同名配置</p>
<p><strong>size说明</strong></p>
<p>默认情况下我们会认为一个资源文件的对应的就是一个黑色/白色小方块，此时<code>size = 1x1</code>，取值规则为 "size=宽x高"</p>
<p>当我们希望一个资源文件是一个宽100，高50时，此时希望它对应一个横向连着的两个小方块，此时则需要显示设置 <code>size = 2x1</code>；</p>
<p>同样的一个等宽高的资源文件，除了对应1x1的区域之外，还可以对应2x2, 3x3的区域，即一个资源文件可以对应多个size，此时size的取值可以是 <code>size=1x1,2x2,3x3</code></p>
<p><strong>count</strong></p>
<p>当我们希望控制一个资源最多出现的次数时，则可以使用这个属性，默认值为-1，表示不限制次数</p>
<p><strong>miss</strong></p>
<p>默认的情况下，我们认为一个资源内容是将 size 对应的区域完全填充的，不留空白的，但是某些特殊的场景下我们并不是这么希望的，比如我现在有一个十字架结构的资源，它对应的区域为3x3，但是它会有四个明显的空白区域：左上，左下，右上，右下</p>
<p>此时我们可以通过设置miss属性来定义这个资源文件中，空白的坐标点</p>
<p>如上面距离的十字架，对应的<code>miss=0-0,0-2,2-0,2-2</code></p>
<ul>
<li>英文逗号分隔</li>
<li>x-x表示空白地方的坐标点</li>
</ul>
<h3> 1.3 使用实例</h3>
<p>接下来看一下一个最简单的资源模板使用实例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终生成的二维码如</p>
<figure><img src="/imgs/qrcode/tpl/愤怒的小猪.svg" alt="愤怒的小猪" tabindex="0" loading="lazy"><figcaption>愤怒的小猪</figcaption></figure>
<h2> 2. img模板</h2>
<blockquote>
<p>主要应用于使用图片资源来渲染二维码的场景；对于普通几何图形、颜色自定义等场景，请不要使用模板方式</p>
</blockquote>
<p>模板格式说明，json格式；主要分四块资源配置</p>
<ul>
<li>draw: 二维码0/1点对应的资源</li>
<li>detect: 探测图形对应的资源</li>
<li>logo: logo对应的配置信息</li>
<li>bg: 背景图资源参数</li>
<li>ft: 前置图资源参数</li>
</ul>
<p>同样以一个真实的资源实例进行说明</p>
<details> <summary> 点击展开 【花草二维码】  </summary> 
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<h3> 2.1 模板配置说明</h3>
<p>图片模板，要求是标准的json格式文件（后续考虑兼容yaml格式）；区别于svg模板，它还可以设置背景图、前置图，下面对不同模块进行分别说明</p>
<h4> 2.1.1 二维码信息点</h4>
<p>即二维码中的黑白方块，其配置信息放在 <code>draw</code> 下面</p>
<p>配置参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片资源是一个数组，其内的配置项与svg的差不多</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2.2 探测图形（码眼）</h4>
<p>探测图形有三个，通常有两种方式，若三个码眼长一样，则直接设置img值即可；若不一样，则分别设置lt, ld, rt</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2.3 logo</h4>
<p>对于logo的配置基本上就和直接设置logo参数一样，模板中自定义的几个属性如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2.4 bg背景图</h4>
<p>背景图设置，具体参数同样可以参考背景图的参数含义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要额外注意的一点是，若背景图为gif图，请一定一定设置 <code>imgType = gif</code></p>
<h4> 2.2.5 ft前置图</h4>
<p>前置图设置，具体参数同样参考前置图的参数定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2 使用实例</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/qrcode/tpl/花花草草.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/qrcode/tpl/愤怒的小猪.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>qrcode-plugin</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/git/quick-media/qrcode/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">qrcode-plugin</source>
      <description>二维码自定义生成工具包</description>
      <pubDate>Thu, 02 Feb 2023 08:04:06 GMT</pubDate>
      <content:encoded><![CDATA[<p>二维码自定义生成工具包</p>
]]></content:encoded>
    </item>
  </channel>
</rss>