<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml" rel="self" type="application/rss+xml"/>
    <title>一灰灰的站点</title>
    <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/</link>
    <description>一灰灰的全网知识站点</description>
    <language>zh-CN</language>
    <pubDate>Fri, 03 Feb 2023 13:41:14 GMT</pubDate>
    <lastBuildDate>Fri, 03 Feb 2023 13:41:14 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by 一灰灰blog</copyright>
    <image>
      <title>一灰灰的站点</title>
      <url>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/logo.svg</url>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/</link>
    </image>
    <category>SpringBoot</category>
    <category>基础系列</category>
    <category>AOP</category>
    <category>应用篇</category>
    <category>DB系列</category>
    <category>H2Database</category>
    <category>JPA</category>
    <category>JdbcTemplate</category>
    <category>Jooq</category>
    <category>MongoDB</category>
    <category>Mybatis</category>
    <category>Redis</category>
    <category>事务</category>
    <category>示例</category>
    <category>采坑记录</category>
    <category>redis</category>
    <category>分布式锁</category>
    <category>Bean</category>
    <item>
      <title>3.拦截优先级详解</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/03.190310-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/03.190310-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.拦截优先级详解</source>
      <description>前面两篇分别介绍了AOP的基本使用姿势和一些高级特性，当时还遗留了一个问题没有说明，即不同的advice，拦截同一个目标方法时，优先级是怎样的，本篇博文将进行详细分析 同一个切面中，不同类型的advice的优先级 同一个切面中，同一种类型的advice优先级 不同切面中，同一类型的advice优先级 不同切面中，不同类型的advice优先级</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Sun, 10 Mar 2019 21:37:05 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面两篇分别介绍了AOP的基本使用姿势和一些高级特性，当时还遗留了一个问题没有说明，即不同的advice，拦截同一个目标方法时，优先级是怎样的，本篇博文将进行详细分析</p>
<ul>
<li>同一个切面中，不同类型的advice的优先级</li>
<li>同一个切面中，同一种类型的advice优先级</li>
<li>不同切面中，同一类型的advice优先级</li>
<li>不同切面中，不同类型的advice优先级</li>
</ul>
<!-- more -->
<h2> I. 统一切面，不同类型ddvice优先级</h2>
<p>在不分析源码的前提下，也只能通过实际的case来看优先级问题了，我们现在设计一下使用实例，通过输出结果来看对应的优先级</p>
<h3> 1. case设计</h3>
<p>首先创建被拦截的bean: <code>com.git.hui.boot.aop.order.InnerDemoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来写一个切面，里面定义我们常见的各种advice</p>
<blockquote>
<p>对于aop的使用，有疑问的可以参考: <a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>使用SpringBoot的项目进行测试aop，使用还是比较简单的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面执行的输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果进行反推，我们可以知道统一切面中，advice执行的先后顺序如下</p>
<figure><img src="/imgs/190310/00.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> II. 同一切面，同一类型切面</h3>
<p>正常来讲，拦截一个方法时，统一类型的切面逻辑都会写在一起，那这个case有什么分析的必要呢？</p>
<p>在我们实际的使用中，同一类型的advice拦截同一个方法的可能性还是很高的，why? 因为多个advice有自己定义的拦截规则，它们之间并不相同，但可能存在交集，比如我们在上面的切面中，再加一个拦截注解的<code>before advice</code></p>
<h3> 1. case设计</h3>
<p>依然是上面的<code>InnerDemoBean</code>，方法上加一个自定义注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后加一个拦截注解的advice</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>再次执行前面的case，然后看下输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主要看下两个before，发现 <code>AnoBefore</code> 在前面; 因此这里的一个猜测，顺序就是根据方法命名的顺序来的，比如我们再加一个 <code>doXBefore</code>，然后我们预估输出结果应该是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>额外添加一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是输出结果如下，和我们预期一致</p>
<figure><img src="/imgs/190310/01.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 3. Order注解尝试</h3>
<p>我们知道有个Order注解可以来定义一些优先级，那么把这个注解放在advice方法上，有效么？实际尝试一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果注解有效，我们预期输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再次执行，看下输出结果是否和我们预期一样</p>
<figure><img src="/imgs/190310/02.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 4. 小结</h3>
<p>同一个切面中，相同的类型的advice，优先级是根据方法命名来的，加<code>@Order</code>注解是没有什么鸟用的，目前也没有搜索到可以调整优先级的方式</p>
<h3> III. 不同切面，相同类型的advice</h3>
<p>如果说上面这种case不太好理解为啥会出现的话，那么这个可能就容易理解多了；毕竟一个切面完成一件事情，出现相同的advice就比较常见了；</p>
<p>比如spring mvc中，我们通常会实现的几个切面</p>
<ul>
<li>一个before advice的切面，实现输出请求日志</li>
<li>一个before advice的切面，实现安全校验（这种其实更常见的是放在filter/intercept中）</li>
</ul>
<h3> 1. case设计</h3>
<p>现在就需要再加一个切面，依然以before advice作为case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>接下来看测试输出结果如下图</p>
<figure><img src="/imgs/190310/03.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<p>发现了一个有意思的事情了，<code>AnotherOrderAspect</code>切面的输出，完全在<code>OrderAspect</code>切面中所有的advice之前，接着我们再次尝试使用<code>@Order</code>注解来试试，看下会怎样</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果顺序有关，我们预期的输出结果应该是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际测试输出如下，和我们预期一致</p>
<figure><img src="/imgs/190310/04.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h3> 3. 小结</h3>
<p>从上面的测试来看，不同的切面，默认顺序实际上是根据切面的命令来的；</p>
<ul>
<li>A切面中的advice会优先B切面中同类型的advice</li>
<li>我们可以通过 <code>Order</code> 注解来解决不同切面的优先级问题，依然是值越小，优先级越高</li>
</ul>
<h2> IV. 不同切面，不同advice顺序</h2>
<p>其实前面的case已经可以说明这个问题了，现在稍稍丰富一下<code>AnotherOrderAspect</code>，看下结果</p>
<h3> 1. case设计</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>看下执行后的输出结果</p>
<figure><img src="/imgs/190310/05.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<p>假设A切面优先级高于B切面，那么我们执行先后顺序如下</p>
<figure><img src="/imgs/190310/06.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>
<h2> V. 小结</h2>
<p>本篇内容有点多，针对前面的测试以及结果分析，给出一个小结，方便直接获取最终的答案</p>
<h3> 1. 不同advice之间的优先级顺序</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2. 统一切面中相同advice</h3>
<p>统一切面中，同类型的advice的优先级根据方法名决定，暂未找到可以控制优先级的使用方式</p>
<h3> 3. 不同切面优先级</h3>
<p>不同切面优先级，推荐使用 <code>@Order</code>注解来指定，数字越低，优先级越高</p>
<h3> 4. 不同切面advice执行顺序</h3>
<p>优先级高的切面中的advice执行顺序会呈现包围优先级低的advice的情况，更直观的先后顺序，推荐看第四节的顺序图，更加清晰明了</p>
<h2> VI. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190310/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.AOP实现一个日志插件（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/04.190313-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/04.190313-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.AOP实现一个日志插件（应用篇）</source>
      <description>前面针对AOP的使用姿势和一些疑问进行了说明，这一篇则从应用的角度出发，看下AOP可以实现些什么样的效果 190301-SpringBoot基础篇AOP之基本使用姿势小结 190302-SpringBoot基础篇AOP之高级使用技能 190310-SpringCloud基础篇AOP之拦截优先级详解</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <category>应用篇</category>
      <pubDate>Wed, 13 Mar 2019 21:27:37 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面针对AOP的使用姿势和一些疑问进行了说明，这一篇则从应用的角度出发，看下AOP可以实现些什么样的效果</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/02/190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD/" target="_blank" rel="noopener noreferrer">190302-SpringBoot基础篇AOP之高级使用技能</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/03/10/190310-SpringCloud%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E6%8B%A6%E6%88%AA%E4%BC%98%E5%85%88%E7%BA%A7%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190310-SpringCloud基础篇AOP之拦截优先级详解</a></li>
</ul>
<!-- more -->
<h2> I. AOP实现日志拦截</h2>
<h3> 1. 背景及目标</h3>
<p>对于后端服务而言，一个日常的需求就是需要记录一些关键方法调用历史情况，用于分析接口的响应、问题定位排查等，属于比较常见的场景了</p>
<p>因此，我们希望可以针对某些接口，知道传入的参数时什么，谁调用的，返回了啥，耗时多少这些基本信息。显然这些属于公用的普适性需求，与方法本身的业务无关，如果直接在每个方法内部中加这个逻辑，就比较恶心了；为了最少的倾入性和通用性，正好可以使用AOP来实现这么一个功能</p>
<ul>
<li>拦截目标方法的执行</li>
<li>打印请求参数，返回结果和执行时间到日志</li>
</ul>
<h3> 2. 实现</h3>
<p>这个属于比较aop的简单使用场景，因为需要知道返回结果，所有选择 <code>around</code> 或者 <code>afterReturning</code> advice；此外需要统计方法执行耗时，这样就只能选中 <code>around</code> 了</p>
<p>首先我们支持自定义注解方式，先定义一个注解，只要这个方法上有这个注解，就拦截</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，如果想更通用拦截指定包路径下的方法，可以如下定义PointCut；注意下面语句中的<code>||</code>表示或，只有有一个满足即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是我们的advice实现了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试</h3>
<p>添加下测试代码，我们先创建两个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>1.h2databse集成示例demo</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/H2Database/01.200911-SpringBoot%E7%B3%BB%E5%88%97h2databse%E9%9B%86%E6%88%90%E7%A4%BA%E4%BE%8Bdemo.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/H2Database/01.200911-SpringBoot%E7%B3%BB%E5%88%97h2databse%E9%9B%86%E6%88%90%E7%A4%BA%E4%BE%8Bdemo.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.h2databse集成示例demo</source>
      <description>h2dabase基于内存的数据库，更常见于嵌入式数据库的使用场景，依赖小，功能齐全；一般来讲，正常的商业项目用到它的场景不多，但是在一些特殊的case中，还是比较有用的，比如用于单元测试，业务缓存，一些简单的示例demo等；本文将手把手教你创建一个继承h2dabase的项目，并支持从sql中导入预定好的schema和data</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>H2Database</category>
      <pubDate>Fri, 11 Sep 2020 08:23:59 GMT</pubDate>
      <content:encoded><![CDATA[<p>h2dabase基于内存的数据库，更常见于嵌入式数据库的使用场景，依赖小，功能齐全；一般来讲，正常的商业项目用到它的场景不多，但是在一些特殊的case中，还是比较有用的，比如用于单元测试，业务缓存，一些简单的示例demo等；本文将手把手教你创建一个继承h2dabase的项目，并支持从sql中导入预定好的schema和data</p>
<!-- more -->
<h2> I. 项目创建</h2>
<p>本文对应的示例demo，采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. pom配置</h3>
<p>关于如何创建一个springboot项目本文就不介绍了，在我们创建好的项目中，<code>pom.xml</code>文件如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注一下<code>dependency</code>中的<code>com.h2database</code>，另外两个非必须，只是在后面的测试用例中会用到，推荐加上</p>
<p>从上面的引入也可以知道，我们将借助JPA来操作数据库</p>
<h3> 2. 属性配置</h3>
<p>既然是连接数据库，当然少不了数据库的相关配置，在项目的资源路径下，新建配置文件<code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置方式，和我们的mysql数据库配置没有什么特别的，这里的url请注意一下</p>
<ul>
<li><code>jdbc:h2:~/h2-db</code>: 嵌入式使用姿势，会在用户根目录下生成一个名为<code>h2-db.mv.db</code>的文件（数据库的schema 和d column就存在里面）</li>
<li><code>jdbc:h2:mem:DBName;DB_CLOSE_DELAY=-1</code>: 内存模式，应用重启之后数据库会清空，所以在测试用例中，可以考虑用这种</li>
</ul>
<p>除了上面嵌入式的使用姿势之外，h2-dabase还支持通过tcp方式，指定一个远程的目录</p>
<ul>
<li><code>jdbc:h2:tcp://localhost/~/test</code></li>
</ul>
<p>上面是h2dabase的基本配置，为了更友好的展示，我们开启了h2dabase的web console控制台</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最好开启一下jpa的sql语句</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例测试</h2>
<p>上面配置搞完之后，基本上就可以说是完成了h2dabase的集成了</p>
<h3> 0. 入口</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot应用的启动入口，上面执行之后，我们就可以通过<code>http://localhost:8080/h2</code>访问h2dabase的控制台，注意下面框处的内容，与前面的配置文件保持一致</p>
<figure><img src="/imgs/200911/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>登录之后，就是一个建议的数据库操作控制台了</p>
<h3> 1. Entity定义</h3>
<p>下面这个属于JPA的知识点，对于jpa有兴趣的小伙伴，可以看一下前面的<a href="http://spring.hhui.top/spring-blog/categories/SpringBoot/DB%E7%B3%BB%E5%88%97/JPA/" target="_blank" rel="noopener noreferrer">《JPA系列教程》</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Repository接口</h3>
<p>数据库操作接口，直接使用默认的curd即可，并没有额外的添加方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试case</h3>
<p>接下来给几个CURD的测试case，来演示一下我们的集成效果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测case如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/200911/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. sql文件导入</h3>
<p>注意我们前面的所有步骤，没有任何一个地方有说明需要主动去创建一个名为<code>test</code>的表，这一点和我们熟悉的mysql是不一样的；</p>
<p>某些时候我们可能希望将准备好的sql文件来初始化数据库，这个时候可以如下操作</p>
<p>对应的sql文件</p>
<p><strong>表结构 <code>schema-h2.sql</code></strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据文件 <code>data-h2.sql</code></strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个文件准备好，接下来我们如何导入呢？</p>
<p>借助<code>sql-maven-plugin</code>方式，在pom配置文件中，添加下面这段</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后如下操作即可</p>
<figure><img src="/imgs/200911/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>导入成功之后，再到h2控制台，就可以查看对应的数据</p>
<figure><img src="/imgs/200911/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/100-h2database" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/100-h2database</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200911/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>H2Database</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/H2Database/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/H2Database/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">H2Database</source>
      <description>SpringBoot整合H2Database，实现老生常谈的CURD</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot整合H2Database，实现老生常谈的CURD</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.JPA之基础环境搭建</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/01.190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/01.190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.JPA之基础环境搭建</source>
      <description>JPA（Java Persistence API）Java持久化API，是 Java 持久化的标准规范，Hibernate是持久化规范的技术实现，而Spring Data JPA是在 Hibernate 基础上封装的一款框架。JPA作为标准，实际上并没有说局限于某个固定的数据源，事实上mysql，mongo， solr都是ok的。接下来我们将介绍下springboot结合jpa 来实现mysql的curd以及更加复杂一点的sql支持</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Wed, 12 Jun 2019 20:08:16 GMT</pubDate>
      <content:encoded><![CDATA[<p>JPA（Java Persistence API）Java持久化API，是 Java 持久化的标准规范，Hibernate是持久化规范的技术实现，而Spring Data JPA是在 Hibernate 基础上封装的一款框架。JPA作为标准，实际上并没有说局限于某个固定的数据源，事实上mysql，mongo， solr都是ok的。接下来我们将介绍下springboot结合jpa 来实现mysql的curd以及更加复杂一点的sql支持</p>
<!-- more -->
<p>jpa系列教程将包含以下几块</p>
<ul>
<li>环境搭建</li>
<li>基础的插入、修改、删除数据的使用姿势</li>
<li>基础的单表查询，如(&gt;, &lt;, = , in, like, between)，分页，排序等</li>
<li>多表关联查询</li>
<li>事物使用</li>
</ul>
<p>本篇为开始第一篇，先搭建一个可以愉快玩耍的jpa项目</p>
<h2> I. 环境搭建</h2>
<p>我们选择的数据库为mysql，所以有必要先安装一下，这里跳过mysql的安装教程，直接进入springboot项目的搭建</p>
<h3> 1. pom依赖</h3>
<p>我们这里选择的是<code>2.0.4.RELEASE</code>版本进行演示</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的pom依赖中，关键的是下面两个， 第一个引入的是jpa相关包，后面那个则是mysql的连接依赖，相当于指定操作mysql数据库</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>创建一个测试表进行后续的读写操作，为了后续的事物讲解方便，我们创建一个表，里面存了每个人的钱</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在表中随意插入几条数据，以方便后面使用</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190612/00.jpg" alt="dbdata" tabindex="0" loading="lazy"><figcaption>dbdata</figcaption></figure>
<h3> 3. 属性配置</h3>
<p>创建springboot工程之后，添加mysql的相关配置，在resources目录下，新建文件 <code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190612/01.jpg" alt="config" tabindex="0" loading="lazy"><figcaption>config</figcaption></figure>
<h3> 4. 项目构建并测试</h3>
<p>根据JPA的一般使用姿势，我们需要针对上面的表，创建一个对应的POJO对象，将它们关联起来，代码如下：</p>
<ul>
<li>注意下几个注解 <code>@Entity</code>, <code>@Table</code>, <code>@Column</code>, <code>@Id</code>, <code>@GeneratedValue</code></li>
<li>注意下POJO中字段的类型，这里保证了和db的字段定义类型一致</li>
<li>（关于上面两点的更多知识点，后面的文章会给出更详细用法说明，欢迎持续跟进）</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表结构定义完毕之后，接下来就是定义db的操作api，jpa的使用，通过方法名来解析出对应的sql，我们这里定义一个简单的Money表的操作API:</p>
<ul>
<li><code>MoneyDemoRepository</code> 继承自 <code>JpaRepository</code></li>
<li>两个泛型参数，第一个表示这个repository操作的表绑定的POJO，第二个表示自增id类型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个定义完毕之后，不需要其他的操作，就可以进行测试环境了，上面这个Repository提供了一些简单的操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的测试case进行简单的说明，前面定义了一个POJO对象和一个<code>RepositoryAPI</code>，我们想直接操作对应的表，需要借助这个<code>RepositoryAPI</code>对象，但是它是接口类型，我们没法直接使用的，因为我们是在Spring生态体系中，所以可以直接通过IoC注入方式使用</p>
<p>所以上面的测试中，<code>MoneyDemoRepository</code> 对象实际上是由框架生成的一个代理对象，下面我们看下执行结果</p>
<figure><img src="/imgs/190612/02.jpg" alt="test" tabindex="0" loading="lazy"><figcaption>test</figcaption></figure>
<h3> 5. 小结</h3>
<p>从上面的步骤下来，会发现搭建一个jpa的项目工程属于比较简单的过程，添加必要的依赖，稍微注意的是两个</p>
<ul>
<li>创建一个POJO 与我们实际的表关联起来</li>
<li>创建一个<code>RepositoryApi</code>继承自<code>org.springframework.data.repository.CrudRepository</code></li>
<li>通过IoC/DI方式注入<code>RepositoryApi</code>对象，然后可以愉快的进行db操作</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190612/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.JPA之新增记录使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/02.190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/02.190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.JPA之新增记录使用姿势</source>
      <description>上一篇文章介绍了如何快速的搭建一个JPA的项目环境，并给出了一个简单的演示demo，接下来我们开始业务教程，也就是我们常说的CURD，接下来进入第一篇，如何添加数据 通过本篇文章，你可以get到以下技能点 POJO对象如何与表关联 如何向DB中添加单条记录 如何批量向DB中添加记录 save 与 saveAndFlush的区别</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Fri, 14 Jun 2019 14:23:05 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇文章介绍了如何快速的搭建一个JPA的项目环境，并给出了一个简单的演示demo，接下来我们开始业务教程，也就是我们常说的CURD，接下来进入第一篇，如何添加数据</p>
<p>通过本篇文章，你可以get到以下技能点</p>
<ul>
<li>POJO对象如何与表关联</li>
<li>如何向DB中添加单条记录</li>
<li>如何批量向DB中添加记录</li>
<li>save 与 saveAndFlush的区别</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<p>实际开始之前，需要先走一些必要的操作，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章 <a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></p>
<p>下面简单的看一下演示添加记录的过程中，需要的配置</p>
<h3> 1. 表准备</h3>
<p>沿用前一篇的表，结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目配置</h3>
<p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. Insert使用教程</h2>
<blockquote>
<p>在开始之前，先声明一下，因为个人实际项目中并没有使用到JPA，对JPA的原则和hibernate的一些特性了解的也不多，目前处于学习探索阶段，主要是介绍下使用姿势，下面的东西都是经过测试得出，有些地方描述可能与规范不太一样，或者有些差错，请发现的大佬指正</p>
</blockquote>
<p>接下来我们进入正题，如何通过JPA实现我们常见的Insert功能</p>
<h3> 1. POJO与表关联</h3>
<p>首先第一步就是将POJO对象与表关联起来，这样就可以直接通过java的操作方式来实现数据库的操作了；</p>
<p>我们直接创建一个MoneyPo对象，包含上面表中的几个字段</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然而然地，我们就有几个问题了</p>
<ul>
<li>这个POJO怎么告诉框架它是和表Money绑定的呢？</li>
<li>Java中变量命令推荐驼峰结构，那么 <code>isDeleted</code> 又如何与表中的 <code>is_deleted</code> 关联呢？</li>
<li>POJO中成员变量的类型如何与表中的保持一致呢，如果不一致会怎样呢？</li>
</ul>
<p>针对上面的问题，一个一个来说明</p>
<p>对hibernate熟悉的同学，可能知道我可以通过xml配置的方式，来关联POJO与数据库表（当然mybatis也是这么玩的），友情链接一下<a href="https://docs.jboss.org/hibernate/core/4.3/manual/en-US/html/ch01.html#tutorial-associations-mappinguser" target="_blank" rel="noopener noreferrer">hibernate的官方说明教程</a>；我们使用SpringBoot，当然是选择注解的方式了，下面是通过注解的方式改造之后的DO对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几个有意思的地方，需要我们注意</p>
<h4> a. entity注解</h4>
<p><code>@Entity</code> 这个注解比较重要，用于声明这个POJO是一个与数据库中叫做 <code>money</code> 的表关联的对象；</p>
<ul>
<li><code>@Entity</code>注解有一个参数name，用于指定表名，如果不主动指定时，默认用类名，即上面如果不指定那么，那么默认与表 <code>moneypo</code> 绑定</li>
</ul>
<p>另外一个常见的方式是在类上添加注解 <code>@Table</code>，然后指定表名，也是可以的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 主键指定</h4>
<p>我们可以看到id上面有三个注解，我们先看下前面两个</p>
<ul>
<li><code>@Id</code> 顾名思义，用来表明这家伙是主键，比较重要，需要特殊关照</li>
<li><code>@GeneratedValue</code> 设置初始值，谈到主键，我们一般会和”自增“这个一起说，所以你经常会看到的取值为 <code>strategy = GenerationType.IDENTITY</code> (由数据库自动生成）</li>
</ul>
<p>这个注解主要提供了四种方式，分别说明如下</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GenerationType.TABLE</code></td>
<td>使用一个特定的数据库表格来保存主键</td>
</tr>
<tr>
<td><code>GenerationType.SEQUENCE</code></td>
<td>根据底层数据库的序列来生成主键，条件是数据库支持序列</td>
</tr>
<tr>
<td><code>GenerationType.IDENTITY</code></td>
<td>主键由数据库自动生成（主要是自动增长型）</td>
</tr>
<tr>
<td><code>GenerationType.AUTO</code></td>
<td>主键由程序控制</td>
</tr>
</tbody>
</table>
<p>关于这几种使用姿势，这里不详细展开了，有兴趣的可以可以看一下这博文: <a href="https://blog.csdn.net/fancylovejava/article/details/7438660" target="_blank" rel="noopener noreferrer">@GeneratedValue</a></p>
<h4> c. Column注解</h4>
<p>这个注解就是用来解决我们pojo成员名和数据库列名不一致的问题的，这个注解内部的属性也不少，相对容易理解，后面会单开一章来记录这些常用注解的说明查阅</p>
<h4> d. CreateDate注解</h4>
<p>这个注解和前面不一样的是它并非来自<code>jpa-api</code>包，而是<code>spring-data-common</code>包中提供的，表示会根据当前时间创建一个时间戳对象</p>
<h4> e. 其他</h4>
<p>到这里这个POJO已经创建完毕，后续的表中添加记录也可以直接使用它了，但是还有几个问题是没有明确答案的，先提出来，期待后文可以给出回答</p>
<ol>
<li>POJO属性的类型与表中类型</li>
<li>mysql表中列可以有默认值，这个在POJO中怎么体现</li>
<li>一个表包含另一个表的主键时（主键关联，外键）等特殊的情况，POJO中有体现么？</li>
</ol>
<h3> 2. Repository API声明</h3>
<p>jpa非常有意思的一点就是你只需要创建一个接口就可以实现db操作，就这么神奇，可惜本文里面见不到太多神奇的用法，这块放在查询篇来见证奇迹</p>
<p>我们定义的API需要继承自<code>org.springframework.data.repository.CrudRepository</code>，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好的，到这里就可以直接添加数据了 （感觉什么都没干，你居然告诉我可以插入数据？？？）</p>
<h3> 3. 使用姿势</h3>
<h4> a. 基础使用case</h4>
<p>常规的使用姿势，无非单个插入和批量插入，我们先来看一下常规操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面的两个插入方式，就这么简单，</p>
<ul>
<li>通过IoC/DI注入 repository</li>
<li>创建PO对象，然后调用<code>save</code>, <code>saveAll</code>方法就ok了</li>
</ul>
<p>上面是一般的使用姿势，那么非一般使用姿势呢？</p>
<h4> b. 插入时默认值支持方式</h4>
<p>在创建表的时候，我们知道字段都有默认值，那么如果PO对象中某个成员我不传，可以插入成功么？会是默认的DB值么？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当看到上面的<code>try/catch</code>可能就有预感，上面的执行多半要跪（😏😏😏），下面是执行截图，也是明确告诉了我们这个不能为null</p>
<figure><img src="/imgs/190614/00.jpg" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure>
<p><strong>那么有办法解决么？难道就这么向现实放弃，向大佬妥协么？</strong></p>
<p>默认值嘛，一个很容易想到的方法，我直接在PO对象中给一个默认值，是不是也可以，然后我们的PO改造为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码注释一行,变成下面这个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行看下结果如何，顺利走下去，没有报错，喜大普奔</p>
<figure><img src="/imgs/190614/01.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure>
<p>这样我就满足了吗？要是手抖上面测试注释掉的那一行忘了注释，岂不是依然会跪？而且我希望是表中的默认值，直接在代码中硬编码会不会不太优雅？这个主动设置的默认值，在后面查询的时候会不会有坑？</p>
<ul>
<li>作为一个有追求的新青年，当然对上面的答案say no了</li>
</ul>
<p>我们的解决方法也简单，在PO类上，加一个注解 <code>@DynamicInsert</code>，表示在最终创建sql的时候，为null的项就不要了哈</p>
<p>然后我们的新的PO，在原始版本上变成如下(注意干掉上一次的默认值）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来一波实际的测试，完美了，没有抛异常，插入成功，而且控制台中输出的sql日志也验证了我们上面说的<code>@DynamicInsert</code>注解的作用（日志输出hibernate的sql，可以通过配置application.properties文件，添加参数<code>spring.jpa.show-sql=true</code>）</p>
<figure><img src="/imgs/190614/02.jpg" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure>
<h4> c. 类型关联</h4>
<p>针对上面的PO对象，有几个地方感觉不爽，isDelete我想要boolean，true表示删除false表示没删除，搞一个byte用起来太不方便了，这个要怎么搞？</p>
<p>这个并不怎么复杂，因为直接将byte类型改成boolean就可以了，如果db中时0对应的false；1对应的true，下面是验证结果，并没有啥问题</p>
<figure><img src="/imgs/190614/03.jpg" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure>
<p>在JPA规范中，并不是所有的类型的属性都可以持久化的，下表列举了可映射为持久化的属性类型:</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本类型</td>
<td>byte、int、short、long、boolean、char、float、double</td>
</tr>
<tr>
<td>基本类型封装类</td>
<td>Byte、Integer、Short、Long、Boolean、Character、Float、Double</td>
</tr>
<tr>
<td>字节和字符数组</td>
<td>byte[]、Byte[]、char[]、Character[]</td>
</tr>
<tr>
<td>大数值类型</td>
<td>BigInteger、BigDecimal</td>
</tr>
<tr>
<td>字符串类型</td>
<td>String</td>
</tr>
<tr>
<td>时间日期类</td>
<td>java.util.Date、java.util.Calendar、java.sql.Date、java.sql.Time、java.sql.Timestamp</td>
</tr>
<tr>
<td>集合类</td>
<td>java.util.Collection、java.util.List、java.util.Set、java.util.Map</td>
</tr>
<tr>
<td>枚举类型</td>
<td></td>
</tr>
<tr>
<td>嵌入式</td>
<td></td>
</tr>
</tbody>
</table>
<p>关于类型关联，在查询这一篇会更详细的进行展开说明，比如有个特别有意思的点</p>
<p><strong>如db中is_delete为1，需要映射到PO中的false，0映射到true，和我们上面默认的是个反的，要怎么搞？</strong></p>
<h4> d. 插入时指定ID</h4>
<p>再插入的时候，我们上面的case都是没有指定id的，但是如果你指定了id，会发生什么事情？</p>
<p>我们将po恢复到之前的状态，测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下输出结果，惊讶的发现，这个指定id并没有什么卵用，最终db中插入的记录依然是自增的方式来的</p>
<figure><img src="/imgs/190614/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>为什么会这样子呢，我们看下sql是怎样的</p>
<figure><img src="/imgs/190614/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>直接把id给丢了，也就是说我们设置的id不生效，我们知道<code>@GeneratedValue</code> 这个注解指定了id的增长方式，如果我们去掉这个注解会怎样</p>
<figure><img src="/imgs/190614/06.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从输出结果来看：</p>
<ul>
<li>如果这个id对应的记录不存在，则新增</li>
<li>如果这个id对应的记录存在，则更新</li>
</ul>
<p>不然这个注解可以主动指定id方式进行插入or修改，那么如果没有这个注解，插入时也不指定id，会怎样呢？</p>
<p>很遗憾的是直接抛异常了，没有这个注解，就必须手动赋值id了</p>
<figure><img src="/imgs/190614/07.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>本文主要介绍了下如何使用JPA来实现插入数据，单个or批量插入，也抛出了一些问题，有的给出了回答，有的等待后文继续跟进，下面简单小结一下主要的知识点</p>
<ul>
<li>POJO与表关联方式
<ul>
<li>注意几个注解的使用</li>
<li>如 <code>@Entity</code>, <code>@Table</code> 用于指定这个POJO对应哪张表</li>
<li>如 <code>@Column</code> 用于POJO的成员变量与表中的列进行关联</li>
<li>如 <code>@Id</code> <code>@GeneratedValue</code>来指定主键</li>
<li>POJO成员变量类型与DB表中列的关系</li>
</ul>
</li>
<li>db插入的几种姿势
<ul>
<li>save 单个插入</li>
<li>saveAll 批量插入</li>
<li>插入时，如要求DO中成员为null时，用mysql默认值，可以使用注解 <code>@DynamicInsert</code>，实现最终拼接部分sql方式插入</li>
<li>指定id查询时的几种case</li>
</ul>
</li>
</ul>
<p>此外本文还留了几个坑没有填</p>
<ul>
<li>POJO成员类型与表列类型更灵活的转换怎么玩？</li>
<li>save 与 saveAndFlush 之间的区别（从命名上，前者保存，可能只保存内存，不一定落库；后者保存并落库，但是没有找到验证他们区别的实例代码，所以先不予评价）</li>
<li>注解的更详细使用说明</li>
</ul>
<h2> II. 其他</h2>
<h3> -1. 相关博文</h3>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="https://blog.csdn.net/fancylovejava/article/details/7438660" target="_blank" rel="noopener noreferrer">@GenerateValue</a></li>
<li><a href="https://docs.jboss.org/hibernate/core/4.3/manual/en-US/html/ch01.html#tutorial-associations-mappinguser" target="_blank" rel="noopener noreferrer">hibernate官方教程</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190614/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.JPA之update使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/03.190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/03.190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.JPA之update使用姿势</source>
      <description>上面两篇博文拉开了jpa使用姿势的面纱一角，接下来我们继续往下扯，数据插入db之后，并不是说就一层不变了，就好比我在银行开了户，当然是准备往里面存钱了，有存就有取（特别是当下银行利率这么低还不如买比特币屯着，截止19年6月22日，btc已经突破1.1w$，可惜没钱买😭）这就是我们今天的主题，数据更新--update的使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Sun, 23 Jun 2019 09:43:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>上面两篇博文拉开了jpa使用姿势的面纱一角，接下来我们继续往下扯，数据插入db之后，并不是说就一层不变了，就好比我在银行开了户，当然是准备往里面存钱了，有存就有取（特别是当下银行利率这么低还不如买比特币屯着，截止19年6月22日，btc已经突破1.1w$，可惜没钱买😭）这就是我们今天的主题，数据更新--update的使用姿势</p>
<!-- more -->
<p>通过本篇博文，您至少可以选到</p>
<ul>
<li><code>save()</code> 直接根据id来修改记录</li>
<li>利用<code>jpl</code> 实现查询修改的使用姿势</li>
<li>初识事物的神秘面纱</li>
</ul>
<h2> I. 环境准备</h2>
<p>在开始之前，当然得先准备好基础环境，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></li>
</ul>
<p>下面简单的看一下演示添加记录的过程中，需要的配置</p>
<h3> 1. 表准备</h3>
<p>沿用前一篇的表，结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目配置</h3>
<p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据准备</h3>
<p>数据修改嘛，所以我们先向表里面插入两条数据，用于后面的操作</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190623/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. Update使用教程</h2>
<p>下面开始进入正题，为方便初看的同学（没空或者没兴趣瞅前面几个博文的同学）会有部分内容和前面的博文相同，看过的请无视</p>
<h3> 1. 表关联POJO</h3>
<p>前面插入篇已经介绍了POJO的逐步创建过程，已经对应的注解含义，下面直接贴出成果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面类中的几个注解，说明如下</p>
<ul>
<li><code>@Data</code> 属于lombok注解，与jpa无关，自动生成<code>getter/setter/equals/hashcode/tostring</code>等方法</li>
<li><code>@Entity</code>, <code>@Table</code> jpa注解，表示这个类与db的表关联，具体匹配的是表 <code>money</code></li>
<li><code>@Id</code> <code>@GeneratedValue</code> 作用与自增主键</li>
<li><code>@Column</code>表明这个属性与表中的某列对应</li>
<li><code>@CreateDate</code>根据当前时间来生成默认的时间戳</li>
</ul>
<h3> 2. Repository API声明</h3>
<p>接下来我们新建一个api继承自<code>CurdRepository</code>，然后通过这个api来与数据库打交道</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 使用姿势</h3>
<h4> a. save</h4>
<p>在前面一篇插入博文中，我们知道当POJO的id存在时，调用save方法可能有两种情况</p>
<ul>
<li>若db中这个id对应的字段不存在，则插入</li>
<li>若db中这个id对应的字段存在，则更新</li>
</ul>
<p>我们来试一下更新的效果，下面的代码演示了两块，一个是当po中的所有成员值有效，更新其中的一个时，会怎样；另外一个演示的是部分更新时会怎样（name为空，表示我不希望更新name）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果发现，前面执行成功，后面执行失败</p>
<figure><img src="/imgs/190623/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面为第一个执行结果，从拼接的sql可以知道，是全量的修改；输出结果也如我们预期</p>
<p>后面将name设置为空之后，再次更新，发现抛出异常，如下，这个是因为我们的db限制，字段不允许有null的存在</p>
<figure><img src="/imgs/190623/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从拼接的sql上看，我们知道是因为每个成员都作为了<code>update sql</code>家族的一员，在insert这一篇中我们也遇到了类似的问题，当时是在POJO上添加注解<code>@DynamicInsert</code>，根据实际需要选择插入，那么在更新这里是不是也有类似的注解呢</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在pojo上添加注解<code>@DynamicUpdate</code>之后，再次进行尝试，结果如下</p>
<figure><img src="/imgs/190623/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>居然还是失败了，从输出的sql来看，居然把<code>name</code>和<code>money</code>都当成了sql的一部分，难道是因为我们调用了setter方法的原因么。待着猜测，再来一次</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，看来我们上面的猜测并不对，拼接sql应该是根据哪个字段发生了变化，就把哪个做为sql的一部分来做的</p>
<figure><img src="/imgs/190623/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面这个使用姿势看完之后，会有一个明显的感觉，这个更新的支持，必须先获取目标对象再进行修改，很难满足我们的日常业务场景；</p>
<h4> b. 查询更新</h4>
<p>根据某个条件来更新对应的数据，这个就比较常见了，在jpa中，没有找到根据方法名来支撑这种场景的方式，但是发现了另外一个有意思的东西--<code>jql</code></p>
<p>直接在方法方面，添加注解，注解内部写sql</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是一个查询更新的case，注意两个注解</p>
<ul>
<li><code>@Modifying</code> 这个必须有，告诉框架我们执行的是更新/删除操作</li>
<li><code>@Query</code> 内部是正常的sql语句，但是需要注意的是表名，不是实际的表，而是我们前面定义的POJO</li>
</ul>
<p>然后来测试一下使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，悲催的发现居然报错了 <code>Caused by: javax.persistence.TransactionRequiredException: Executing an update/delete query</code></p>
<figure><img src="/imgs/190623/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从堆栈的描述上来看，更新/删除必须要开启事务，那么事务是什么东西呢？下面推荐几篇博文</p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">mysql之锁与事务详解</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">Spring学习之事务的使用姿势</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">Spring学习之事务管理与传播属性</a></li>
</ul>
<p>关于jpa中更多事务相关的，后面再引入，我们先回到本文主题，如何解决问题: 在调用上面的方法上面添加事务注解即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行之后，结果如下</p>
<figure><img src="/imgs/190623/06.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>看上面的结果，发现money+3333之后的输出结果居然还是6666；但是我们再看db的结果，已经是9999了，为什么会这样呢？</p>
<figure><img src="/imgs/190623/07.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面这个问题比较有意思了，初步猜测与事物已经jpa的内部缓存机制有关系，至于具体是不是这样，有必要专门开坑来验证一二</p>
<h3> 4. 小结</h3>
<p>利用JPA实现表数据的更新，上面主要介绍了两种方式， save + jql</p>
<p><strong>save</strong></p>
<p>通过save更新时，需要指定id来实现单条记录的修改</p>
<p><strong>jql</strong></p>
<p>语法与sql差不多，配合两个注解 <code>@Modifying</code>, <code>@Query</code>来使用，下面是一个实例，两点需要注意</p>
<ul>
<li>表名是我们定义的与db中表关联的POJO</li>
<li>参数传递格式为<code>?index</code>， index为参数位置</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据修改和删除，需要显示声明事务，否则会报错，一个是在调用的方法上添加注解 <code>@Transactional</code>，或者直接在repository api的接口上添加注解 <code>@Transactional</code></p>
<h2> II. 其他</h2>
<h3> 0. 源码与相关博文</h3>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></li>
</ul>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">mysql之锁与事务详解</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">Spring学习之事务的使用姿势</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">Spring学习之事务管理与传播属性</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190623/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.JPA之delete使用姿势详解</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/04.190702-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bdelete%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/04.190702-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bdelete%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.JPA之delete使用姿势详解</source>
      <description>常见db中的四个操作curd，前面的几篇博文分别介绍了insert，update，接下来我们看下delete的使用姿势，通过JPA可以怎样删除数据 一般来讲是不建议物理删除（直接从表中删除记录）数据的，在如今数据就是钱的时代，更常见的做法是在表中添加一个表示状态的字段，然后通过修改这个字段来表示记录是否有效，从而实现逻辑删除；这么做的原因如下 物理删除，如果出问题恢复比较麻烦 无法保证代码一定准确，在出问题的时候，删错了数据，那就gg了 删除数据，会导致重建索引 Innodb数据库对于已经删除的数据只是标记为删除，并不真正释放所占用的磁盘空间，这就导致InnoDB数据库文件不断增长，也会导致表碎片 逻辑删除，保留数据，方便后续针对数据的挖掘或者分析</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Tue, 02 Jul 2019 20:03:02 GMT</pubDate>
      <content:encoded><![CDATA[<p>常见db中的四个操作curd，前面的几篇博文分别介绍了insert，update，接下来我们看下delete的使用姿势，通过JPA可以怎样删除数据</p>
<p>一般来讲是不建议物理删除（直接从表中删除记录）数据的，在如今数据就是钱的时代，更常见的做法是在表中添加一个表示状态的字段，然后通过修改这个字段来表示记录是否有效，从而实现逻辑删除；这么做的原因如下</p>
<ul>
<li>物理删除，如果出问题恢复比较麻烦</li>
<li>无法保证代码一定准确，在出问题的时候，删错了数据，那就gg了</li>
<li>删除数据，会导致重建索引</li>
<li>Innodb数据库对于已经删除的数据只是标记为删除，并不真正释放所占用的磁盘空间，这就导致InnoDB数据库文件不断增长，也会导致表碎片</li>
<li>逻辑删除，保留数据，方便后续针对数据的挖掘或者分析</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<p>在开始之前，当然得先准备好基础环境，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
</ul>
<p>下面简单的看一下演示添加记录的过程中，需要的配置</p>
<h3> 1. 表准备</h3>
<p>沿用前一篇的表，结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目配置</h3>
<p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据准备</h3>
<p>数据修改嘛，所以我们先向表里面插入两条数据，用于后面的操作</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190702/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. Delete使用教程</h2>
<p>下面谈及到的删除，都是物理删除，可以理解为直接将某些记录从表中抹除掉（并不是说删了就完全没有办法恢复）针对CURD四种操作而言，除了read之外，另外三个insert,update,delete都会加写锁（一般来将会涉及到行锁和gap锁，从后面也会看到，这三个操作要求显示声明事物）</p>
<h3> 1. 表关联POJO</h3>
<p>前面插入篇已经介绍了POJO的逐步创建过程，已经对应的注解含义，下面直接贴出成果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面类中的几个注解，说明如下</p>
<ul>
<li><code>@Data</code> 属于lombok注解，与jpa无关，自动生成<code>getter/setter/equals/hashcode/tostring</code>等方法</li>
<li><code>@Entity</code>, <code>@Table</code> jpa注解，表示这个类与db的表关联，具体匹配的是表 <code>money</code></li>
<li><code>@Id</code> <code>@GeneratedValue</code> 作用与自增主键</li>
<li><code>@Column</code>表明这个属性与表中的某列对应</li>
<li><code>@CreateDate</code>根据当前时间来生成默认的时间戳</li>
</ul>
<h3> 2. Repository API声明</h3>
<p>接下来我们新建一个api继承自<code>CurdRepository</code>，然后通过这个api来与数据库打交道</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 使用姿势</h3>
<p>先写一个用于查询数据的方法，用于校验我们执行删除之后，是否确实被删除了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行下面操作之前，先调用上面的，输出结果如</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> a. 根据主键id进行删除</h4>
<p>这种应该属于最常见的删除方式了，为了避免误删，通过精确的主键id来删除记录，是一个非常好的使用姿势，<code>CrudRepository</code>这个接口已经提供了对应的方法，所以我们可以直接使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕之后，输出结果如下，对比前面的输出可以知道 <code>id=21</code> 的记录被删除了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>然后一个疑问自然而然的来了，如果这个id对应的记录不存在，会怎样?</strong></p>
<p>把上面代码再执行一次，发现抛了异常</p>
<figure><img src="/imgs/190702/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>为什么会这样呢？我们debug进去，调用的实现是默认的 <code>SimpleJpaRepository</code>，其源码如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码可以看出，这个是先通过id进行查询，如果对应的记录不存在时，直接抛异常；当存在时，走remove逻辑；</p>
<p>如果我们希望删除一个不存在的数据时，不要报错，可以怎么办？</p>
<ul>
<li>自定义实现一个继承<code>SimpleJpaRepository</code>的类，覆盖删除方法</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再调用上面的方法就可以了，不演示具体的测试case了，源码可以到项目工程中查看 👉  <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">源码</a></p>
<h4> b. 条件判断删除</h4>
<p>虽然根据id进行删除比较稳妥，但也无法避免某些情况下需要根据其他的字段来删除，比如我们希望删除名为 <code>jpa 一灰灰7</code>的数据，这时则需要我们在<code>MoneyDeleteRepository</code>新增一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里比较简单的提一下这个方法的命名规则，后面在查询这一篇会更加详细的说明；</p>
<ul>
<li><code>delete</code> 表示执行的是删除操作</li>
<li><code>By</code> 表示根据某个字段来进行条件限定</li>
<li><code>Name</code> 这个有POJO中的属性匹配</li>
</ul>
<p>上面这个方法，如果翻译成sql，相当于 <code>delete from money where name=xx</code></p>
<p>调用方式和前面一样，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们执行上面的测试，发现并不能成功，报错了</p>
<figure><img src="/imgs/190702/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>通过前面update的学习，知道需要显示加一个事物的注解，我们这里直接加在<code>Repository</code>中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次执行输出如下，这里我们把sql的日志也打印了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从最终剩余的记录来看，name为<code>jpa 一灰灰7</code>的被删除了，再看一下前面删除的sql，会发现一个有意思的地方，<code>deleteByName</code> 这个方法，翻译成sql变成了两条</p>
<ul>
<li><code>select * from money where name=xxx</code>  先根据name查询记录</li>
<li><code>delete from money where id = xxx</code>  根据前面查询记录的id，删除记录</li>
</ul>
<h4> c. 比较删除</h4>
<p>接下来演示一个删除money在<code>[2000,3000]</code>区间的记录，这时我们新增的放入可以是</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过方法命名也可以简单知道上面这个等同于sql <code>delete from money where money between xxx and xxx</code></p>
<p>测试代码为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出日志</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从拼接的sql可以看出，上面的逻辑等同于，先执行了查询，然后根据id一个一个进行删除....</p>
<h3> 4. 小结</h3>
<p>我们通过声明方法的方式来实现条件删除；需要注意</p>
<ul>
<li>删除需要显示声明事物 <code>@Transactional</code></li>
<li>删除一个不存在的记录，会抛异常</li>
<li>声明删除方法时，实际等同于先查询记录，然后根据记录的id进行精准删除</li>
</ul>
<h2> II. 其他</h2>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></li>
</ul>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">mysql之锁与事务详解</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">Spring学习之事务的使用姿势</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">Spring学习之事务管理与传播属性</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/23/190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190623-SpringBoot系列教程JPA之update使用姿势</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190702/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.JPA之query使用姿势详解之基础篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/05.190717-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bquery%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/05.190717-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bquery%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.JPA之query使用姿势详解之基础篇</source>
      <description>前面的几篇文章分别介绍了CURD中的增删改，接下来进入最最常见的查询篇，看一下使用jpa进行db的记录查询时，可以怎么玩 本篇将介绍一些基础的查询使用姿势，主要包括根据字段查询，and/or/in/like/between 语句，数字比较，排序以及分页</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Wed, 17 Jul 2019 19:25:24 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面的几篇文章分别介绍了CURD中的增删改，接下来进入最最常见的查询篇，看一下使用jpa进行db的记录查询时，可以怎么玩</p>
<p>本篇将介绍一些基础的查询使用姿势，主要包括根据字段查询，<code>and/or/in/like/between</code> 语句，数字比较，排序以及分页</p>
<!-- more -->
<h2> I. 环境准备</h2>
<p>在开始之前，当然得先准备好基础环境，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
</ul>
<p>下面简单的看一下演示添加记录的过程中，需要的配置</p>
<h3> 1. 表准备</h3>
<p>沿用前一篇的表，结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目配置</h3>
<p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据准备</h3>
<p>数据修改嘛，所以我们先向表里面插入两条数据，用于后面的操作</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190717/s00.jpg" alt="db" tabindex="0" loading="lazy"><figcaption>db</figcaption></figure>
<h2> II. Query基本使用姿势</h2>
<p>下面进入简单的查询操作姿势介绍，单表的简单and/or/in/compare查询方式</p>
<h3> 1. 表关联POJO</h3>
<p>查询返回的记录与一个实体类POJO进行绑定，借助前面的分析结果，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面类中的几个注解，说明如下</p>
<ul>
<li><code>@Data</code> 属于lombok注解，与jpa无关，自动生成<code>getter/setter/equals/hashcode/tostring</code>等方法</li>
<li><code>@Entity</code>, <code>@Table</code> jpa注解，表示这个类与db的表关联，具体匹配的是表 <code>money</code></li>
<li><code>@Id</code> <code>@GeneratedValue</code> 作用与自增主键</li>
<li><code>@Column</code>表明这个属性与表中的某列对应</li>
<li><code>@CreateDate</code>根据当前时间来生成默认的时间戳</li>
</ul>
<h3> 2. Repository API声明</h3>
<p>接下来我们新建一个api继承自<code>CurdRepository</code>，然后通过这个api来与数据库打交道，后面会在这个类中添加较多的查询方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 使用姿势</h3>
<h4> a. 根据id查询</h4>
<p><code>CrudRepository</code>已经提供的功能，根据主键id进行查询，对于使用者而言，没有什么需要额外操作的，直接访问即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 根据字段查询</h4>
<p>除了根据主键查询，实际的业务场景中，根据某个字段进行查询的case，简直不要更多，在jpa中可以怎么做呢?</p>
<ul>
<li>在<code>Repository</code>接口中声明一个方法，命名规则为</li>
<li><strong>findByXXX</strong> 或者 <strong>queryByXXX</strong> (注意这里的xxx用POJO中的成员名替换,表示根据这个成员进行查询）</li>
</ul>
<p>一个简单的case，如果我希望实现根据name进行查询，那么在<code>MoneyBaseQueryRepository</code>中添加下面两个方法中的任意一个都可以</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要多个成员的查询呢？也简单，形如<code>findByXxxAndYyyy</code>相当于sql中的<code>where xxxx=? and yyy=?</code></p>
<p>如我们也可以增加下面两个方法(一个and、一个or查询）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的测试case可以如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后输出结果如下，下面也包括了对应的sql，便于理解</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. like查询</h4>
<p>上面的查询方式为等值查询，当在sql中除了等值查询（即=查询）之外，还有各种比较查询，不等查询以及like语句，在jpa中也比较简单，在<code>repository</code>定义的方法名，加一个like即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候，需要稍微注意一下，根据实际情况决定要不要加上 '%'</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. in查询</h4>
<p>对于in查询，<code>CurdRepository</code>提供了根据主键id的查询方式，直接调用<code>findAllById</code>即可，如果是其他的，可以通过声明一个接口的方式来支持</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. 比较查询</h4>
<p>数字的比较查询，比如大于等于，大于，小于，小于等于，between，下面的三个方法声明，应该能直观表示这种方式可以如何写</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是简单的映射关系</p>
<ul>
<li><code>&gt;</code> :  <code>xxGreaterThan</code></li>
<li><code>&gt;=</code>: <code>xxGreaterThanEqual</code></li>
<li><code>&lt;</code>: <code>xxLessThan</code></li>
<li><code>&lt;=</code>: <code>xxLessThanEqual</code></li>
<li><code>!=</code>: <code>xxNot</code></li>
<li><code>between a and b</code> : <code>xxIsBetween</code></li>
</ul>
<p>测试case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> f. 排序</h4>
<p>排序也属于基本查询的case了，jpa的实现中，通过加上<code>OrderByXxxAsc/Desc</code>的方式来决定根据什么进行升序or降序</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在根据多个列进行排序时，需要注意的是不能写多个 <code>OrderBy</code> 而是直接在<code>OrderBy</code>后面加上对应的<code>xxxAscyyyDesc</code></p>
<p>测试代码如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> g. 分页查询</h4>
<p>分页有两种方式，一个是查询最大的多少条数据，一个是正常的limit/offset方式，下面是一个简单的实例demo</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对于分页而言，通过传入参数Pageable来表明即可</strong></p>
<p>测试case如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 小结</h3>
<p>主要介绍了jpa的查询的最基本使用方式,主要是根据规则定义方法名的方式来实现sql的效果, 下表示一个简单的对比小结</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>等效sql</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>findByXxx</code></td>
<td>表示根据列<code>Xxx</code>等于传参构建sql</td>
<td><code>where xxx= ?</code></td>
</tr>
<tr>
<td><code>findByXxxAndYyy</code></td>
<td>根据多个列进行查询</td>
<td><code>where xxx=? and yyy=?</code></td>
</tr>
<tr>
<td><code>findByXxxOrYyy</code></td>
<td>根据多个列实现or查询</td>
<td><code>where xxx=? or yyy=?</code></td>
</tr>
<tr>
<td><code>findByXxxLike</code></td>
<td>like查询，需要注意查询条件中加%</td>
<td><code>where xxx like </code></td>
</tr>
<tr>
<td><code>findByXxxIn</code></td>
<td>in查询</td>
<td><code>where Xxx in ()</code></td>
</tr>
<tr>
<td><code>findByXxxGreaterThan</code></td>
<td>大于</td>
<td><code>where xxx &gt; ?</code></td>
</tr>
<tr>
<td><code>findByXxxGreaterThanEqual</code></td>
<td>大于等于</td>
<td><code>where xxx &gt;= ?</code></td>
</tr>
<tr>
<td><code>findByXxxLessThan</code></td>
<td>小于</td>
<td><code>where xxx &lt; ?</code></td>
</tr>
<tr>
<td><code>findByXxxLessThanEqual</code></td>
<td>小于等于</td>
<td><code>where xxx &lt;= ?</code></td>
</tr>
<tr>
<td><code>findByXxxNot</code></td>
<td>不等于</td>
<td><code>where xxx != ?</code></td>
</tr>
<tr>
<td><code>findByXxxIsBetween</code></td>
<td>between查询</td>
<td><code>where xxx between ? and ?</code></td>
</tr>
<tr>
<td><code>OrderByXxxDesc</code></td>
<td>排序</td>
<td><code>order by xxx desc</code></td>
</tr>
<tr>
<td><code>topN</code></td>
<td>分页，表示获取最前面的n条</td>
<td><code>limit n</code></td>
</tr>
</tbody>
</table>
<p>此外还有一个分页的方式是传参<code>Pageable</code>，来指定具体的分页</p>
<p>我们常见的查询操作中，除了上面的一些case之外，还有一些是我们没有提到的，如下面的一些使用姿势，则会在后面的文章中引入</p>
<ul>
<li><code>group by</code></li>
<li><code>distinct</code></li>
<li><code>join</code></li>
<li>各种函数的支持(sum,max,min,avg...)</li>
<li>查询部分表中部分字段时</li>
<li>统计查询</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 源码&amp;相关博文</h3>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></li>
</ul>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">mysql之锁与事务详解</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">Spring学习之事务的使用姿势</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">Spring学习之事务管理与传播属性</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/06/23/190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190623-SpringBoot系列教程JPA之update使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/07/02/190702-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bdelete%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190702-SpringBoot系列教程JPA之delete使用姿势详解</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190717/s00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.JPA之指定id保存</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/06.191119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%8C%87%E5%AE%9Aid%E4%BF%9D%E5%AD%98.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/06.191119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%8C%87%E5%AE%9Aid%E4%BF%9D%E5%AD%98.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.JPA之指定id保存</source>
      <description>前几天有位小伙伴问了一个很有意思的问题，使用JPA保存数据时，即便我指定了主键id，但是新插入的数据主键却是mysql自增的id；那么是什么原因导致的呢？又可以如何解决呢? 本文将介绍一下如何使用JPA的AUTO保存策略来指定数据库主键id</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Tue, 19 Nov 2019 19:52:36 GMT</pubDate>
      <content:encoded><![CDATA[<p>前几天有位小伙伴问了一个很有意思的问题，使用JPA保存数据时，即便我指定了主键id，但是新插入的数据主键却是mysql自增的id；那么是什么原因导致的呢？又可以如何解决呢?</p>
<p>本文将介绍一下如何使用JPA的AUTO保存策略来指定数据库主键id</p>
<!-- more -->
<h2> I. 环境准备</h2>
<p>实际开始之前，需要先走一些必要的操作，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章 <a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484246&amp;idx=1&amp;sn=dc53bcaaca00b955eeda0e54c1dcfbed&amp;chksm=fce718facb9091ecb5d9a76b039c5f52fbddb23aa383991aa633c0daa00752dbcb4916393730&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></p>
<p>下面简单的看一下后续的代码中，需要的配置 （我们使用的是mysql数据库）</p>
<h3> 1. 表准备</h3>
<p>沿用前一篇的表，结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目配置</h3>
<p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. Insert教程</h2>
<p>首先简单的看一下，我们一般使用默认的数据库自增生成主键的使用方式，以便后面的自定义主键生成策略的对比</p>
<p>对于jpa的插入数据的知识点不太清楚的同学，可以看一下之前的博文： <a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484247&amp;idx=1&amp;sn=a58a45f11c0758045b07b1d8fcf0873a&amp;chksm=fce718fbcb9091ed779b0e472c7c9e923c9874c3ba796bd6a05af526bb0faef8a8bba7fee8fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></p>
<h3> 1. 自增主键</h3>
<p>首先我们需要定义PO，与数据库中的表绑定起来</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的主键生成策略用的是 <code>GenerationType.IDENTITY</code>，配合mysql的使用就是利用数据库的自增来生成主键id</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来保存数据就很简单了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>强烈建议实际的体验一下上面的代码执行</p>
<p>首次执行确保数据库中不存在id为20的记录，虽然我们的PO对象中，指定了id为20，但是执行完毕之后，新增的数据id却不是20</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是执行的sql日志，注意插入的sql，是没有指定id的，所以新增的记录的id就会利用mysql的自增策略</p>
<p>当我们的db中存在id为20的记录时，再次执行，查看日志发现实际执行的是更新数据</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>大胆猜测，save的执行过程逻辑如</strong></p>
<ul>
<li>首先根据id到数据库中查询对应的数据</li>
<li>如果数据不存在，则新增（插入sql不指定id）</li>
<li>如果数据存在，则判断是否有变更，以确定是否需要更新</li>
</ul>
<h3> 2. 指定id</h3>
<p>那么问题来了，如果我希望当我的po中指定了数据库id时，db中没有这条记录时，就插入id为指定值的记录；如果存在记录，则更新</p>
<p>要实现上面这个功能，自定义主键id，那么我们就需要修改一下主键的生成策略了，官方提供了四种</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GenerationType.TABLE</code></td>
<td>使用一个特定的数据库表格来保存主键</td>
</tr>
<tr>
<td><code>GenerationType.SEQUENCE</code></td>
<td>根据底层数据库的序列来生成主键，条件是数据库支持序列</td>
</tr>
<tr>
<td><code>GenerationType.IDENTITY</code></td>
<td>主键由数据库自动生成（主要是自动增长型）</td>
</tr>
<tr>
<td><code>GenerationType.AUTO</code></td>
<td>主键由程序控制</td>
</tr>
</tbody>
</table>
<p>从上面四种生成策略说明中，很明显我们要使用的就是AUTO策略了，我们新增一个PO，并指定保存策略</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用自定义的生成策略，需要注意，<code>@GenericGenerator(name = "myid", strategy = "com.git.hui.boot.jpa.generator.ManulInsertGenerator")</code>这个需要有，否则执行会抛异常</p>
<p>这一行代码的意思是，主键id是由<code>ManulInsertGenerator</code>来生成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的主键生成方式也比较简单了，首先是判断PO中有没有主键，如果有则直接使用PO中的主键值；如果没有，就利用<code>IdentityGenerator</code>策略来生成主键（而这个主键生成策略，正好是<code>GenerationType.IDENTITY</code>利用数据库自增生成主键的策略）</p>
<p>接下来我们再次测试插入</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码执行时，确保数据库中没有主键为20的数据，输出sql日志如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的日志输出</p>
<ul>
<li>第一次插入时拼装的写入sql是包含id的，也就达到了我们指定id新增数据的要求</li>
<li>第二次插入时，因为id=20的记录存在，所以执行的是更新操作</li>
<li>第三次插入时，因为没有id，所以插入的sql中也没有指定id，使用mysql的自增来生成主键id</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目&amp;博文</h3>
<ul>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484246&amp;idx=1&amp;sn=dc53bcaaca00b955eeda0e54c1dcfbed&amp;chksm=fce718facb9091ecb5d9a76b039c5f52fbddb23aa383991aa633c0daa00752dbcb4916393730&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484247&amp;idx=1&amp;sn=a58a45f11c0758045b07b1d8fcf0873a&amp;chksm=fce718fbcb9091ed779b0e472c7c9e923c9874c3ba796bd6a05af526bb0faef8a8bba7fee8fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484257&amp;idx=1&amp;sn=6b68fc6745d000f84bc75dc76e24ddf0&amp;chksm=fce718cdcb9091db719d14bde42aef0e0d68ad5636f65d5704ce88580394209f5f56b56ce0fb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190623-SpringBoot系列教程JPA之update使用姿势</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484262&amp;idx=1&amp;sn=5cf81ea48e9854837e6efb3c04c2b36b&amp;chksm=fce718cacb9091dc1df7417dd9f638d35cc9de16a84b62a3bd4481d208f49806e2d59c2414b6&amp;token=1576389657&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">190702-SpringBoot系列教程JPA之delete使用姿势详解</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484273&amp;idx=1&amp;sn=483d3317dd5172c6fa73292c82e41041&amp;chksm=fce718ddcb9091cb1872787234efa986d9a1e1711f60761976006113c9c352416cc300e2c6ae&amp;token=1576389657&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">190717-SpringBoot系列教程JPA之query使用姿势详解之基础篇</a></p>
</li>
<li>
<p>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></p>
</li>
<li>
<p>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>7.JPA 错误姿势之环境配置问题</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/07.191218-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA-%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/07.191218-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA-%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.JPA 错误姿势之环境配置问题</source>
      <description>又回到jpa的教程上了，这一篇源于某个简单的项目需要读写db，本想着直接使用jpa会比较简单，然而悲催的是实际开发过程中，发现了不少的坑；本文为错误姿势第一篇，Repository接口无法注入问题</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Wed, 18 Dec 2019 19:51:38 GMT</pubDate>
      <content:encoded><![CDATA[<p>又回到jpa的教程上了，这一篇源于某个简单的项目需要读写db，本想着直接使用jpa会比较简单，然而悲催的是实际开发过程中，发现了不少的坑；本文为错误姿势第一篇，Repository接口无法注入问题</p>
<!-- more -->
<h2> I. 配置问题</h2>
<p>新开一个jpa项目结合springboot可以很方便的实现，但是在某些环境下，可能会遇到自定义的JpaRepository接口无法注入问题</p>
<h3> 1. 基本配置</h3>
<p>在spring-boot环境中，需要在<code>pom.xml</code>文件中，指定下面两个依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要修改一下配置文件(<code>application.properties</code>)，指定数据库的配置信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 注入失败case复现</h3>
<p>首先在mysql的story库中，新增一个表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义这个表对应的Entity</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的repository接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的数据操作封装类<code>GroupManager</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重点来了，当我们的启动类，不是在外面时，可能会出现问题；项目结构如下</p>
<figure><img src="/imgs/191218/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>我们看一下配置类，和错误的启动应用类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接启动失败，异常如下图，提示找不到<code>GroupJPARepository</code>这个bean，而这个bean在正常启动方式中，会由spring帮我们生成一个代理类；而这里显然是没有生成了</p>
<figure><img src="/imgs/191218/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. case分析</h3>
<p>上面的case可能有点极端了，一般来讲项目启动类，我们都会放在最外层；基本上不太会出现上面这种项目结构，那么分析这个case有毛用？</p>
<p><strong>一个典型的case</strong></p>
<ul>
<li>我们将db操作的逻辑放在一个module（如dao.jar）中封装起来</li>
<li>然后有一个启动的module，通过maven引入上dao.jar</li>
<li>这是入口的默认扫描范围，可能就无法包含dao.jar，因此极有可能导致注入失败</li>
</ul>
<h3> 4. 解决方案</h3>
<p>那么该怎么解决这个问题呢？</p>
<p>在配置类中，添加两个注解<code>EnableJpaRepositories</code>与<code>EntityScan</code>，并制定对应的包路径</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/191218/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>最后小结一下，当我们发现jpa方式的Repository无法注入时，一般是因为接口不再我们的扫描路径下，需要通过<code>@EntityScan</code>与<code>@EnableJpaRepositories</code>来额外指定</p>
<p>（因为篇幅问题，其他的问题拆分到其他的博文）</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484246&amp;idx=1&amp;sn=dc53bcaaca00b955eeda0e54c1dcfbed&amp;chksm=fce718facb9091ecb5d9a76b039c5f52fbddb23aa383991aa633c0daa00752dbcb4916393730&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484247&amp;idx=1&amp;sn=a58a45f11c0758045b07b1d8fcf0873a&amp;chksm=fce718fbcb9091ed779b0e472c7c9e923c9874c3ba796bd6a05af526bb0faef8a8bba7fee8fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484257&amp;idx=1&amp;sn=6b68fc6745d000f84bc75dc76e24ddf0&amp;chksm=fce718cdcb9091db719d14bde42aef0e0d68ad5636f65d5704ce88580394209f5f56b56ce0fb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">190623-SpringBoot系列教程JPA之update使用姿势</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484262&amp;idx=1&amp;sn=5cf81ea48e9854837e6efb3c04c2b36b&amp;chksm=fce718cacb9091dc1df7417dd9f638d35cc9de16a84b62a3bd4481d208f49806e2d59c2414b6&amp;token=1576389657&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">190702-SpringBoot系列教程JPA之delete使用姿势详解</a></p>
</li>
<li>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484273&amp;idx=1&amp;sn=483d3317dd5172c6fa73292c82e41041&amp;chksm=fce718ddcb9091cb1872787234efa986d9a1e1711f60761976006113c9c352416cc300e2c6ae&amp;token=1576389657&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">190717-SpringBoot系列教程JPA之query使用姿势详解之基础篇</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/tYnQzmuFeaAmd7CEPAwfig" target="_blank" rel="noopener noreferrer">191119-SpringBoot系列教程JPA之指定id保存</a></p>
</li>
<li>
<p>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></p>
</li>
<li>
<p>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa-errorcase" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa-errorcase</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191218/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>8.JPA错误姿势之Entity映射</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/08.200103-SpringBoot%E7%B3%BB%E5%88%97JPA%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8BEntity%E6%98%A0%E5%B0%84.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/08.200103-SpringBoot%E7%B3%BB%E5%88%97JPA%E9%94%99%E8%AF%AF%E5%A7%BF%E5%8A%BF%E4%B9%8BEntity%E6%98%A0%E5%B0%84.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.JPA错误姿势之Entity映射</source>
      <description>本篇为JPA错误使用姿势第二篇，java的POJO类与数据库表结构的映射关系，除了驼峰命名映射为下划线之外，还会有什么别的坑么？</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JPA</category>
      <pubDate>Fri, 03 Jan 2020 14:28:37 GMT</pubDate>
      <content:encoded><![CDATA[<p>本篇为JPA错误使用姿势第二篇，java的POJO类与数据库表结构的映射关系，除了驼峰命名映射为下划线之外，还会有什么别的坑么？</p>
<!-- more -->
<h2> I. 映射问题</h2>
<h3> 1. 项目基本配置</h3>
<p>首先搭建基本的springboot + jpa项目， 我们使用的springboot版本为<code>2.2.1.RELEASE</code>，mysql版本5+</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目配置文件<code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表结构</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 错误case</h3>
<p>java变量命名推荐的是驼峰命名方式，因此与数据库中字段的下划线方式需要关联映射，通过jpa的相关知识学习，我们知道可以使用<code>@Column</code>注解来处理，所以有下面这种写法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从命名上就可以看出上面这种case是错误的，那么到底是什么问题呢？</p>
<p>先写一个对应的Repository来实测一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/200103/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从输出结果来看，提示的是sql异常，why?</p>
<ul>
<li>group,desc 为关键字，拼sql的时候需要用反引号包裹起来</li>
</ul>
<h3> 3. 正确姿势一</h3>
<p>第一种正确使用姿势，直接在<code>@column</code>的name中，添加反引号包裹起来</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 正确姿势二</h3>
<p>除了上面的case之外，还有另外一种通用的方式，实现自定义的<code>PhysicalNamingStrategy</code>，实现字段映射</p>
<p>比如我们自定义<code>JpaNamingStrategyStandardImpl</code>继承自默认的<code>PhysicalNamingStrategyStandardImpl</code>策略，然后在字段名中，对于没有引号的包裹的字段名主动添加一个反引号</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意使用上面的映射策略，需要修改配置文件(<code>application.properties</code>)</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后输出:</p>
<figure><img src="/imgs/200103/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目&amp;关联博文</h3>
<p><strong>推荐博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484246&amp;idx=1&amp;sn=dc53bcaaca00b955eeda0e54c1dcfbed" target="_blank" rel="noopener noreferrer">190612-SpringBoot系列教程JPA之基础环境搭建</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484247&amp;idx=1&amp;sn=a58a45f11c0758045b07b1d8fcf0873a" target="_blank" rel="noopener noreferrer">190614-SpringBoot系列教程JPA之新增记录使用姿势</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484257&amp;idx=1&amp;sn=6b68fc6745d000f84bc75dc76e24ddf0" target="_blank" rel="noopener noreferrer">190623-SpringBoot系列教程JPA之update使用姿势</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484262&amp;idx=1&amp;sn=5cf81ea48e9854837e6efb3c04c2b36b" target="_blank" rel="noopener noreferrer">190702-SpringBoot系列教程JPA之delete使用姿势详解</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484273&amp;idx=1&amp;sn=483d3317dd5172c6fa73292c82e41041" target="_blank" rel="noopener noreferrer">190717-SpringBoot系列教程JPA之query使用姿势详解之基础篇</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484414&amp;idx=1&amp;sn=a3d3dfeeb5fcb211f8966c4cae346bc3" target="_blank" rel="noopener noreferrer">191218-SpringBoot系列教程JPA 错误姿势之环境配置问题</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa-errorcase2" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa-errorcase2</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200103/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Hibernate</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JPA/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Hibernate</source>
      <description>据说国外的大仓更喜欢使用Hibernate操作数据库，本手册将手把手教你完全使用Hibernate/JPA方式支撑业务需求</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>据说国外的大仓更喜欢使用Hibernate操作数据库，本手册将手把手教你完全使用Hibernate/JPA方式支撑业务需求</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.数据插入-Insert</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/01.190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/01.190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.数据插入-Insert</source>
      <description>db操作可以说是java后端的必备技能了，实际项目中，直接使用JdbcTemplate的机会并不多，大多是mybatis，hibernate，jpa或者是jooq，然后前几天写一个项目，因为db操作非常简单，就直接使用JdbcTemplate，然而悲催的发现，对他的操作并没有预期中的那么顺畅，所以有必要好好的学一下JdbcTemplate的CURD；本文为第一篇，插入数据</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JdbcTemplate</category>
      <pubDate>Sun, 07 Apr 2019 22:08:03 GMT</pubDate>
      <content:encoded><![CDATA[<p>db操作可以说是java后端的必备技能了，实际项目中，直接使用JdbcTemplate的机会并不多，大多是mybatis，hibernate，jpa或者是jooq，然后前几天写一个项目，因为db操作非常简单，就直接使用JdbcTemplate，然而悲催的发现，对他的操作并没有预期中的那么顺畅，所以有必要好好的学一下JdbcTemplate的CURD；本文为第一篇，插入数据</p>
<!-- more -->
<h2> I. 环境</h2>
<h3> 1. 配置相关</h3>
<p>使用SpringBoot进行db操作引入几个依赖，就可以愉快的玩耍了，这里的db使用mysql，对应的pom依赖如</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是db的配置信息,下面是连接我本机的数据库配置</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试db</h3>
<p>创建一个测试db</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 使用姿势</h2>
<p>直接引入jdbcTemplate，注入即可，不需要其他的操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. sql直接插入一条数据</h3>
<p>直接写完整的插入sql，这种方式比较简单粗暴</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 参数替换方式插入</h3>
<p>这种插入方式中，sql使用占位符？，然后插入值通过参数传入即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 通过Statement方式插入</h3>
<p>通过Statement可以指定参数类型，这种插入方式更加安全，有两种常见的方式，注意设置参数时，起始值为1，而不是通常说的0</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 插入并返回主键id</h3>
<p>这个属于比较常见的需求了，我希望获取插入数据的主键id，用于后续的业务使用; 这时就需要用<code>KeyHolder</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上面的实现，和前面差不多，但是有一行需要额外注意， 在获取Statement时，需要制定主键，否则会报错</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 批量插入</h3>
<p>基本插入看完之后，再看批量插入，会发现和前面的姿势没有太大的区别，无非是传入一个数组罢了，如下面的几种使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 测试</h3>
<p>接下来我们测试下上面的代码执行情况</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190407/00.jpg" alt="执行结果" tabindex="0" loading="lazy"><figcaption>执行结果</figcaption></figure>
<h2> II. 扩展</h2>
<h3> 1. 批量插入并返回主键id</h3>
<p>上面还漏了一个批量插入时，也需要返回主键id，改怎么办？</p>
<p>直接看JdbcTemplate的接口，并没有发现类似单个插入获取主键的方式，是不是意味着没法实现呢？</p>
<p>当然不是了，既然没有提供，我们完全可以依葫芦画瓢，自己实现一个 <code>ExtendJdbcTemplate</code>， 首先看先单个插入返回id的实现如</p>
<figure><img src="/imgs/190407/01.jpg" alt="源码" tabindex="0" loading="lazy"><figcaption>源码</figcaption></figure>
<p>接下来，我们自己的实现可以如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装完毕之后，我们的使用姿势可以为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后测试执行，输出结果如下</p>
<figure><img src="/imgs/190407/02.jpg" alt="批量插入返回id" tabindex="0" loading="lazy"><figcaption>批量插入返回id</figcaption></figure>
<h3> 2. 小结</h3>
<p>本篇主要介绍使用JdbcTemplate插入数据的几种常用姿势，分别从单个插入和批量插入进行了实例演示，包括以下几种常见姿势</p>
<ul>
<li><code>update(sql)</code></li>
<li><code>update(sql, param1, param2...)</code></li>
<li><code>update(sql, new PreparedStatementCreator(){})</code></li>
<li><code>update(new PreparedStatementSetter(){})</code></li>
<li><code>update(new PreparedStatementCreator(){}, new GeneratedKeyHolder())</code></li>
</ul>
<p>批量插入姿势和上面差不多，唯一需要注意的是，如果你想使用批量插入，并获取主键id，目前我没有找到可以直接使用的接口，如果有这方面的需求，可以参考下我上面的使用姿势</p>
<h2> IV. 其他</h2>
<ul>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190407/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.数据查询Query-上</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/02.190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/02.190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.数据查询Query-上</source>
      <description>前面一篇介绍如何使用JdbcTemplate实现插入数据，接下来进入实际业务中，最常见的查询篇。由于查询的姿势实在太多，对内容进行了拆分，本篇主要介绍几个基本的使用姿势 queryForMap queryForList queryForObject</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JdbcTemplate</category>
      <pubDate>Fri, 12 Apr 2019 17:00:18 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇介绍如何使用JdbcTemplate实现插入数据，接下来进入实际业务中，最常见的查询篇。由于查询的姿势实在太多，对内容进行了拆分，本篇主要介绍几个基本的使用姿势</p>
<ul>
<li>queryForMap</li>
<li>queryForList</li>
<li>queryForObject</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<p>环境依然借助前面一篇的配置，链接如： <a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></p>
<p>或者直接查看项目源码： <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></p>
<p>我们查询所用数据，正是前面一篇插入的结果，如下图</p>
<figure><img src="/imgs/190412/00.jpg" alt="db mysql" tabindex="0" loading="lazy"><figcaption>db mysql</figcaption></figure>
<h2> II. 查询使用说明</h2>
<h3> 1. queryForMap</h3>
<p>queryForMap，一般用于查询单条数据，然后将db中查询的字段，填充到map中，key为列名，value为值</p>
<h4> a. 基本使用姿势</h4>
<p>最基本的使用姿势，就是直接写完整的sql，执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种用法的好处是简单，直观；但是有个非常致命的缺点，如果你提供了一个接口为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接看上面代码，会发现问题么？？？</p>
<p>有经验的小伙伴，可能一下子就发现了sql注入的问题，如果传入的参数是 <code>'一灰灰blog' or 1=1 order by id desc limit 1</code>, 这样输出和我们预期的一致么？</p>
<h4> b. 占位符替换</h4>
<p>正是因为直接拼sql，可能到只sql注入的问题，所以更推荐的写法是通过占位符 + 传参的方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的例子中也可以看出，占位符的使用很简单，用问好（<code>?</code>）来代替具体的取值，然后传参</p>
<p>传参有两种姿势，一个是传入<code>Object[]</code>数组；另外一个是借助java的不定长参数方式进行传参；两个的占位替换都是根据顺序来的，也就是如果你有一个值想替换多个占位符，那就得血多次</p>
<p>如：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 查不到的case</h4>
<p>使用queryForMap有个不得不注意的事项，就是如果查不到数据时，会抛一个异常出来，所以需要针对这种场景进行额外处理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190412/01.jpg" alt="查询不到异常" tabindex="0" loading="lazy"><figcaption>查询不到异常</figcaption></figure>
<h3> 2. queryForList</h3>
<p>前面针对的主要是单个查询，如果有多个查询的场景，可能就需要用到<code>queryForList</code>了，它的使用姿势和上面其实差别不大；</p>
<h4> a. 基本使用姿势</h4>
<p>最基本的使用姿势当然是直接写sql执行了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意返回的结果是<code>List&lt;Map&lt;String, Object&gt;&gt;</code>， 如果一条都没有命中，会返回一个空集合, 和 <code>QueryForMap</code> 抛异常是不一样的</p>
<h4> b. 占位符替换</h4>
<p>直接使用sql的查询方式，依然和前面一样，可能有注入问题，当然优先推荐的使用通过占位来传参方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. queryForObject</h3>
<p>如果是简单查询，直接用上面两个也就够了，但是对于使用过mybatis，Hibernate的同学来说，每次返回<code>Map&lt;String, Object&gt;</code>，就真的有点蛋疼了, 对于mysql这种数据库，表的结构基本不变，完全可以和POJO进行关联，对于业务开发者而言，当然是操作具体的POJO比Map要简单直观多了</p>
<p>下面将介绍下，如何使用 <code>queryForObject</code> 来达到我们的目标</p>
<h4> a. 原始使用姿势</h4>
<p>首先介绍下利用 <code>RowMapper</code> 来演示下，最原始的使用姿势</p>
<p>第一步是定义对应的POJO类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从使用姿势上看，<code>RowMapper</code> 就是一个sql执行之后的回调，实现结果封装，这里需要注意的就是 <code>ResultSet</code> 封装了完整的返回结果，可以通过下标方式指定，下标是从1开始，而不是我们常见的0，需要额外注意</p>
<p>这个下标从1开始，感觉有点蛋疼，总容易记错，所以更推荐的方法是直接通过列名获取数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 高级使用</h4>
<p>当sql返回的列名和POJO的属性名可以完全匹配上的话，上面的这种写法就显得非常冗余和麻烦了，我需要更优雅简洁的使用姿势，最好就是直接传入<code>POJO</code>类型，自动实现转换</p>
<p>如果希望得到这个效果，你需要的就是下面这个了: <code>BeanPropertyRowMapper</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 易错使用姿势</h4>
<p>查看JdbcTemplate提供的接口时，可以看到下面这个接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然而然的想到，直接传入POJO的类型进去，是不是就可以得到我们预期的结果了?</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，抛出异常</p>
<figure><img src="/imgs/190412/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的源码也可以看到，上面的使用姿势，适用于sql只返回一列数据的场景，即下面的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190412/03.jpg" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure>
<h3> 4. 测试</h3>
<p>上面所有代码可以查看: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate/src/main/java/com/git/hui/boot/jdbc/query/QueryService.java" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate/src/main/java/com/git/hui/boot/jdbc/query/QueryService.java</a></p>
<p>简单的继承调用下上面的所有方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<figure><img src="/imgs/190412/04.jpg" alt="result" tabindex="0" loading="lazy"><figcaption>result</figcaption></figure>
<h2> III. 小结</h2>
<p>本篇博文主要介绍了JdbcTemplate查询的简单使用姿势，主要是<code>queryForMap</code>, <code>queryForList</code>, <code>queryForObject</code>三种方法的调用</p>
<h3> 1. 根据返回结果数量</h3>
<p><strong>单条记录查询</strong></p>
<ul>
<li><code>queryForMap</code> ： 返回一条记录，返回的结果塞入<code>Map&lt;String, Object&gt;</code>， key为固定的String对应查询的列名；value为实际值</li>
<li><code>queryForObject</code> ：同样返回一条数据，与上面的区别在于可以借助<code>RowMapper</code>来实现返回结果转换为对应的POJO</li>
</ul>
<p>需要注意的是，上面的查询，必须有一条记录返回，如果查不到，则抛异常</p>
<p><strong>批量查询</strong></p>
<ul>
<li><code>queryForList</code> ：一次查询&gt;=0条数据，返回类型为 <code>List&lt;Map&lt;String, Object&gt;&gt;</code></li>
</ul>
<h3> 2. 根据sql类型</h3>
<p>有两种sql传参方式</p>
<ul>
<li>一个是写完整的sql语句，就和我们普通的sql查询一样；问题是存在注入的风险</li>
<li>其次是使用占位符(?), 实际的值通过参数方式传入</li>
</ul>
<h2> IV. 其他</h2>
<ul>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190412/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.数据查询Query-下</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/03.190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/03.190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.数据查询Query-下</source>
      <description>SpringBoot高级篇JdbcTemplate之数据查询上篇 讲了如何使用JdbcTemplate进行简单的查询操作，主要介绍了三种方法的调用姿势 queryForMap, queryForList, queryForObject 本篇则继续介绍剩下的两种方法使用说明 queryForRowSet query</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JdbcTemplate</category>
      <pubDate>Wed, 17 Apr 2019 22:14:33 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">SpringBoot高级篇JdbcTemplate之数据查询上篇</a> 讲了如何使用JdbcTemplate进行简单的查询操作，主要介绍了三种方法的调用姿势 <code>queryForMap</code>, <code>queryForList</code>, <code>queryForObject</code> 本篇则继续介绍剩下的两种方法使用说明</p>
<ul>
<li>queryForRowSet</li>
<li>query</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<p>环境依然借助前面一篇的配置，链接如： <a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></p>
<p>或者直接查看项目源码： <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></p>
<p>我们查询所用数据，正是前面一篇插入的结果，如下图</p>
<figure><img src="/imgs/190417/00.jpg" alt="data" tabindex="0" loading="lazy"><figcaption>data</figcaption></figure>
<h2> II. 查询使用说明</h2>
<h3> 1. queryForRowSet</h3>
<p>查询上篇中介绍的三种方法，返回的记录对应的结构要么是map，要么是通过<code>RowMapper</code>进行结果封装；而<code>queryForRowSet</code>方法的调用，返回的则是<code>SqlRowSet</code>对象，这是一个集合，也就是说，可以查询多条记录</p>
<p>使用姿势也比较简单，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于使用姿势而言与之前的区别不大，还有一种就是sql也支持使用占位方式，如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下结果的处理，需要通过迭代器的方式进行数据遍历，获取每一列记录的值的方式和前面一样，可以通过序号的方式获取(序号从1开始)，也可以通过制定列名方式（db列名）</p>
<h3> 2. query</h3>
<p>对于query方法的使用，从不同的结果处理方式来看，划分了四种，下面逐一说明</p>
<h4> a. 回调方式 <code>queryByCallBack</code></h4>
<p>这种回调方式，query方法不返回结果，但是需要传入一个回调对象，查询到结果之后，会自动调用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实例代码中，可以看到回调方法中传入一个ResultSet对象，简单封装一个转换为PO的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在后面的测试中，会看到上面会输出两行数据，也就是说</p>
<p><strong>返回结果中每一条记录都执行一次上面的回调方法，即返回n条数据，上面回调执行n次</strong></p>
<h4> b. 结果批量处理 <code>ResultSetExtractor</code></h4>
<p>前面回调方式主要针对的是不关系返回结果，这里的则是将返回的结果，封装成我们预期的对象，然后返回</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外注意下上面你的使用，如果返回的是多条数据，注意泛型参数类型为<code>List&lt;?&gt;</code>, 简单来说这是一个对结果进行批量转换的使用场景</p>
<p>因此在上面的<code>extractData</code>方法调用时，传入的是多条数据，需要自己进行迭代遍历，而不能像第一种那样使用</p>
<h4> c. 结果单行处理 <code>RowMapper</code></h4>
<p>既然前面有批量处理，那当然也就有单行的转换方式了，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际使用中，只需要记住<code>RowMapper</code>方式传入的是单条记录，n次调用；而<code>ResultSetExtractor</code>方式传入的全部的记录，1次调用</p>
<h4> d. 占位sql</h4>
<p>前面介绍的几种都是直接写sql，这当然不是推荐的写法，更常见的是占位sql，通过传参替换，这类的使用前一篇博文介绍得比较多了，这里给出一个简单的演示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. <code>PreparedStatement</code> 方式</h4>
<p>在插入记录的时候，<code>PreparedStatement</code>这个我们用得很多，特别是在要求返回主键id时，离不开它了， 在实际的查询中，也是可以这么用的，特别是在使用<code>PreparedStatementCreator</code>，我们可以设置查询的db连接参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个典型的使用case，当然在实际使用JdbcTemplate时，基本不这么玩</p>
<h4> f. 查不到数据场景</h4>
<p>前面一篇查询中，在单个查询中如果没有结果命中sql，会抛出异常，那么这里呢？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从后面的输出结果会看出，没有记录命中时，并没有什么关系，上面会返回一个空集合</p>
<h2> III. 测试&amp;小结</h2>
<h3> 1. 测试</h3>
<p>接下来测试下上面的输出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面执行输出结果如下</p>
<figure><img src="/imgs/190417/01.jpg" alt="test output" tabindex="0" loading="lazy"><figcaption>test output</figcaption></figure>
<h3> 2. 小结</h3>
<p>本文主要介绍了另外两种查询姿势, <code>queryForRowSet</code> 与 <code>query</code></p>
<p><strong>queryForRowSet</strong></p>
<ul>
<li>返回<code>SqlRowSet</code>对象，需要遍历获取所有的结果</li>
</ul>
<p><strong>query</strong></p>
<ul>
<li>提供三种结果处理方式
<ul>
<li>不返回结果的回调姿势</li>
<li>对结果批量处理的方式 <code>ResultSetExtractor</code></li>
<li>对结果单个迭代处理方式 <code>RowMapper</code></li>
</ul>
</li>
<li>可以返回&gt;=0条数据</li>
<li>如果需要对查询的连接参数进行设置，使用<code>PreparedStatementCreator</code>来创建<code>PreparedStatement</code>方式处理</li>
</ul>
<h2> IV. 其他</h2>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190417/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.数据更新与删除</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/04.190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/04.190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.数据更新与删除</source>
      <description>前面介绍了JdbcTemplate的插入数据和查询数据，占用CURD中的两项，本文则将主要介绍数据更新和删除。从基本使用上来看，姿势和前面的没啥两样</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JdbcTemplate</category>
      <pubDate>Thu, 18 Apr 2019 22:14:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍了JdbcTemplate的插入数据和查询数据，占用CURD中的两项，本文则将主要介绍数据更新和删除。从基本使用上来看，姿势和前面的没啥两样</p>
<!-- more -->
<h2> I. 环境准备</h2>
<p>环境依然借助前面一篇的配置，链接如： <a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></p>
<p>或者直接查看项目源码： <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></p>
<p>我们查询所用数据，正是前面一篇插入的结果，如下图</p>
<figure><img src="/imgs/190418/00.jpg" alt="data" tabindex="0" loading="lazy"><figcaption>data</figcaption></figure>
<h2> II. 更新使用说明</h2>
<p>对于数据更新，这里会分为两种进行说明，单个和批量；这个单个并不是指只能一条记录，主要针对的是sql的数量而言</p>
<h3> 1. update 方式</h3>
<p>看过第一篇数据插入的童鞋，应该也能发现，新增数据也是用的这个方法，下面会介绍三种不同的使用姿势</p>
<p>先提供一个数据查询的转换方法，用于对比数据更新前后的结果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 纯sql更新</h4>
<p>这个属于最基本的方式了，前面几篇博文中大量使用了，传入一条完整的sql，执行即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 占位sql</h4>
<p>问好占位，实际内容通过参数传递方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. statement</h4>
<p>从前面的几篇文章中可以看出，使用statement的方式，最大的好处有几点</p>
<ul>
<li>可以点对点的设置填充参数</li>
<li><code>PreparedStatementCreator</code> 方式可以获取db连接，主动设置各种参数</li>
</ul>
<p>下面给出两个常见的使用方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下第一种调用中，设置了超时时间，下面给出一个动图，演示超时的使用姿势</p>
<figure><img src="/imgs/190418/01.gif" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure>
<p>在上图中，</p>
<ul>
<li>首先是一个开启一个事物，并修改了一条记录，这个时候这条记录会加上写锁</li>
<li>然后JdbcTemplate中修改上面的这条记录，尝试加写锁，但是会失败，所以一直阻塞，当超时之后，抛出异常</li>
</ul>
<h3> 2. batchUpdate 方式</h3>
<p>批量方式，执行多个sql，从使用上看和前面没有太大的区别，先给出一个查询的通用方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 纯sql更新</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 占位sql</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. statement</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下上面的方法中，<code>getBatchSize</code>返回实际的sql条数，<code>setValues</code>中的i从0开始</p>
<h3> 3. 测试</h3>
<p>原始数据中，money都是300，通过一系列的修改，输出如下</p>
<figure><img src="/imgs/190418/02.jpg" alt="test result" tabindex="0" loading="lazy"><figcaption>test result</figcaption></figure>
<h2> III. 数据删除</h2>
<p>删除的操作姿势和上面基本一样，也就是sql的写法不同罢了，因此没有太大的必要重新写一篇，下面给出一个简单的demo</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> IV. 其他</h2>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190418/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.多数据源配置与使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/05.201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/05.201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.多数据源配置与使用</source>
      <description>虽然我们前面的db系列教程更多的是基于单数据源的db操作，但是实际的业务开发中，难免会遇到一个项目配置多个数据源的情况，接下来本文将介绍一下多个数据源可以怎么配置，我们的JdbcTemplate又应该如何获取</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>JdbcTemplate</category>
      <pubDate>Sun, 27 Dec 2020 20:44:48 GMT</pubDate>
      <content:encoded><![CDATA[<p>虽然我们前面的db系列教程更多的是基于单数据源的db操作，但是实际的业务开发中，难免会遇到一个项目配置多个数据源的情况，接下来本文将介绍一下多个数据源可以怎么配置，我们的JdbcTemplate又应该如何获取</p>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库相关</h3>
<p>以mysql为例进行演示说明，因为需要多数据源，一个最简单的case就是一个物理库上多个逻辑库，本文是基于本机的mysql进行操作</p>
<p>创建数据库<code>test</code> 与 <code>story</code>，两个库下都存在一个表<code>money</code> (同名同结构表，但是数据不同哦)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/201227/00.jpg" alt="data" tabindex="0" loading="lazy"><figcaption>data</figcaption></figure>
<h3> 2. 项目环境</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件信息<code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的数据库配置，我们前面介绍的但数据库配置如下，它们层级并不一样，上面的配置需要我们自己额外进行加载解析</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 多数据源支持</h2>
<h3> 1. 数据源配置</h3>
<p>SpringBoot帮我们省略了很多操作，单数据源时，在yaml文件中配置数据库相关信息之后，我们不需要任何其他操作，Spring会帮我们实例对应的<code>DataSource</code>，然后借助它来创建<code>JdbcTemplate</code></p>
<p>而多数据源则需要我们自己来额外处理了，请注意上面的配置信息，和默认的配置没什么差别，只是前缀多了一层，我们可以借助<code>@ConfigurationProperties</code>来加载配置文件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置代码如上，一个是将数据源配置映射为bean <code>DataSourceProperties</code>, 一个是根据数据源配置实例化<code>DataSource</code>；</p>
<p>此外两个<code>@Primary</code>注解，主要是为了设置默认的数据源</p>
<h3> 2. JdbcTemplate实例化</h3>
<p>数据源已经获取到之后，再实例化<code>JdbcTemplate</code>就很简单了，除了直接声明bean之外，也可以基于<code>DataSource</code>来手动创建临时对象，下面给出两种使用姿势</p>
<p>定义对应的<code>bean</code>，对于业务使用更友好</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助<code>ApplicationContext</code>来实例化JdbcTemplate，使用更灵活</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试case</h3>
<p>最后简单测试一下上面创建的两个<code>JdbcTemplate</code>是否访问不同的数据库</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/201227/01.jpg" alt="testcase" tabindex="0" loading="lazy"><figcaption>testcase</figcaption></figure>
<p>相同的sql，获取的结果并不一样，分别从两个库中获取的数据</p>
<h3> 4. 小结</h3>
<p>使用多数据源，比较简单的思路就是自定义配置的加载方式，获取不同的<code>DataSourceProperties</code>对象，然后基于它来创建<code>DataSource</code>实例</p>
<p>利用<code>JdbcTemplate</code>来操作db的应用场景，直接选择不同的数据源<code>Datasource</code>就行了</p>
<p>当然实际的项目中，我们一般会借助<code>Herbernate</code>、<code>Myabtis</code>、<code>Jooq</code>等orm框架，那么使用orm时，多数据源又应该怎么处理呢? （请持续关注，相关博文即将上线）</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据查询上篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据查询下篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之数据更新与删除</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">【DB系列】声明式事务Transactional</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/01/20/200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">【DB系列】事务隔离级别知识点小结</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/02/02/200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">【DB系列】事务传递属性</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/02/03/200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase/" target="_blank" rel="noopener noreferrer">【DB系列】事务不生效的几种case</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/02/04/200204-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】编程式事务使用姿势介绍篇</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/109-multi-datasource" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/109-multi-datasource</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201227/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>JdbcTemplate</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/JdbcTemplate/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">JdbcTemplate</source>
      <description>摆脱ORM框架，直接JdbcTemplate来操作数据库，数据扫描、脚本开发者都应该掌握的知识点，享受直写Sql的魅力</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>摆脱ORM框架，直接JdbcTemplate来操作数据库，数据扫描、脚本开发者都应该掌握的知识点，享受直写Sql的魅力</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.Jooq初体验</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/01.200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/01.200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.Jooq初体验</source>
      <description>java环境中，说到数据库的操作，我们通常会想到的是mybatis或者hibernate，今天给大家介绍一个国内可能用得不太多的操作方式JOOQ，一款基于Java访问关系型数据库的工具包，轻量，简单，并且足够灵活的ORM框架 本文将各位小伙伴演示一下jooq集成springboot的姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Tue, 15 Sep 2020 09:23:48 GMT</pubDate>
      <content:encoded><![CDATA[<p>java环境中，说到数据库的操作，我们通常会想到的是mybatis或者hibernate，今天给大家介绍一个国内可能用得不太多的操作方式JOOQ，一款基于Java访问关系型数据库的工具包，轻量，简单，并且足够灵活的ORM框架</p>
<p>本文将各位小伙伴演示一下jooq集成springboot的姿势</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>我们这里借助h2dabase来搭建演示项目，因此有兴趣的小伙伴在文末可以直接获取项目地址启动即可体验，不需要额外的安装和配置mysql了</p>
<p>本文采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. pom依赖</h3>
<p>下面给出核心的依赖配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置</h3>
<p>接下来设置一下数据库相关的配置信息，在资源目录<code>resources</code>下，新建配置文件<code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库初始化</h3>
<p>jooq有一个特点，是需要我们自己来生成表结构对象，所以我们先初始化一下h2dabase的数据结构，详情可以参考博文 <a href="">【DB系列h2databse集成示例demo】</a></p>
<p>表结构定义文件<code>schema-h2.sql</code>, 请注意表结构与mysql的表创建姿势不太一样哦</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据初始化<code>data-h2.sql</code></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们接下来借助maven插件来初始化数据, <code>pom.xml</code>文件中，添加如下配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图的case，完成数据的初始化</p>
<figure><img src="/imgs/200915/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 体验case</h2>
<p>在实际开始jooq的curd之前，需要先生成对应的表结构对象，这里也是借助maven插件来完成</p>
<h3> 1. 代码自动生成</h3>
<p>同样在<code>pom.xml</code>中添加如下配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/200915/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>如上图的方式执行完毕之后，会得到生成的代码</p>
<h3> 2. CURD</h3>
<p>接下来我们给出CURD的基本使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的使用，很好理解了，基本上能愉快的写sql，就可以愉快的使用jooq，上面的这种链式写法，对于sql的阅读是非常友好的；这里的重点是<code>DSLContext</code>，它是<code>JooqAutoConfiguration</code>自动加载的，这里直接拿来使用了（关于更多的配置与多数据源的问题，后面介绍）</p>
<h3> 3. 测试case</h3>
<p>在pom中引入<code>web</code>依赖，设计一些基本的测试case</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增删改查case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测结果如下</p>
<figure><img src="/imgs/200915/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>到此，SpringBoot集成jooq的demo已经完成，并提供了基础的CURD，整体来看，集成比较简单，需要注意的是代码自动生成，我们这里是借助maven插件来实现代码自动生成的， 此外也可以通过官方提供的<code>jooq-xx.jar</code> + <code>xml</code>配置文件来自动生成；后面单独捞一篇博文给与介绍</p>
<p>从jooq的使用姿势来看，最大的感官就是类sql的链式写法，比较的直观，阅读友好；此外需要注意的是自动生成的实体<code>PoetRecord</code>，不要暴露出去哦，一般推荐使用jooq包下面的<code>Poet</code>来代替<code>PoetRecord</code>来作为BO对象使用，可以通过<code>RecordMapper</code>来实现转换，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/107-jooq-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/107-jooq-aop</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200915/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.Jooq代码自动生成</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/02.200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/02.200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.Jooq代码自动生成</source>
      <description>Jooq提供了非常简单的方式来自动生成对应的代码，就我个人的使用感触，比mybatis-plus用起来爽，下面介绍两种殊途同归的自动生成方式 jooq jar包生成方式 maven插件生成方式</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Wed, 16 Sep 2020 08:47:46 GMT</pubDate>
      <content:encoded><![CDATA[<p>Jooq提供了非常简单的方式来自动生成对应的代码，就我个人的使用感触，比mybatis-plus用起来爽，下面介绍两种殊途同归的自动生成方式</p>
<ul>
<li>jooq jar包生成方式</li>
<li>maven插件生成方式</li>
</ul>
<!-- more -->
<h2> I. 前期准备</h2>
<p>在前面体验篇中介绍的是maven插件 + h2database的代码自动生成方式；本文则将数据库替换为最常见的mysql，使用姿势上差别也不会太大</p>
<h3> 1. 数据表准备</h3>
<p>不管使用前面说的两种方式的哪一种，前提是mysql中必须存在对应的表结构，我们这里指定两个简单的表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库相关信息</h3>
<p>数据库连接信息</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 代码自动生成</h2>
<p>本文主要介绍的是基于SpringBoot的jooq集成，本文使用 <code>SpringBoot 2.2.1.RELEASE</code></p>
<h3> 1. maven插件</h3>
<p>首先需要创建一个SpringBoot项目，在<code>pom.xml</code>配置文件中，借助<code>jooq-codegen-maven</code>来实现代码生成</p>
<p>一个完整的配置示例如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置虽然长，但是结构比较清晰，下面拆分说明一下</p>
<h4> a. 驱动器</h4>
<p>因为数据源是mysql，所以我们加的是如下配置，如果是其他的数据源，替换成对应的依赖即可</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. jdbc配置</h4>
<p>这个配置很重要，连接数据库读取表结构信息</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. generate配置</h4>
<p>generate中指定jooq相关的一些配置</p>
<p><strong><code>&lt;database&gt;</code></strong> 标签</p>
<p>指定数据库基本信息，如数据库名，哪些表需要自动生成对应的代码，哪些可以排除掉</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们希望数据库中所有的表都生成对应的代码，可以在<code>include</code>标签中填写<code>.*</code>；上面的写法表示 <code>user</code>, <code>money</code>这两张表需要生成相应的代码</p>
<p><strong>pojos</strong></p>
<p>下面这个非必要，因为默认生成DO对象包含较多的表结构信息，所以我们可以指定生成简单的对象，用于更友好的业务传递</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>target</strong></p>
<p>自动生成类的包名以及输出地址</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>strategy</strong></p>
<p>可以给生成的表名，实体名，pojo名指定特定的后缀</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码自动生成</strong></p>
<p>执行maven插件在idea中比较简单了，如下图，执行完毕之后，就可以在上面定义的路径下看到生成的类</p>
<figure><img src="/imgs/200916/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. jar包生成</h3>
<p>除了上面介绍的maven插件自动生成代码之外，还可以借助<code>jooq-xx.jar</code>来自动生成代码，最大的好处是不需要创建项目工程，可以直接使用</p>
<p>这种用法需要我们下载对应的jar包，有需要的小伙伴可以到官网去获取，同时我也传了一份到百度网盘，关注微信公众号：一灰灰blog之后，回复 <code>jooq-code-gen</code> 即可获取下载信息（我个人不太建议使用这种方式，maven插件是真香）</p>
<p>下面假设各位小伙伴已经get到了所需的信息，对应的jar包和启动脚本(<code>deploy.sh</code>)如下</p>
<figure><img src="/imgs/200916/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>最后一个参数是我们的配置文件, <code>mysql.xml</code>内容和上面的基本一致，没有太多的区别</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li>上面的生成命令，适用于mac + linux操作系统，如果是widowns的童鞋，可以把<code>-classpath</code>参数中的冒号换成分号</li>
</ul>
<h3> 3. 小结</h3>
<p>本文主要介绍了jooq代码自动生成的两种方式，各自的优缺点比较明显</p>
<ul>
<li>maven: 简单，简洁，高效，缺点是需要依托项目来执行</li>
<li>jar包: 独立运行，缺点是需要下载配套的jar包</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-mysql" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-mysql</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200916/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.Jooq之insert</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/03.200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/03.200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.Jooq之insert</source>
      <description>接下来我们开始进入jooq的增删改查的使用姿势系列，本篇将主要介绍如何利用jooq来实现添加数据</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Sun, 20 Sep 2020 18:39:55 GMT</pubDate>
      <content:encoded><![CDATA[<p>接下来我们开始进入jooq的增删改查的使用姿势系列，本篇将主要介绍如何利用jooq来实现添加数据</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库初始化</h3>
<p>我们借助<code>jooq-codegen-maven</code>插件来自动生成数据库相关的代码，对这一段逻辑感兴趣的小伙伴可以参考博文：<a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq代码自动生成</a></p>
<p>后文中使用的表结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 配置文件</h3>
<p>h2database的连接配置如 <code>application.properties</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 新增记录</h2>
<p>接下来我们进入正式的数据插入的使用姿势介绍，一般来说新增数据会区分单个和批量两种方式，下面我们分别进行介绍</p>
<h3> 1. Record实体类新增方式</h3>
<p>在jooq中，借助自动生成的Record类来实现新增是最简单的case，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p>
<ul>
<li>实体类的创建方式：<code>PoetPO record = dsl.newRecord(table);</code>，不要直接new一个对象出来使用</li>
</ul>
<h3> 2. 链式写法</h3>
<p>下面介绍的这种写法和sql非常相似，也是我个人用的比较多的方式，特点就是一目了然</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. InsertQuery方式</h3>
<p>上面两种写法比较常见，而直接使用InsertQuery的方式，在实际的业务开发中可能并没有上面的优雅，但某些特殊场景下还是很有用的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意一下上面的用法，<code>InsertQuery</code>本身的使用没有什么值得说到的，重点在上面的实现中，并没有利用自动生成的代码，如</p>
<ul>
<li>table: <code>DSL.table(表名)</code></li>
<li>field: <code>DSL.field(列名，类型)</code></li>
</ul>
<p>通过上面的的case，我们可以知道在不自动生成DB对应的代码前提下，如何进行数据库的操作</p>
<h3> 4. Record实体批量保存</h3>
<p>借助<code>dsl.batchInsert</code>来批量添加实体，属于最基础的使用姿势了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 链式批量保存</h3>
<p>同样是类sql的链式插入方式，需要注意一下与前面的单条记录的链式插入的区别，下面这种写法和sql的批量插入的写法及其相似</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. InsertQuery批量保存</h3>
<p>上面介绍了InsetQuery的单条插入方式，下面的批量写法基本上没有太大的区别</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 测试case</h3>
<p>接下来测试一下上面的6个方法执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>4.Jooq之Update &amp; Delete</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/04.200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/04.200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.Jooq之Update &amp; Delete</source>
      <description>前面一篇介绍了Jooq的记录新增，除了利用自动生成的代码来保存数据之外，也可以借助DSL.table() + DSL.field()来实现类sql的写法；本文将介绍curd中的删除和更新的用法</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Wed, 30 Sep 2020 08:46:14 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇介绍了Jooq的记录新增，除了利用自动生成的代码来保存数据之外，也可以借助<code>DSL.table()</code> + <code>DSL.field()</code>来实现类sql的写法；本文将介绍curd中的删除和更新的用法</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库初始化</h3>
<p>我们借助<code>jooq-codegen-maven</code>插件来自动生成数据库相关的代码，对这一段逻辑感兴趣的小伙伴可以参考博文：<a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq代码自动生成</a></p>
<p>后文中使用的表结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 配置文件</h3>
<p>h2database的连接配置如 <code>application.properties</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 数据准备</h3>
<p>后文中的测试数据，主要借助的是前面一篇新增的记录，db中记录如下</p>
<figure><img src="/imgs/200930/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 记录更新</h2>
<h3> 1. 类sql方式更新</h3>
<p>下面这种链式写法和sql极为相似</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 更新计算</h3>
<p>上面的更新方式属于最基本的直接设置，某些场景下我们可能需要借助之前的column value，如下concat方法的更新方式，注意这个方法有<code>Field</code>提供</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. UpdateQuery更新</h3>
<p>除了上面的链式更新方式，还可以借助<code>UpdateQuery</code>来处理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. Entity更新</h3>
<p>直接借助代码自动生成的Record类，本文中对应的是<code>PO</code>结尾的类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. executeUpdate更新</h3>
<p>同样是借助Record类，与上面的区别在于这个实体类直接new出来，借助<code>dsl.executeUpdate</code>执行更新</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 批量更新</h3>
<p>请注意这里说的批量更新不是指一条sql更新多条record记录，更像是多个更新sql的一次提交执行</p>
<p>下面主要是借助<code>dsl.batchUpdate</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 记录删除</h2>
<p>在实际的业务开发中，一般不建议直接删除记录，最好是通过一个column来标记逻辑删除，当然我们下面介绍的依然是物理删除...</p>
<h3> 1. 类sql写法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Entity删除</h3>
<p>直接借助自动生成的实体类来执行删除</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. dsl.executeDelete</h3>
<p>借助<code>dsl.executeDelete</code>来删除实体类，与上面的区别在于这个实体类是直接new出来的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. deleteQuery</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200930/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.Jooq批量写入采坑记录</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/05.201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/05.201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.Jooq批量写入采坑记录</source>
      <description>前面介绍了jooq的三种批量插入方式，结果最近发现这里面居然还有一个深坑，我以为的批量插入居然不是一次插入多条数据，而是一条一条的插入...，这就有点尬了</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Wed, 02 Dec 2020 09:53:18 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍了jooq的三种批量插入方式，结果最近发现这里面居然还有一个深坑，我以为的批量插入居然不是一次插入多条数据，而是一条一条的插入...，这就有点尬了</p>
<!-- more -->
<h3> 1. 三种插入姿势</h3>
<p>关于项目创建以及jooq的相关使用姿势，推荐查看之前的博文: <a href="https://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Jooq之新增记录使用姿势</a></p>
<p>下面是我们采用的三种批量插入方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的三种批量插入方式，基本上对应的就是jooq的三种常见的用法</p>
<ul>
<li>直接借助自动生成的<code>Record</code>类来操作</li>
<li>类sql的拼接写法，基本上我们平时的sql怎么写，这里就怎么用</li>
<li><code>InsertQuery</code>：借助jooq提供的各种Query类来执行目标操作</li>
</ul>
<h3> 2. 日志验证</h3>
<p>上面三种写法中，第一种批量插入方式，并不是我们传统理解的一次插入多条记录，相反它是一条一条的插入的，我们可以通过开启jooq的日志来查看一些执行的sql情况</p>
<p>配置文件 <code>application.properties</code>，添加下面的配置</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有自己的<code>logback.xml</code>配置文件，可以调整一下日志级别，将jooq的debug日志放出来</p>
<p>一个简单的测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/201202/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的sql来看，后面两个确实是一次插入多条，但是第一个，也没有将具体执行的sql打印出来，所有不看源码的话，也没有办法实锤是一条一条插入的</p>
<p>为了验证这个问题，一个简单的解决办法就是批量插入两条数据，第一条正常，第二条异常，如果第一条插入成功，第二条失败那就大概率是单个插入的了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第一种批量插入失败</strong></p>
<figure><img src="/imgs/201202/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>第二种插入失败</strong></p>
<figure><img src="/imgs/201202/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>插入后结果</strong></p>
<figure><img src="/imgs/201202/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>请注意上面的报错，以及最终插入的结果，第一种插入方式一个插入成功一个失败；第二种批量插入方式，两条都插入失败；</p>
<p>通常情况下，一次插入多条数据时，一个插入失败，会导致整个插入都失败，如下</p>
<figure><img src="/imgs/201202/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 源码分析</h3>
<p>上面是从日志以及结果表现来推测实际的执行情况，接下来就需要从源码角度来看一下，是否真的是单个的执行了</p>
<p>省略掉具体的定位过程，直接找到<code>org.jooq.impl.BatchCRUD#execute</code>，对应的代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面有两种插入方式，对于插入的核心逻辑一样</p>
<figure><img src="/imgs/201202/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>遍历集合，获取单个record，执行CURD</p>
<figure><img src="/imgs/201202/06.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201202/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.Jooq之记录查询</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/06.201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/06.201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.Jooq之记录查询</source>
      <description>本文将主要介绍一下JOOQ查询篇的基本使用姿势，如果看完本文，会发现jooq的用法，和写sql基本上没啥两样</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Thu, 03 Dec 2020 09:07:43 GMT</pubDate>
      <content:encoded><![CDATA[<p>本文将主要介绍一下JOOQ查询篇的基本使用姿势，如果看完本文，会发现jooq的用法，和写sql基本上没啥两样</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p>
<figure><img src="/imgs/201203/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 使用姿势</h2>
<h3> 0. 基本准备</h3>
<p>测试类，初始化一些必要的依赖，如 <code>dsl</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 主键查询</h3>
<p>请注意下面的<code>poetMapper.map</code>，将record实体(包含数据库基本信息)转换为业务实体(POJO业务对象)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 查询指定字段</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 列别名</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 条件查询</h3>
<p>条件比较查询</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. in查询</h3>
<p>in / not 查询，原则上如非必要，一般不推荐是用not in查询</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. between</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. like查询</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8. null查询</h3>
<p>原则上，字段不建议支持null</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9. 多查询条件</h3>
<p>最简单的and/or查询</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10. 排序</h3>
<p>请注意下多字段的排序使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11. 分页</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12. 测试输出</h3>
<p>完整的测试输出如下，我们也开启了jooq的debug日志，因此可以看到最终真实执行的ip地址</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201203/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>7.Jooq之聚合查询</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/07.201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/07.201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.Jooq之聚合查询</source>
      <description>上一篇介绍的时候一些Jooq基本的查询使用方式，分组聚合查询，在实际的业务场景中也比较常见，本文将介绍下jooq中，如何使用聚合查询</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Fri, 04 Dec 2020 19:16:43 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇介绍的时候一些Jooq基本的查询使用方式，分组聚合查询，在实际的业务场景中也比较常见，本文将介绍下jooq中，如何使用聚合查询</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p>
<figure><img src="/imgs/201204/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 使用姿势</h2>
<h3> 0. 基本准备</h3>
<p>测试类，初始化一些必要的依赖，如 <code>dsl</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 简单group查询</h3>
<p>对于mysql中，group的聚合查询</p>
<p><strong>注意</strong></p>
<p>一般情况下，select中的列需要是<code>group by</code>的条件，否则会包sql错误</p>
<p>如果希望避免上面的问题，解决办法就是干掉参数<code>ONLY_FULL_GROUP_BY</code>，这样在select中就可以出现其他的列了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. where限定+group</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. group + having</h3>
<p>遵循标准sql语法，where是在分组之前做过滤，having是在分组之后进行过滤，having后可以跟聚合函数，且可以于前面的聚合函数不同</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. group + having + limit</h3>
<p>唯一需要注意的就是多个限定时，请注意先后顺序</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录查询基础篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201204/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>8.Jooq之常用函数</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/08.201210-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/08.201210-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.Jooq之常用函数</source>
      <description>在我们的实际业务开发中，某些场景下会借助一些数据库支持的函数来做一些简单的操作，如针对浮点数的取整（ceil, floor）,字符串的长度获取(length)等，本文将介绍一下jooq中一些常见的函数使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Thu, 10 Dec 2020 20:26:16 GMT</pubDate>
      <content:encoded><![CDATA[<p>在我们的实际业务开发中，某些场景下会借助一些数据库支持的函数来做一些简单的操作，如针对浮点数的取整（<code>ceil</code>, <code>floor</code>）,字符串的长度获取(<code>length</code>)等，本文将介绍一下jooq中一些常见的函数使用姿势</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p>
<figure><img src="/imgs/201210/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 使用姿势</h2>
<h3> 0. 基本准备</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. abs</h3>
<p>取绝对值，对于值可能为负数的场景下适用，除了使用下面的<code>DSL.abs(Field)</code>之外，也可以直接使用<code>poetryTable.POET_ID.abs()</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. sqrt</h3>
<p>开方</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. pow</h3>
<p>n次方</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. mod</h3>
<p>求余</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. ceil, floor, round</h3>
<p>浮点数的取整处理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. rand</h3>
<p>随机数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. length</h3>
<p>字符串长度</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8. concat</h3>
<p>字符串拼接</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9. replace</h3>
<p>字符串替换</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10. lower, upper</h3>
<p>字符串大小写转换</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11. left, right</h3>
<p>字符串左右截取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12. trim</h3>
<p>去掉收尾空白字符</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 13. reverse</h3>
<p>字符串反转</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 14. 日期相关</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 15. 日期加减</h3>
<p>时间戳的加减 <code>DSL.timestampAdd(field, 增量，单位)</code>， 日期的加减可以使用 <code>DSL.dateAdd(field, 增量，单位)</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/05/201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之聚合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录查询基础篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201210/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>9.Jooq之多表联合查询</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/09.201211-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/09.201211-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">9.Jooq之多表联合查询</source>
      <description>一般互联网应用，我们不太建议在业务中使用多表联合查询，当然在业务体量比较小的情况下，多表联合查询有时候可以有效减少业务逻辑代码，所以用不用且不说，我们还是有必要了解一下多表的联合查询使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Fri, 11 Dec 2020 16:34:19 GMT</pubDate>
      <content:encoded><![CDATA[<p>一般互联网应用，我们不太建议在业务中使用多表联合查询，当然在业务体量比较小的情况下，多表联合查询有时候可以有效减少业务逻辑代码，所以用不用且不说，我们还是有必要了解一下多表的联合查询使用姿势</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p>
<figure><img src="/imgs/201211/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 使用姿势</h2>
<h3> 0. 前期准备</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. inner join</h3>
<p>内连接，两种常见的写法</p>
<ul>
<li><code>select 字段 from 表1 inner join 表2 on 连接条件;</code></li>
<li><code>select 字段 from 表1, 表2 [where 关联条件];</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. left join</h3>
<p>左连接，以左表为主，右表显示与左表有交集的数据，若不存在，使用null填充（若左表不存在，右表有数据，则不展示）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. right join</h3>
<p>右连接，以右表为主，左表显示与右表有交集的数据，若不存在，使用null填充（若右表不存在数据，左表有数据，则不展示）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. union &amp; union all</h3>
<p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集，请注意union会对结果进行去重，而union all会显示所有的结果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察一下上面输出中，left join 与 right join两次的查询情况，对于<code>left join</code>而言，左表的数据要求有，右表没有用null填充；而right join正好相反</p>
<p>此外就是<code>union</code>与<code>union all</code>的区别，前面会去重，后面则是捞出所有的记录</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/05/201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之聚合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录查询基础篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201211/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>10.Jooq之事务</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/10.201213-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E4%BA%8B%E5%8A%A1.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/10.201213-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E4%BA%8B%E5%8A%A1.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">10.Jooq之事务</source>
      <description>在SpringBoot中使用事务比较简单，大部分场景下，直接借助@Transactional注解即可，本文将介绍一下Jooq中使用事务的两种方式</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Jooq</category>
      <pubDate>Sun, 13 Dec 2020 12:06:09 GMT</pubDate>
      <content:encoded><![CDATA[<p>在SpringBoot中使用事务比较简单，大部分场景下，直接借助<code>@Transactional</code>注解即可，本文将介绍一下Jooq中使用事务的两种方式</p>
<!-- more -->
<h2> I. 项目搭建</h2>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<h3> 1. 项目依赖</h3>
<p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p>
<p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据准备</h3>
<p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p>
<figure><img src="/imgs/201213/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 使用姿势</h2>
<h3> 0. 前期准备</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. @Transactional 注解用法</h3>
<p>直接借助Spring的<code>@Transactional</code>注解来实现事务相关业务逻辑，在实际的时候需要注意一下，使用姿势不当，可能导致事务不生效，对此有疑问的小伙伴，可以查看博文<a href="https://spring.hhui.top/spring-blog/2020/02/03/200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】事务不生效的几种case</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. jooq声明式事务</h3>
<p>一般使用Spring的<code>@Transactional</code>注解时，需要注意不能是同类的内部方法调用，因为这样不会走代理，导致事务不生效；</p>
<p>如果确实存在事务的业务需求，但是又不想拆分到另外一个对象类，那么可以考虑一下声明式事务的用法，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际输出如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/11/201211-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之多表联合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/10/201210-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之常用函数使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/05/201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之聚合查询</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录查询基础篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq批量写入采坑记录</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之记录更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq之新增记录使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq代码自动生成</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener noreferrer">【SpringBoot DB系列】Jooq初体验</a></li>
</ul>
<p><strong>项目源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201213/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Jooq</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Jooq/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Jooq</source>
      <description>享受链式的sql写法，可以说是我用过最顺滑的orm框架，通过一些列博文让您体验下这个好用到要收费的ORM是怎么玩耍的</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>享受链式的sql写法，可以说是我用过最顺滑的orm框架，通过一些列博文让您体验下这个好用到要收费的ORM是怎么玩耍的</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.基本环境搭建与使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/01.181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/01.181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.基本环境搭建与使用</source>
      <description>SpringBoot结合mongodb进行业务开发，也属于比较基本的需求了，本文为mongo系列的基本篇，主要就是环境搭建、工程的配置设置相关</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>MongoDB</category>
      <pubDate>Thu, 13 Dec 2018 22:15:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot结合mongodb进行业务开发，也属于比较基本的需求了，本文为mongo系列的基本篇，主要就是环境搭建、工程的配置设置相关</p>
<!-- more -->
<h2> I. 环境搭建</h2>
<p>正式开始之前，第一步就是需要安装Mongo的环境了，因为环境的安装和我们spring的主题没有太大的关系，因此我们选择最简单的使用姿势：直接用docker来安装mongo来使用</p>
<p>下面的安装过程都是mac环境，其他操作系统可以直接安装mongodb，移步相关教程</p>
<h3> 1. docker 安装</h3>
<p>可以直接到官网进行下载安装，但是对系统版本有要求，所以需要使用<code>Docker ToolBox</code>，实际试过之后，感觉不太好用，实际上是将docker安装到虚拟机中了，下面直接使用<code>brew</code>命令进行安装</p>
<p><strong>安装命令</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完毕之后，会多一个应用名为 <code>docker</code>， 双击运行，输入密码等即可</p>
<h3> 2. mongo 安装使用</h3>
<p>直接使用官方的mongo镜像即可，然后绑定端口映射，就可以在宿主机中使用mongo</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面完毕之后，可以在宿主机进行连接测试，判断是否安装成功</p>
<h2> II. SpringBoot工程配置</h2>
<h3> 1. pom依赖</h3>
<p>整个框架选择的是spring-boot，所有spring这一套相关的pom配置少不了，我们主要需要注意的包就是<code>spring-boot-starter-data-mongodb</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置文件</h3>
<p>配置文件如下，主要就是连接mongo的url</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上面的实例，也知道格式如下:</p>
<p><code>mongodb://用户名:密码@host:port/dbNmae?参数</code></p>
<ul>
<li>当没有用户名和密码时，可以省略掉中间的 <code>root:root@</code>；</li>
<li>当需要认证时，请格外注意
<ul>
<li>mongodb新版的验证方式改成了<code>SCRAM-SHA-1</code>，所以参数中一定一定一定得加上
<ul>
<li><code>?authSource=admin&amp;authMechanism=SCRAM-SHA-1</code></li>
</ul>
</li>
<li>如果将mongodb的验证方式改成了<code>MONGODB-CR</code>, 则上面的可以不需要</li>
</ul>
</li>
</ul>
<h3> 3. 测试使用</h3>
<p>写一个简单的测试类，看下mongodb是否连接成功，是否可以正常操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面提供了两个方法，新增和查询，简单的使用姿势如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后开始执行，查看输出，结果演示如下</p>
<figure><img src="/imgs/181213/00.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h3> 4. 说明</h3>
<p>最后针对认证的问题，需要额外提一句，开始测试的时候，使用的配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而因为mongo采用的是SHA-1加密方式，所以始终验证不通过；然后查了一下，各种让改mongo的验证版本，改回去用CR的方式；但明显这种并不是一种好的解决方式，既然新的版本选择了新的加密方式，总有他的理由，所以应该改的还是spring的使用姿势；目前还没找到匹配上面这种配置方式的解决方案；</p>
<p>本文选择的是用url的方式指定加密方式来解决这个问题，当然研究下后面这种方式内部实现，应该就能知道前面的可以怎么解决，这点记下来，后续再开坑填</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/110-mongo-basic/README.md" target="_blank" rel="noopener noreferrer">110-mongo-basic</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181213/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>2.查询基本使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/02.190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/02.190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.查询基本使用姿势</source>
      <description>学习一个新的数据库，一般怎么下手呢？基本的CURD没跑了，当可以熟练的增、删、改、查一个数据库时，可以说对这个数据库算是入门了，如果需要更进一步的话，就需要了解下数据库的特性，比如索引、事物、锁、分布式支持等 本篇博文为mongodb的入门篇，将介绍一下基本的查询操作，在Spring中可以怎么玩</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>MongoDB</category>
      <pubDate>Sun, 13 Jan 2019 21:07:01 GMT</pubDate>
      <content:encoded><![CDATA[<p>学习一个新的数据库，一般怎么下手呢？基本的CURD没跑了，当可以熟练的增、删、改、查一个数据库时，可以说对这个数据库算是入门了，如果需要更进一步的话，就需要了解下数据库的特性，比如索引、事物、锁、分布式支持等</p>
<p>本篇博文为mongodb的入门篇，将介绍一下基本的查询操作，在Spring中可以怎么玩</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 0. 环境准备</h3>
<p>在正式开始之前，先准备好环境，搭建好工程，对于这一步的详细信息，可以参考博文: <a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181213-SpringBoot高级篇MongoDB之基本环境搭建与使用</a></p>
<p>接下来，在一个集合中，准备一下数据如下，我们的基本查询范围就是这些数据</p>
<figure><img src="http://spring.hhui.top/spring-blog/imgs/190113/00.jpg" alt="data" tabindex="0" loading="lazy"><figcaption>data</figcaption></figure>
<h3> 1. 根据字段进行查询</h3>
<p>最常见的查询场景，比如我们根据查询<code>user=一灰灰blog</code>的数据，这里主要会使用<code>Query</code> + <code>Criteria</code> 来完成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个实际的case，从中可以知道一般的查询方式为:</p>
<ul>
<li><code>Criteria.where(xxx).is(xxx)</code>来指定具体的查询条件</li>
<li>封装Query对象 <code>new Query(criteria)</code></li>
<li>借助<code>mongoTemplate</code>执行查询 <code>mongoTemplate.findOne(query, resultType, collectionName)</code></li>
</ul>
<p>其中findOne表示只获取一条满足条件的数据；find则会将所有满足条件的返回；上面执行之后，输出结果如</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. and多条件查询</h3>
<p>前面是只有一个条件满足，现在如果是要求同时满足多个条件，则利用<code>org.springframework.data.mongodb.core.query.Criteria#and</code>来斜街多个查询条件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 3. or或查询</h3>
<p>and对应的就是or，多个条件中只要一个满足即可，这个与and的使用有些区别, 借助<code>org.springframework.data.mongodb.core.query.Criteria#orOperator</code>来实现，传参为多个<code>Criteria</code>对象，其中每一个表示一种查询条件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后输出结果为</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. in查询</h3>
<p>标准的in查询case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5. 数值比较</h3>
<p>数值的比较大小，主要使用的是 <code>get</code>, <code>gt</code>, <code>lt</code>, <code>let</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 正则查询</h3>
<p>牛逼高大上的功能</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 7. 查询总数</h3>
<p>统计常用，这个主要利用的是<code>mongoTemplate.count</code>方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 8. 分组查询</h3>
<p>这个对应的是mysql中的group查询，但是在mongodb中，更多的是通过聚合查询，可以完成很多类似的操作，下面借助聚合，来看一下分组计算总数怎么玩</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意下，这里用<code>Aggregation</code>而不是前面的<code>Query</code>和<code>Criteria</code>，输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 9. 排序</h3>
<p>sort，比较常见的了，在mongodb中有个有意思的地方在于某个字段，document中并不一定存在，这是会怎样呢？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，对于没有这个字段的document也被查出来了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 10. 分页</h3>
<p>数据量多的时候，分页查询比较常见，用得多就是limit和skip了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果表明，limit用来限制查询多少条数据，skip则表示跳过前面多少条数据</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11. 小结</h3>
<p>上面给出的一些常见的查询姿势，当然并不全面，比如我们如果需要查询document中的部分字段怎么办？比如document内部结果比较复杂，有内嵌的对象或者数组时，嵌套查询可以怎么玩？索引什么的又可以怎么利用起来，从而优化查询效率？如何通过传说中自动生成的<code>_id</code>来获取文档创建的时间戳？</p>
<p>先留着这些疑问，后面再补上</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>
<p>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></p>
</li>
<li>
<p>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/111-mongo-template" target="_blank" rel="noopener noreferrer">mongo-template</a></p>
</li>
<li>
<p>相关博文: <a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181213-SpringBoot高级篇MongoDB之基本环境搭建与使用</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="http://spring.hhui.top/spring-blog/imgs/190113/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.如何新增文档</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/03.190124-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%A6%82%E4%BD%95%E6%96%B0%E5%A2%9E%E6%96%87%E6%A1%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/03.190124-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%A6%82%E4%BD%95%E6%96%B0%E5%A2%9E%E6%96%87%E6%A1%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.如何新增文档</source>
      <description>本篇博文为mongodb的curd中一篇，前面介绍简单的查询使用，这一篇重点则放在插入数据;</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>MongoDB</category>
      <pubDate>Thu, 24 Jan 2019 21:00:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>本篇博文为mongodb的curd中一篇，前面介绍简单的查询使用，这一篇重点则放在插入数据;</p>
<!-- more -->
<h2> I. 基本使用</h2>
<p>首先是准备好基本环境，可以参考博文</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181213-SpringBoot高级篇MongoDB之基本环境搭建与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/01/13/190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190113-SpringBoot高级篇MongoDB之查询基本使用姿势</a></li>
</ul>
<h3> 1. 新增一条数据</h3>
<p>MongoDB一个基本数据称为document，和mysql不一样，没有强制约束哪些字段，可以随意的插入，下面是一个简单的插入演示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的关键地方为一行: <code>mongoTemplate.insert(object, COLLECTION_NAME);</code></p>
<ul>
<li>第一个参数为待插入的document</li>
<li>第二个参数为collection name （相当于mysql的table)</li>
</ul>
<p>执行后输出结果为如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2. 批量插入</h3>
<p>一次插入多条记录，传集合进去即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果如下:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 3. upsert，不存在才插入</h3>
<p>我们希望在插入之前，判断数据是否存在，如果不存在则插入；如果存在则更新；此时就可以采用upsert来使用，一般三个参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个为查询条件，第二个为需要更新的字段，最后一个指定对应的collection，一个简单的实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. upsert，存在则更新</h3>
<p>前面的demo是演示不存在，那么存在数据呢?</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，注意下面的输出数据的 <code>_id</code>，正视前面插入的那条数据，两个数据唯一的不同，就是age被修改了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. upsert，多条满足时</h3>
<p>如果query条件命中多条数据，怎么办？会修改几条数据呢？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据实际输出进行查看，发现只有一条数据被修改；另外一条保持不变，结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/111-mongo-template" target="_blank" rel="noopener noreferrer">mongo-template</a></li>
</ul>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181213-SpringBoot高级篇MongoDB之基本环境搭建与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/01/13/190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190113-SpringBoot高级篇MongoDB之查询基本使用姿势</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>4.修改基本使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/04.190218-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E4%BF%AE%E6%94%B9%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/04.190218-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E4%BF%AE%E6%94%B9%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.修改基本使用姿势</source>
      <description>本篇依然是MongoDB curd中的一篇，主要介绍document的更新，主要内容如下 常见类型成员的修改 数组类型成员的增删改 document类型成员的增删改</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>MongoDB</category>
      <pubDate>Mon, 18 Feb 2019 21:19:25 GMT</pubDate>
      <content:encoded><![CDATA[<p>本篇依然是MongoDB curd中的一篇，主要介绍document的更新，主要内容如下</p>
<ul>
<li>常见类型成员的修改</li>
<li>数组类型成员的增删改</li>
<li>document类型成员的增删改</li>
</ul>
<!-- more -->
<h2> I. 基本使用</h2>
<p>首先是准备好基本环境，可以参考博文</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/13/181213-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181213-SpringBoot高级篇MongoDB之基本环境搭建与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/01/13/190113-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87MongoDB%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">190113-SpringBoot高级篇MongoDB之查询基本使用姿势</a></li>
</ul>
<p>在开始之前，先封装一个输出方法，用于打印修改后的record对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 基本类型修改</h3>
<p>mongodb支持我们常见的各种基本类型，而MongoTemplate也封装了不少对应的修改方法，最基础的修改，主要是借助<code>Update</code>来实现</p>
<p>常见的使用姿势如:</p>
<h4> a. 基本使用姿势</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 数字增加/减少</h4>
<p>数字类型修改，使用 <code>org.springframework.data.mongodb.core.query.Update#inc</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 数字比较修改</h4>
<p>数字简单比较之后修改，如<code>org.springframework.data.mongodb.core.query.Update#max</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. 乘法</h4>
<p>乘法运算, 主要使用 <code>org.springframework.data.mongodb.core.query.Update#multiply</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. 日期修改</h4>
<p>日期修改, 如 <code>org.springframework.data.mongodb.core.query.Update#currentDate</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. field修改</h3>
<p>不同于mysql的列表是固定的,mongodb的field可以增加、删除和重命名，下面分别看下三种case如何使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 重命名</h4>
<p>利用<code>org.springframework.data.mongodb.core.query.Update#rename</code>来实现重命名，需要注意的是，当修改的docuemnt没有这个成员时，相当于没有任务操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，后面一个语句相当于没有执行</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 新增成员</h4>
<p>新增也是直接利用的<code>Update#set</code>方法，当存在时，修改；不存在时，添加</p>
<ul>
<li>另外提一下<code>setOnInsert</code>, 如果要更新的文档存在那么$setOnInsert操作符不做任何处理；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 删除成员</h4>
<p>删除document中的某个成员，借助<code>org.springframework.data.mongodb.core.query.Update#unset</code>， 正好与添加对上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数组操作</h3>
<p>在MongoDB的document中，有两个有意思的类型，一个是数组，一个是document（即可以嵌套），这里则主要介绍下如何操作数组中的成员</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 添加到数组中</h4>
<p>在数组中新增一个数据，提供了两种方式，一个是<code>org.springframework.data.mongodb.core.query.Update#addToSet(java.lang.String, java.lang.Object)</code>，一个是<code>org.springframework.data.mongodb.core.query.Update#push(java.lang.String, java.lang.Object)</code>；两个的区别在于前者不能插入重复数据，后者可以</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 批量添加</h4>
<p>一次添加多个，借助<code>addToSet</code>的<code>each</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 删除</h4>
<p>借助pull来精确删除某个值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下，注意对比，<code>2</code>没有了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. 修改</h4>
<p>修改，首先的问题是要定位，确定删除数组中某个下标的元素，这里借助了一个有意思的站位</p>
<ul>
<li>定位删除的数组元素方法： <code>arrayKey.index</code>
<ul>
<li><code>arrayKey</code> 是数组在docment中的名</li>
<li><code>index</code> 表示要删除的索引</li>
</ul>
</li>
</ul>
<p>一个实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果，注意后面的，如果数组个数小于待更新的索引位置，则前面补null</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. document操作</h3>
<p>内嵌文档，可以所是MongoDB的一个特色了，我们则来看下如何进行操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 添加</h4>
<p>借助前面的站位思想，就很好实现了，定位元素的方式采用</p>
<ul>
<li>docName.fieldName
<ul>
<li>docName 为内嵌文档在docunent中的fieldName</li>
<li>fieldName 为内嵌文档内部需要修改的fieldName</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 修改</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. 删除</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>子module：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/111-mongo-template/README.md" target="_blank" rel="noopener noreferrer">111-mongo-template</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>MongoDB</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/MongoDB/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">MongoDB</source>
      <description>文档数据库SpringBoot的系列教程，彻底扫平阻碍我们CURD的路障，适用于对Mongodb不了解或了解不够的小伙伴</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>文档数据库SpringBoot的系列教程，彻底扫平阻碍我们CURD的路障，适用于对Mongodb不了解或了解不够的小伙伴</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.Mybatis+xml整合篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/01.191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/01.191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.Mybatis+xml整合篇</source>
      <description>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 本文将通过实例方式，介绍下如何整合SpringBoot + Mybatis，构建一个支持CRUD的demo工程</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Fri, 27 Dec 2019 19:04:46 GMT</pubDate>
      <content:encoded><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p>本文将通过实例方式，介绍下如何整合SpringBoot + Mybatis，构建一个支持CRUD的demo工程</p>
<!-- more -->
<h2> I. 环境</h2>
<p>本文使用SpringBoot版本为 <code>2.2.1.RELEASE</code>， mybatis版本为<code>1.3.2</code>，数据库为mysql 5+</p>
<h3> 1. 项目搭建</h3>
<p>推荐是用官方的教程来创建一个SpringBoot项目； 如果直接创建一个maven工程的话，将下面配置内容，拷贝到你的<code>pom.xml</code>中</p>
<ul>
<li>主要引入的是<code>mybatis-spring-boot-starter</code>，可以减少令人窒息的配置</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置信息</h3>
<p>在 <code>application.yml</code> 配置文件中，加一下db的相关配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来准备一个测试表(依然借用之前db操作系列博文中的表结构)，用于后续的CURD；表结果信息如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例整合</h2>
<p>本文将介绍一下传统的xml使用姿势，手动的添加<code>PO</code>, <code>DAO</code>, <code>Mapper.xml</code>；至于Generator来自动生成的case，后面通过图文的方式进行介绍</p>
<h3> 1. PO</h3>
<p>创建表对应的PO对象: <code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>知识点注意，上面的 createAt 与 表中的create_at，一个驼峰一个下划线，他们是怎么映射的呢？且看后文</strong></p>
<h3> 2. DAO接口</h3>
<p>表的操作接口，下面简单的写了四个接口，分别对应CRUID四种操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点观察下上面接口的两个注解</p>
<ul>
<li><code>@Mapper</code>：声明这个为mybatis的dao接口，spring扫描到它之后，会自动生成对应的代理类
<ul>
<li>使用这个注解之后，可以不再启动类上加上<code>@MapperScan</code>； 当然加上<code>@MapperScan</code>之后，也可以不用这个注解</li>
</ul>
</li>
<li><code>@Param</code>： 主要传递到xml文件中，方便参数绑定</li>
</ul>
<p>这里简单说一下几种常见的参数传递方式</p>
<h4> a. 单参数传递</h4>
<p>如果只有一个基本类型的参数，可以直接使用参数名的使用方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的xml文件如下（先忽略include 与 resultMap）, 可以直接用参数名</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 多参数默认传递</h4>
<p>当接口定义有多个参数时，就不能直接使用参数名了，使用 arg0, arg1... (或者 param1, param2...)</p>
<p>实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. @Param方式</h4>
<p>就是上面case中的方式，xml中的参数就是注解的value；就不给演示了（后续的xml中可以看到使用姿势）</p>
<h4> d. Map传参</h4>
<p>接口定义一个Map&lt;String, Object&gt; 类型的参数，然后在xml中，就可以使用key的值来表明具体选中的是哪一个参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的xml如下，关于标签的用法主要是mybatis的相关知识点，这里不详细展开</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. POJO传参</h4>
<p>参数为一个POJO对象，实际使用中，通过成员名来确定具体的参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的xml如下，需要添加参数<code>parameterType</code> 指定POJO的类型</p>
<p><strong>此外请额外注意下面的参数使用姿势和后面<code>savePo</code>接口对应的实现中参数的引用区别</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. xml实现</h3>
<p>上面的Mapper接口中定义接口，具体的实现需要放在xml文件中，在我们的实例case中，xml文件放在 <code>resources/sqlmapper</code>目录下</p>
<p>文件名为<code>money-mapper.xml</code>， 没有什么特别的要求</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的xml文件中，除了四个接口对应的实现之外，还定义了一个<code>resultMap</code> 和 <code>sql</code></p>
<ul>
<li>sql 标签定义通用的sql语句片段，通过<code>&lt;include refid="xxx"/&gt;</code>方式引入，避免写重复代码</li>
<li>resultMap: 定义表中数据与POJO成员的映射关系，比如将下划线的命名映射成驼峰</li>
</ul>
<h3> 4. mybatis配置</h3>
<p>上面基本上完成了整合工作的99%, 但是还有一个问题没有解决，mapper接口如何与xml文件关联起来？</p>
<ul>
<li>xml文件中的mapper标签的namespace指定了具体的mapper接口, 表明这个xml文件对应的这个mapper</li>
</ul>
<p>但是对于spring而言，并不是所有的xml文件都会被扫描的，毕竟你又不是 <code>web.xml</code> 这么有名（为什么web.xml就这么特殊呢😝, 欢迎查看我的<a href="http://spring.hhui.top/spring-blog/2019/03/16/190316-Spring-MVC%E4%B9%8B%E5%9F%BA%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E7%9A%84web%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener noreferrer">Spring MVC之基于xml配置的web应用构建</a>）</p>
<p>为了解决xml配置扫描问题，请在 <code>application.yml</code> 文件中添加下面这一行配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 测试</h3>
<p>接下来简单测试一下上面的四个接口，看是否可以正常工作</p>
<p>启动类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<figure><img src="/imgs/191227/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191227/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.Mybatis+注解整合篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/02.191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/02.191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.Mybatis+注解整合篇</source>
      <description>上一篇博文介绍了SpringBoot整合mybatis的过程，但是xml的方式，总感觉让人有点蛋疼；本文将介绍一种noxml的使用姿势，纯用注解的方式来支持CURD</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 30 Dec 2019 13:35:03 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇博文介绍了SpringBoot整合mybatis的过程，但是xml的方式，总感觉让人有点蛋疼；本文将介绍一种noxml的使用姿势，纯用注解的方式来支持CURD</p>
<!-- more -->
<h2> I. 环境</h2>
<p>本文使用SpringBoot版本为 <code>2.2.1.RELEASE</code>， mybatis版本为<code>1.3.2</code>，数据库为mysql 5+</p>
<h3> 1. 项目搭建</h3>
<p>推荐是用官方的教程来创建一个SpringBoot项目； 如果直接创建一个maven工程的话，将下面配置内容，拷贝到你的<code>pom.xml</code>中</p>
<ul>
<li>主要引入的是<code>mybatis-spring-boot-starter</code>，可以减少令人窒息的配置</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置信息</h3>
<p>在 <code>application.yml</code> 配置文件中，加一下db的相关配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来准备一个测试表(依然借用之前db操作系列博文中的表结构)，用于后续的CURD；表结果信息如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例整合</h2>
<p>在前一篇的基础上进行扩展，重点在于干掉了xml文件，在DAO接口上通过注解来实现CURD</p>
<h3> 1. PO</h3>
<p>创建表对应的PO对象: <code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. DAO接口</h3>
<p>表的操作接口，下面简单的写了四个接口，分别对应CRUID四种操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从mapper的实现上，也可以看出来，通过 <code>@Insert</code>, <code>@Select</code>, <code>@Update</code>, <code>@Delete</code> 四个注解来实现CURD，使用上面这种方式时，有几个点需要注意</p>
<ul>
<li>insert: 当我们希望插入的主键写回到PO时，可以配置<code>@Options(useGeneratedKeys = true, keyProperty = "po.id", keyColumn = "id")</code></li>
<li>动态sql: 在注解中，通过<code>&lt;script&gt;</code>来包装动态sql</li>
<li>@Results 实现<code>&lt;resultMap&gt;</code>的映射关系</li>
</ul>
<h3> 5. 测试</h3>
<p>接下来简单测试一下上面的四个接口，看是否可以正常工作</p>
<p>启动类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<figure><img src="/imgs/191230/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<p><strong>推荐阅读</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">191230-SpringBoot系列教程Mybatis+注解整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">191227-SpringBoot系列教程Mybatis+xml整合篇</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-noxml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-noxml</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191230/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.MybatisPlus整合篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/03.191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/03.191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.MybatisPlus整合篇</source>
      <description>前面介绍了SpringBoot整合Mybatis 实现db的增删改查操作，分别给出了xml和注解两种实现mapper接口的方式；虽然注解方式干掉了xml文件，但是使用起来并不优雅，本文将介绍mybats-plus的使用case，简化常规的CRUD操作</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Tue, 31 Dec 2019 09:31:10 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍了SpringBoot整合Mybatis 实现db的增删改查操作，分别给出了xml和注解两种实现mapper接口的方式；虽然注解方式干掉了xml文件，但是使用起来并不优雅，本文将介绍mybats-plus的使用case，简化常规的CRUD操作</p>
<!-- more -->
<h2> I. 环境</h2>
<p>本文使用SpringBoot版本为 <code>2.2.1.RELEASE</code>， mybatis-plus版本为<code>3.2.0</code>，数据库为mysql 5+</p>
<h3> 1. 项目搭建</h3>
<p>推荐是用官方的教程来创建一个SpringBoot项目； 如果直接创建一个maven工程的话，将下面配置内容，拷贝到你的<code>pom.xml</code>中</p>
<ul>
<li>主要引入的是<code>mybatis-spring-boot-starter</code>，可以减少令人窒息的配置</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置信息</h3>
<p>在 <code>application.yml</code> 配置文件中，加一下db的相关配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来准备一个测试表(依然借用之前db操作系列博文中的表结构)，用于后续的CURD；表结果信息如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例整合</h2>
<p>mybatis-plus与mybatis的使用姿势有一些区别，下面为不借助<code>generator</code>直接手撸代码的case</p>
<h3> 1. PO</h3>
<p>创建表对应的PO对象: <code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. DAO接口</h3>
<p>表的操作接口，与mybatis不同的是这个接口继承<code>BaseMapper</code>之后，就自带了单表的CURD操作接口了，基本上不需要定义额外的接口，就可以实现db交互</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>注意<code>BaseMapper</code>的参数为表对应的PO对象</li>
</ul>
<h3> 3. 测试</h3>
<p>上面完成之后，整合过程基本上就完了，没错，就这么简单，接下来我们进入测试环节</p>
<p>首先是启动类，我们加上了<code>@MapperScan</code>注解，这样在DAO接口上就不需要添加<code>@Mapper</code>注解了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于测试case，下面会演示CRUD四种基本的操作case，因为本文重点不是介绍mybatis-plus的用法，对于下面代码有疑问的可以查看官方文档: <a href="https://mp.baomidou.com/guide/" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com/guide/</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<figure><img src="/imgs/191231/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/105-mybatis-plus/" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/105-mybatis-plus</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191231/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.Mybatis-Plus代码自动生成</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/04.200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/04.200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.Mybatis-Plus代码自动生成</source>
      <description>一个简单的实例工程，介绍利用mybatis-plus的代码自动生成插件，根据表结构来生成对应的类和xml配置文件</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 06 Apr 2020 16:50:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>一个简单的实例工程，介绍利用mybatis-plus的代码自动生成插件，根据表结构来生成对应的类和xml配置文件</p>
<!-- more -->
<h2> I. 代码生成</h2>
<p>本文主要内容来自官方教程，通过实例方式介绍代码生成过程</p>
<h3> 1. 准备</h3>
<p>准备两张表，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，上面两张表的命名格式并不一样，有的是驼峰，有的是下划线（主要为了演示不同表名，对于生成代码的影响）</p>
<h3> 2. 配置依赖</h3>
<p>首先需要在我们的xml文件中，添加相关的依赖</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 代码生成类</h3>
<p>写一个代码生成类方法，主要逻辑如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码，绝大部分都是通用的，下面着重说明需要注意的点</p>
<ul>
<li><code>GlobalConfig#setOutputDir</code>: 设置代码输出的项目根路径，请根据具体的项目要求进行指定，不包含包名哦</li>
<li><code>GlobalConfig#setFileOverride(true)</code>: 设置为true，则每次生成都会覆盖之前生成的代码，适用于表结构发生变化的场景
<ul>
<li>注意：会导致之前添加的业务代码被覆盖掉，需要额外注意</li>
<li>通常希望设置为false，当表结构发生变化时，手动介入</li>
</ul>
</li>
<li><code>DataSourceConfig</code>: 数据源的设置，上面设置的是mysql的相关配置</li>
<li><code>PackageConfig</code>: 包信息
<ul>
<li><code>setParent</code>: java包路径</li>
<li><code>setModuleName</code>: 设置模块名，如设置为test，则xml在<code>mapper/test/</code>目录下; parent包自动加上<code>.test</code></li>
</ul>
</li>
<li><code>FileOutConfig</code>: xml文件名</li>
<li><code>TemplateConfig</code>: 模板配置
<ul>
<li>可用默认的代码生成模板，也可以使用自定义的模板</li>
<li>不想生成某个模板类时，设置为null即可（如上面的不生成controller）</li>
</ul>
</li>
<li><code>StrategyConfig</code>: 策略配置
<ul>
<li>可以指定db-&gt;pojo字段名的映射规则</li>
<li>可以指定POJO/Controller继承自定义的基类</li>
</ul>
</li>
</ul>
<p>在IDEA中，直接右键执行上面的代码，就会生成目标类，如下截图</p>
<figure><img src="/imgs/200406/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 输出测试</h3>
<p>测试我们生成的类，是否可以对db进行操作，则有必要写一个启动类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的<code>@MapperScan</code>注解，其次对应的<code>application.yml</code>配置文件内容如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在db中插入一条数据</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问url: <code>http://localhost:8080/?id=1</code></p>
<p>控制台输出如下:</p>
<figure><img src="/imgs/200406/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 特殊场景说明</h3>
<p>上面的代码生成，针对首次执行生成打码时，问题不大；但是后续的业务开发中，总会有一些其他的情况，下面分别说明</p>
<h4> a. 表结构修改</h4>
<p>当表的结构发生变化时，我们需要一般需要重新生成对应的Entity，这个时候，需要<code>GlobalConfig#setFileOverride(true)</code></p>
<h4> b. 继承公用POJO</h4>
<p>我们可以定义一个通用的PO类，希望所有的表生成的POJO继承它</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码自动生成类的策略配置中，添加下面的两行设置即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 生成部分代码</h4>
<p>有些时候，我并不希望生成<code>service</code>,<code>xml</code>，可能就只需要实体类 + <code>mapper接口</code>，这个时候可以设置<code>TemplateConfig</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/106-mybatis-plus-generator" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/106-mybatis-plus-generator</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200406/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.Mybatis多数据源配置与使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/05.210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/05.210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.Mybatis多数据源配置与使用</source>
      <description>上一篇博文介绍JdbcTemplate配置多数据源的使用姿势，在我们实际的项目开发中，使用mybatis来操作数据库的可能还是非常多的，本文简单的介绍一下mybatis中，多数据源的使用姿势 通过区分包路径配合配置文件指定不同包下对应不同数据源的实现方式</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sat, 09 Jan 2021 21:03:51 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇博文介绍JdbcTemplate配置多数据源的使用姿势，在我们实际的项目开发中，使用mybatis来操作数据库的可能还是非常多的，本文简单的介绍一下mybatis中，多数据源的使用姿势</p>
<ul>
<li>通过区分包路径配合配置文件指定不同包下对应不同数据源的实现方式</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库相关</h3>
<p>以mysql为例进行演示说明，因为需要多数据源，一个最简单的case就是一个物理库上多个逻辑库，本文是基于本机的mysql进行操作</p>
<p>创建数据库<code>test</code> 与 <code>story</code>，两个库下都存在一个表<code>money</code> (同名同结构表，但是数据不同哦)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210109/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 项目环境</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件信息<code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的数据库配置，我们前面介绍的但数据库配置如下，它们层级并不一样，上面的配置需要我们自己额外进行加载解析</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 包路径指定</h2>
<p>这种实现方式和前文中JdbcTemplate的多数据源配置方式很类似，将不同数据源的Mapper文件拆分在不同的包中，然后在配置mybatis数据源及资源文件加载时，分别进行指定</p>
<h3> 1. 项目结构</h3>
<p>本项目中使用<code>story</code> + <code>test</code>两个数据库，我们将不同数据库的<code>mapper.xml</code>以及对应的实体相关类都分别放开，如下图</p>
<figure><img src="/imgs/210109/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 具体实现</h3>
<p>因为两个库中表结构完全一致，所以上图中的 <code>Entity</code>, <code>Mapper</code>, <code>Repository</code>以及<code>xml</code>文件基本都是一致的，下面代码只给出其中一份</p>
<p>数据库实体类<code>StoryMoneyEntity</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xml对应的Mapper接口<code>StoryMoneyMapper</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapper对应的xml文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库操作封装类<code>StoryMoneyRepository</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的重点看一下数据源以及Mybatis的相关配置<code>StoryDatasourceConfig</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个数据源的配置文件则如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试</h3>
<p>简单测试一下是否生效，直接在启动类中，调用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<figure><img src="/imgs/210109/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>本文中介绍的多数据源方式，其实和但数据源的mybatis配置方式基本一致，顶多就是SpringBoot中，遵循默认的规范不需要我们显示的创建<code>DataSource</code>实例、<code>SqlSessionFactory</code>实例等</p>
<p>上面介绍的方式，实际上就是显示的声明Mybatis配置过程，多一个数据源，就多一个相关的配置，好处是理解容易，缺点是不灵活，如果我的Mapper类放错位置，可能就会出问题了</p>
<p>那么有其他的方式么，如果我希望将所有的Mapper放在一个包路径下，可以支持么？</p>
<p>下一篇博文，将介绍一种基于<code>AbstractRoutingDataSource</code> + 注解的方式来实现多数据源的支持</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210109/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.Mybatis-Plus多数据源配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/06.210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/06.210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.Mybatis-Plus多数据源配置</source>
      <description>前面介绍了两种Mybatis的数据源配置，当然也少不了mybatis-plus MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，既然做增强，那多数据源这种硬性场景，肯定是有非常简单的解决方案的 本文将实例演示Mybatis-Plus多数据源的配置</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sun, 10 Jan 2021 16:02:17 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍了两种Mybatis的数据源配置，当然也少不了mybatis-plus</p>
<p>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，既然做增强，那多数据源这种硬性场景，肯定是有非常简单的解决方案的</p>
<p>本文将实例演示Mybatis-Plus多数据源的配置</p>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库相关</h3>
<p>以mysql为例进行演示说明，因为需要多数据源，一个最简单的case就是一个物理库上多个逻辑库，本文是基于本机的mysql进行操作</p>
<p>创建数据库<code>test</code> 与 <code>story</code>，两个库下都存在一个表<code>money</code> (同名同结构表，但是数据不同哦)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210110/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 项目环境</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件信息<code>application.yml</code>，请注意下面的写法格式，如有疑问可以参考官方教程</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 项目演示</h2>
<blockquote>
<p>本文主要参考自Mybatis-Plus官方教程，如后续版本有啥变动，请以官方说明为准
<a href="https://mp.baomidou.com/guide/dynamic-datasource.html#%E6%96%87%E6%A1%A3-documentation" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com/guide/dynamic-datasource.html#%E6%96%87%E6%A1%A3-documentation</a></p>
</blockquote>
<h3> 1. 实体类</h3>
<p>mybatis-plus可以借助插件实现自动生成相应的代码，我们这里简单自主实现测试demo，因为两个数据库中表结构完全一致，所以只需要一个Entity</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Mapper接口</h3>
<p>数据库操作定义接口<code>MoneyMapper</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml文件<code>resources/mapper/money-mapper.xml</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. Service接口与实现</h3>
<p>因为两张表，所以我们可以定义一个接口，两个不同的实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面Service的注解<code>@DS</code>，value为前面数据源配置文件中的key(<code>spring.datasource.dynamic.datasource</code>下面的<code>story</code> + <code>test</code>)</p>
<p>这个注解可以放在类上也可以放在方法上，方法上的优先级 &gt; 类，所以上面的两个Service实现可以改成一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 测试</h3>
<p>为简单起见，直接在启动类中添加写上测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210110/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener noreferrer">Mybatis基于AbstractRoutingDataSource与AOP实现多数据源切换</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">Mybatis+xml整合篇</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis-plus" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis-plus</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210110/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>7.基于AbstractRoutingDataSource与AOP实现多数据源切换</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/07.210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/07.210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.基于AbstractRoutingDataSource与AOP实现多数据源切换</source>
      <description>前面一篇博文介绍了Mybatis多数据源的配置，简单来讲就是一个数据源一个配置指定，不同数据源的Mapper分开指定；本文将介绍另外一种方式，借助AbstractRoutingDataSource来实现动态切换数据源，并通过自定义注解方式 + AOP来实现数据源的指定</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sun, 10 Jan 2021 10:15:17 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文介绍了Mybatis多数据源的配置，简单来讲就是一个数据源一个配置指定，不同数据源的Mapper分开指定；本文将介绍另外一种方式，借助<code>AbstractRoutingDataSource</code>来实现动态切换数据源，并通过自定义注解方式 + AOP来实现数据源的指定</p>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库相关</h3>
<p>以mysql为例进行演示说明，因为需要多数据源，一个最简单的case就是一个物理库上多个逻辑库，本文是基于本机的mysql进行操作</p>
<p>创建数据库<code>test</code> 与 <code>story</code>，两个库下都存在一个表<code>money</code> (同名同结构表，但是数据不同哦)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210110/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 项目环境</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件信息<code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 多数据源配置</h2>
<blockquote>
<p>强烈建议没有看上一篇博文的小伙伴，先看一下上篇博文 <a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></p>
</blockquote>
<p>在开始之前，先有必要回顾一下之前Mybatis多数据源配置的主要问题在哪里</p>
<ul>
<li>多加一个数据源，需要多一份配置</li>
<li>Mapper文件需要分包处理，对开发人员而言这是个潜在的坑</li>
</ul>
<p>针对上面这个，那我们想实现的目的也很清晰了，解决上面两个问题</p>
<h3> 1. AbstractRoutingDataSource</h3>
<p>实现多数据源的关键,从名字上就可以看出，它就是用来路由具体的数据源的，其核心代码如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>determineCurrentLookupKey</code>需要我们自己来实现，到底返回哪个数据源</p>
<h3> 2. 动态数据源实现</h3>
<p>我们创建一个<code>DynamicDataSource</code>继承自上面的抽象类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现方法，怎样决定具体的返回数据源呢？</p>
<p>一个可考虑的方法是，在Mapper文件上添加一个注解<code>@DS</code>，里面指定对应的数据源，然后再执行时，通过它来确定具体需要执行的数据源；</p>
<p>因为上面的实现没有传参，因此我们考虑借助线程上下文的方式来传递信息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 注解实现</h3>
<p>上面虽然给出了数据源选择的策略，从线程上下文中获取<code>DataBaseType</code>，但是应该怎样向线程上下文中塞这个数据呢？</p>
<p>我们需要支持的方案必然是在Sql执行之前，先拦截它，写入这个<code>DataBaseType</code>，因此我们可以考虑在<code>xxxMapper</code>接口上，定义一个注解，然后拦截它的访问执行，在执行之前获取注解中指定的数据源写入上下文，在执行之后清楚上下文</p>
<p>一个最基础的数据源注解<code>@DS</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解拦截</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 注册配置</h3>
<p>接下来就是比较关键的数据源配置了，我们现在需要注册<code>DynamicDataSource</code>，然后将他提供给<code>SqlSessionFactory</code>，在这里，我们希望解决即便多加数据源也不需要修改配置，所以我们调整了一下数据源的配置结构</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后给出一个加载上面配置的配置类<code>DSProperties</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们的<code>AutoConfiguration</code>类的实现方式就相对明确了(建议对比上一篇博文中的配置类)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 数据库实体类</h3>
<blockquote>
<p>项目结构图</p>
</blockquote>
<figure><img src="/imgs/210110/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>所有前面的东西属于通用配置相关，接下来给出具体的数据库操作相关实体类、Mapper类</p>
<p>数据库实体类<code>StoryMoneyEntity</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapper定义接口 <code>StoryMoneyMapper</code> + <code>TestMoneyMapper</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库操作封装类<code>StoryMoneyRepository</code> + <code>TestMoneyRepository</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 测试</h3>
<p>最后简单的测试下，动态数据源切换是否生效</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出日志如下</p>
<figure><img src="/imgs/210110/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 6.小结</h3>
<p>本文主要给出了一种基于<code>AbstractRoutingDataSource</code> + <code>AOP</code>实现动态数据源切换的实现方式，使用了下面三个知识点</p>
<ul>
<li><code>AbstractRoutingDataSource</code>实现动态数据源切换</li>
<li>自定义<code>@DS</code>注解 + AOP指定Mapper对应的数据源</li>
<li><code>ConfigurationProperties</code>方式支持添加数据源无需修改配置</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>相关博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/109-multi-datasource-mybatis</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210110/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>8.SpringBoot系列Mybatis之Mapper注册的几种方式</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/08.210706-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%B3%A8%E5%86%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/08.210706-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%B3%A8%E5%86%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.SpringBoot系列Mybatis之Mapper注册的几种方式</source>
      <description>SpringBoot项目中借助Mybatis来操作数据库，对大部分java技术栈的小伙伴来说，并不会陌生；我们知道，使用mybatis，一般会有下面几个 Entity: 数据库实体类 Mapper: db操作接口 Service: 服务类 本片博文中的注解，放在Mapper上，你知道注册Mapper有几种方式么（这个问题像不像&amp;quot;茴&amp;quot;字有几个写法😬）</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Tue, 06 Jul 2021 18:59:05 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot项目中借助Mybatis来操作数据库，对大部分java技术栈的小伙伴来说，并不会陌生；我们知道，使用mybatis，一般会有下面几个</p>
<ul>
<li>Entity: 数据库实体类</li>
<li>Mapper: db操作接口</li>
<li>Service: 服务类</li>
</ul>
<p>本片博文中的注解，放在Mapper上，你知道注册Mapper有几种方式么（这个问题像不像"茴"字有几个写法😬）</p>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库准备</h3>
<p>使用mysql作为本文的实例数据库，新增一张表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目环境</h3>
<p>本文借助 <code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>pom依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>db配置信息 <code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例演示</h2>
<p>前面基础环境搭建完成，接下来准备下Mybatis的Entity,Mapper等基础类</p>
<h3> 1. 实体类,Mapper类</h3>
<p>数据库实体类<code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的Mapper接口（这里直接使用注解的方式来实现CURD）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的Service类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 注册方式</h3>
<p>注意，上面写完之后，若不通过下面的几种方式注册Mapper接口，项目启动会失败，提示找不到MoneyMapper对应的bean</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 2.1 @MapperScan注册方式</h4>
<p>在配置类or启动类上，添加<code>@MapperScan</code>注解来指定Mapper接口的包路径，从而实现Mapper接口的注册</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>
<ul>
<li>basePackages: 传入Mapper的包路径，数组，可以传入多个</li>
<li>包路径支持正则，如<code>com.git.hui.boot.*.mapper</code>
<ul>
<li>上面这种方式，可以避免让我们所有的mapper都放在一个包路径下，从而导致阅读不友好</li>
</ul>
</li>
</ul>
<h4> 2.2 @Mapper 注册方式</h4>
<p>前面的<code>@MapperScan</code>指定mapper的包路径，这个注解则直接放在Mapper接口上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试输出省略...</p>
<h4> 2.3 MapperScannerConfigurer注册方式</h4>
<p>使用<code>MapperScannerConfigurer</code>来实现mapper接口注册，在很久以前，还是使用Spring的xml进行bean的声明的时候，mybatis的mapper就是这么玩的</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的java代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试输出省略</p>
<h3> 3. 小结</h3>
<p>本文主要介绍Mybatis中Mapper接口的三种注册方式，其中常见的两种注解方式</p>
<ul>
<li><code>@MapperScan</code>: 指定Mapper接口的包路径</li>
<li><code>@Mapper</code>: 放在mapper接口上</li>
<li><code>MapperScannerConfigurer</code>: 编程方式注册</li>
</ul>
<p>那么疑问来了，为啥要介绍这三种方式，我们实际的业务开发中，前面两个基本上就满足了；什么场景会用到第三种方式？</p>
<ul>
<li>如写通用的Mapper（类似Mybatis-Plus中的BaseMapper）</li>
<li>如一个Mapper，多数据源的场景（如主从库，冷热库，db的操作mapper一致，但是底层的数据源不同）</li>
</ul>
<p>本文到此结束，关于上面两个场景的实例case，后面有空再补上，我是一灰灰，有缘再见（欢迎关注长草的公众号<code>一灰灰blog</code>）</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>9.Mapper接口与Sql绑定几种姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/09.210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/09.210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">9.Mapper接口与Sql绑定几种姿势</source>
      <description>通常我们在使用Mybatis进行开发时，会选择xml文件来写对应的sql，然后将Mapper接口与sql的xml文件建立绑定关系，然后在项目中调用mapper接口就可以执行对应的sql 那么如何将Mapper接口与sql进行绑定呢？本文将介绍四种常见的姿势 默认策略 SpringBoot配置参数mybatis.mapper-locations &amp;lt;mapper&amp;gt;指定 SqlSessionFactory指定</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Wed, 07 Jul 2021 18:41:09 GMT</pubDate>
      <content:encoded><![CDATA[<p>通常我们在使用Mybatis进行开发时，会选择xml文件来写对应的sql，然后将Mapper接口与sql的xml文件建立绑定关系，然后在项目中调用mapper接口就可以执行对应的sql</p>
<p>那么如何将Mapper接口与sql进行绑定呢？本文将介绍四种常见的姿势</p>
<ul>
<li>默认策略</li>
<li>SpringBoot配置参数<code>mybatis.mapper-locations</code></li>
<li><code>&lt;mapper&gt;</code>指定</li>
<li>SqlSessionFactory指定</li>
</ul>
<!-- more --> 
<h2> I. 环境准备</h2>
<h3> 1. 数据库准备</h3>
<p>使用mysql作为本文的实例数据库，新增一张表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目环境</h3>
<p>本文借助 <code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>pom依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>db配置信息 <code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例演示</h2>
<p>环境搭建完毕，准备对应的实体类，Mapper接口</p>
<h3> 1. 实体类，Mapper接口</h3>
<p>数据库实体类: <code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个基础的Mapper接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个demo service</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. sql文件</h3>
<p>写sql的xml文件内容如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. Mapper与Sql绑定</h3>
<p>以上为代码层面实现CURD的基础知识，基本上就是mybatis操作的那些套路，没有什么需要特殊注意的；接下来我们进入本文主题</p>
<p>如何告诉mybatis，将上面的<code>MoenyMapper</code>接口与xml文件关联起来</p>
<h4> 3.1 默认方式</h4>
<p>采用默认的绑定方式，不需要我们做额外的操作，重点是需要遵循规则</p>
<ul>
<li>xml的目录结构，与Mapper接口的包路径完全一致</li>
<li>xml文件名与Mapper接口名完全一致（注意大小写都要完全一致）</li>
</ul>
<p><strong>请注意上面的另个完全一致</strong></p>
<figure><img src="/imgs/210707/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>使用默认的方式进行绑定时，一个示例如上图；特别需要注意的是文件名的大小写，xml文件的目录层级都需要完全一致</p>
<p>如果使用上面这种方式，在执行时，依然提示有问题，排查的思路就是查看 target目录下生成的class文件与xml文件是否在一起，如下图就是正常的case</p>
<figure><img src="/imgs/210707/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>再次说明</strong></p>
<ul>
<li>基于上面的case，我们可以直接将xml文件，与mapper接口写在一起，不放在资源路径<code>resources</code>下面</li>
</ul>
<h4> 3.2 SpringBoot配置</h4>
<p>SpringBoot提供了一个简单的配置，来指定Mapper接口与sql的绑定，一行配置即可</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方式就比较简单了，不要求xml文件与Mapper接口文件名一致；也没有指定路径层级一致</p>
<figure><img src="/imgs/210707/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> 3.3 Mapper标签</h4>
<p>mapper标签，需要放在mybatis的配置文件中，因此我们首先通过SpringBoot的配置参数指定文件路径</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在资源文件下，新建文件 <code>mybatis-config.xml</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的mapper标签来指定注册关系，也是可行的，详情可参考官方文档 ！</p>
<blockquote>
<p><a href="https://mybatis.org/mybatis-3/configuration.html#mappers" target="_blank" rel="noopener noreferrer">https://mybatis.org/mybatis-3/configuration.html#mappers</a></p>
</blockquote>
<h4> 3.4 SqlSessionFactory</h4>
<p>在前面一篇介绍Mapper接口注册的博文中，就介绍了通过<code>qlSessionFactory</code>+ <code>MapperScannerConfigurer</code>来注册</p>
<p>这里也是可以通过<code>SqlSessionFactory</code>来指定xml文件的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 小结</h3>
<p>本文主要介绍了四种Mapper接口与sql文件关系绑定的姿势，了解几种不同的姿势的特点，在实际的项目开发中，选择一个即可</p>
<ul>
<li>默认：在resource资源目录下，xml文件的目录层级与Mapper接口的包层级完全一致，且xml文件名与mapper接口文件名也完全一致
<ul>
<li>如mapper接口： <code>com.git.hui.boot.mybatis.mapper.MoneyMapper</code></li>
<li>对应的xml文件:  <code>com/git/hui/boot/mybatis/mapper/MoneyMapper.xml</code></li>
</ul>
</li>
<li>springboot配置参数:
<ul>
<li>application.yml配置文件中，指定 <code>mybatis.mapper-locations=classpath:sqlmapper/*.xml</code></li>
</ul>
</li>
<li>mybatis-config配置文件
<ul>
<li>这种姿势常见于非SpringBoot项目集成mybatis，通常将mybatis的相关配置放在 <code>mybatis-config.xml</code> 文件中</li>
<li>首先在配置文件中，指定加载参数 <code>mybatis.config-location=classpath:mybatis-config.xml</code></li>
<li>然后指定映射器 <code> &lt;mappers&gt;&lt;mapper resource="sqlmapper/money-mapper.xml"/&gt;&lt;/mappers&gt;</code></li>
</ul>
</li>
<li>SqlSessionFactory指定
<ul>
<li>直接在SqlSessionFactory中指定即可Mapper文件</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面几种方式之外，mybatis还支持无xml的方式，完全依靠注解来实现sql的拼装，因此也就不存在映射关系绑定了，关于注解的case，可以参考博文  <a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>mybatis系列博文</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/06/210706-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%B3%A8%E5%86%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper注册的几种方式</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus多数据源配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis基于AbstractRoutingDataSource与AOP实现多数据源切换</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210707/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>10.自定义类型转换TypeHandler</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/10.210725-SpringBoo%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2TypeHandler.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/10.210725-SpringBoo%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2TypeHandler.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">10.自定义类型转换TypeHandler</source>
      <description>在使用mybatis进行db操作的时候，我们经常会干的一件事情就是将db中字段映射到java bean，通常我们使用ResultMap来实现映射，通过这个标签可以指定两者的绑定关系，那么如果java bean中的字段类型与db中的不一样，应该怎么处理呢？ 如db中为timestamp, 而java bean中定义的却是long 通过BaseTypeHandler来实现自定义的类型转换</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sun, 25 Jul 2021 15:06:18 GMT</pubDate>
      <content:encoded><![CDATA[<p>在使用mybatis进行db操作的时候，我们经常会干的一件事情就是将db中字段映射到java bean，通常我们使用<code>ResultMap</code>来实现映射，通过这个标签可以指定两者的绑定关系，那么如果java bean中的字段类型与db中的不一样，应该怎么处理呢？</p>
<p>如db中为timestamp, 而java bean中定义的却是long</p>
<ul>
<li>通过<code>BaseTypeHandler</code>来实现自定义的类型转换</li>
</ul>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库准备</h3>
<p>使用mysql作为本文的实例数据库，新增一张表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目环境</h3>
<p>本文借助 <code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>pom依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>db配置信息 <code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例演示</h2>
<h3> 1. entity定义</h3>
<p>注意上面case中的<code>create_at</code> 与 <code>update_at</code>的类型都是<code>timestmap</code>，我们定义的Entity如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Mapper测试接口</h3>
<p>定义一个简单的查询接口，这里直接使用注解的方式（至于xml的写法差别也不大）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p>
<ul>
<li><code>@Results</code>： 这个注解与 ResultMap 标签效果一致，主要用于定义db的字段与java bean的映射关系</li>
<li><code>id = "moneyResultMap"</code> 这个id定义，可以实现@Results的复用</li>
<li><code>@Result</code>: 关注下<code>updateAt</code>的typeHandler，这里指定了自定义的TypeHandler，来实现<code>JdbcType.TEMSTAMP</code>与Java Bean中的long的转换</li>
</ul>
<h3> 3. 类型转换</h3>
<p>自定义类型转换，主要是继承<code>BaseTypeHandler</code>类，泛型的类型为Java Bean中的类型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>setNonNullParameter：将java类型，转换为jdbc类型</li>
<li>getNullableResult：将jdbc类型转java类型</li>
</ul>
<h3> 4. TypeHandler注册</h3>
<p>我们自己定义一个TypeHandler没啥问题，接下来就是需要它生效，一般来讲，有下面几种方式</p>
<h4> 4.1 result标签中指定</h4>
<p>通过result标签中的typeHandler指定</p>
<p>使用xml的方式如</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注解@Result的方式如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 4.2 SqlSessionFactory全局配置</h4>
<p>上面的使用姿势为精确指定，如果我们希望应用到所有的场景，则可以通过<code>SqlSessionFactory</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.3 全局xml配置</h4>
<p>除上面case之外，还有一个就是借助<code>mybatis-config.xml</code>配置文件来注册，如</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，使用上面的配置文件，需要在SpringBoot中指定如下配置，否则将不会生效</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.4 SpringBoot配置方式</h3>
<p>springboot配置文件，可以通过指定<code>type-handlers-package</code>来注册TypeHandler</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 小结</h3>
<p>本文主要介绍db中的类型与java bean中类型的映射适配策略，主要是通过继承<code>BaseTypeHandler</code>来实现自定义的类型转化</p>
<p>要使用自定义的TypeHandler，有全局生效与精确指定两种方式</p>
<ul>
<li><code>@Result</code>/<code>&lt;result&gt;</code>标签中，通过typeHandler指定</li>
<li>SqlSessionFactory 全局设置typeHandler</li>
<li><code>mybatis-config.xml</code> 配置文件设置<code>typeHandlers</code></li>
</ul>
<p>此外本文的配置中，还支持了驼峰与下划线的互转配置，这个也属于常见的配置，通过在<code>mybatis-config</code>中如下配置即可</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来问题来了，驼峰可以和下划线互转，那么有办法实现自定义的name映射么，如果有知道的小伙伴，请不吝指教</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>mybatis系列博文</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/07/210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper接口与Sql绑定几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/06/210706-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%B3%A8%E5%86%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper注册的几种方式</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus多数据源配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis基于AbstractRoutingDataSource与AOP实现多数据源切换</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>11.插件机制Interceptor</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/11.210726-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6Interceptor.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/11.210726-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6Interceptor.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">11.插件机制Interceptor</source>
      <description>在Mybatis中，插件机制提供了非常强大的扩展能力，在sql最终执行之前，提供了四个拦截点，支持不同场景的功能扩展 Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) ParameterHandler (getParameterObject, setParameters) ResultSetHandler (handleResultSets, handleOutputParameters) StatementHandler (prepare, parameterize, batch, update, query) 本文将主要介绍一下自定义Interceptor的使用姿势，并给出一个通过自定义插件来输出执行sql，与耗时的case</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 26 Jul 2021 16:03:56 GMT</pubDate>
      <content:encoded><![CDATA[<p>在Mybatis中，插件机制提供了非常强大的扩展能力，在sql最终执行之前，提供了四个拦截点，支持不同场景的功能扩展</p>
<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>
<p>本文将主要介绍一下自定义Interceptor的使用姿势，并给出一个通过自定义插件来输出执行sql，与耗时的case</p>
<!-- more -->
<h2> I. 环境准备</h2>
<h3> 1. 数据库准备</h3>
<p>使用mysql作为本文的实例数据库，新增一张表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 项目环境</h3>
<p>本文借助 <code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>pom依赖如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>db配置信息 <code>application.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 实例演示</h2>
<p>关于myabtis的配套Entity/Mapper相关内容，推荐查看之前的系列博文，这里就不贴出来了，将主要集中在Interceptor的实现上</p>
<h3> 1. 自定义interceptor</h3>
<p>实现一个自定义的插件还是比较简单的，试下<code>org.apache.ibatis.plugin.Interceptor</code>接口即可</p>
<p>比如定义一个拦截器，实现sql输出，执行耗时输出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现，核心逻辑在<code>intercept</code>方法，内部实现sql获取，参数解析，耗时统计</p>
<h4> 1.1 sql参数解析说明</h4>
<p>上面case中，对于参数解析，mybatis是借助Ognl来实现参数替换的，因此上面直接使用ognl表达式来获取sql参数，当然这种实现方式比较粗暴</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面这种姿势之外，我们知道最终mybatis也是会实现sql参数解析的，如果有分析过源码的小伙伴，对下面这种姿势应该比较熟悉了</p>
<p>源码参考自: <code>org.apache.ibatis.scripting.defaults.DefaultParameterHandler#setParameters</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是使用上面这种姿势，需要注意并不是所有的切点都可以生效；这个涉及到mybatis提供的四个切点的特性，这里也就不详细进行展开，在后面的源码篇，这些都是绕不过去的点</p>
<h4> 1.2 Intercepts注解</h4>
<p>接下来重点关注一下类上的<code>@Intercepts</code>注解，它表明这个类是一个mybatis的插件类，通过<code>@Signature</code>来指定切点</p>
<p>其中的type, method, args用来精确命中切点的具体方法</p>
<p>如根据上面的实例case进行说明</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先从切点为<code>Executor</code>，然后两个方法的执行会被拦截；这两个方法的方法名分别是<code>query</code>, <code>update</code>，参数类型也一并定义了，通过这些信息，可以精确匹配<code>Executor</code>接口上定义的类，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.3 切点说明</h4>
<p>mybatis提供了四个切点，那么他们之间有什么区别，什么样的场景选择什么样的切点呢？</p>
<p>一般来讲，拦截<code>ParameterHandler</code>是最常见的，虽然上面的实例是拦截<code>Executor</code>，切点的选择，主要与它的功能强相关，想要更好的理解它，需要从mybatis的工作原理出发，这里将只做最基本的介绍，待后续源码进行详细分析</p>
<ul>
<li>Executor：代表执行器，由它调度StatementHandler、ParameterHandler、ResultSetHandler等来执行对应的SQL，其中StatementHandler是最重要的。</li>
<li>StatementHandler：作用是使用数据库的Statement（PreparedStatement）执行操作，它是四大对象的核心，起到承上启下的作用，许多重要的插件都是通过拦截它来实现的。</li>
<li>ParameterHandler：是用来处理SQL参数的。</li>
<li>ResultSetHandler：是进行数据集（ResultSet）的封装返回处理的，它非常的复杂，好在不常用。</li>
</ul>
<p>借用网上的一张mybatis执行过程来辅助说明</p>
<figure><img src="/imgs/210726/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<blockquote>
<p>原文 <a href="https://blog.csdn.net/weixin_39494923/article/details/91534658" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_39494923/article/details/91534658</a></p>
</blockquote>
<h3> 2. 插件注册</h3>
<p>上面只是自定义插件，接下来就是需要让这个插件生效，也有下面几种不同的姿势</p>
<h4> 2.1 Spring Bean</h4>
<p>将插件定义为一个普通的Spring Bean对象，则可以生效</p>
<h4> 2.2 SqlSessionFactory</h4>
<p>直接通过<code>SqlSessionFactory</code>来注册插件也是一个非常通用的做法，正如之前注册TypeHandler一样，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3 xml配置</h4>
<p>习惯用mybatis的xml配置的小伙伴，可能更喜欢使用下面这种方式，在<code>mybatis-config.xml</code>全局xml配置文件中进行定义</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 小结</h3>
<p>本文主要介绍mybatis的插件使用姿势，一个简单的实例演示了如果通过插件，来输出执行sql，以及耗时</p>
<p>自定义插件实现，重点两步</p>
<ul>
<li>实现接口<code>org.apache.ibatis.plugin.Interceptor</code></li>
<li><code>@Intercepts</code> 注解修饰插件类，<code>@Signature</code>定义切点</li>
</ul>
<p>插件注册三种姿势:</p>
<ul>
<li>注册为Spring Bean</li>
<li>SqlSessionFactory设置插件</li>
<li>myabtis.xml文件配置</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/104-mybatis-ano</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>mybatis系列博文</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/25/210725-SpringBoo%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2TypeHandler/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoo系列Mybatis之自定义类型转换TypeHandler</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/07/210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper接口与Sql绑定几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/07/06/210706-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%B3%A8%E5%86%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper注册的几种方式</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus多数据源配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/10/210110-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%9F%BA%E4%BA%8EAbstractRoutingDataSource%E4%B8%8EAOP%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis基于AbstractRoutingDataSource与AOP实现多数据源切换</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/01/09/210109-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/12/27/201227-SpringBoot%E7%B3%BB%E5%88%97JdbcTemplate%E4%B9%8B%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">【DB系列】JdbcTemplate之多数据源配置与使用</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/06/200406-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BMybatis-Plus%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis-Plus代码自动生成</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/31/191231-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatisPlus%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】MybatisPlus整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/30/191230-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-%E6%B3%A8%E8%A7%A3%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+注解整合篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/12/27/191227-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BMybatis-xml%E6%95%B4%E5%90%88%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis+xml整合篇</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210726/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>12.CURD基本使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/12.210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/12.210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">12.CURD基本使用姿势</source>
      <description>mybatis作为数据的ORM框架，在国内的应用市场还是非常可观的，当初刚开始工作时使用spring + mybatis进行开发，后来也使用过hibernate, jdbctemplate, jooq，mybatisplus等其他的一些框架， 就个人使用感触来讲jooq的使用姿势和写sql差不多，基本上可以会写sql的无需额外的培训，立马可以上手； hibernate最大的特点就是借助方法名来映射sql语句，非常有特点，但是当查询条件复杂一些的话，对小白而言就没有那么友好了； 而jdbctemplate，这个在小项目，轻量的db操作中，用起来还是很爽的，非常灵活，但是也有一些点需要特别注意，比如queryForObject，查不到数据时抛异常而不是返回null； 至于mybatis以及衍生的mybatis-plus，也就是接下来的主角了，它的特点如何，为什么受到国内大量开发者的追捧，将它作为db操作的第一ORM框架，让我们看完之后再说</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sun, 15 Aug 2021 19:17:14 GMT</pubDate>
      <content:encoded><![CDATA[<p>mybatis作为数据的ORM框架，在国内的应用市场还是非常可观的，当初刚开始工作时使用spring + mybatis进行开发，后来也使用过hibernate, jdbctemplate, jooq，mybatisplus等其他的一些框架，</p>
<p>就个人使用感触来讲jooq的使用姿势和写sql差不多，基本上可以会写sql的无需额外的培训，立马可以上手；</p>
<p>hibernate最大的特点就是借助方法名来映射sql语句，非常有特点，但是当查询条件复杂一些的话，对小白而言就没有那么友好了；</p>
<p>而jdbctemplate，这个在小项目，轻量的db操作中，用起来还是很爽的，非常灵活，但是也有一些点需要特别注意，比如queryForObject，查不到数据时抛异常而不是返回null；</p>
<p>至于mybatis以及衍生的mybatis-plus，也就是接下来的主角了，它的特点如何，为什么受到国内大量开发者的追捧，将它作为db操作的第一ORM框架，让我们看完之后再说</p>
<!-- more -->
<h2> I. 基础环境搭建</h2>
<p>接下来的Mybatis的项目演示，主要是在SpringBoot的环境下运行，底层的数据库采用MySql，对应的版本信息如下</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. SpringBoot项目配置</h3>
<p>关于SpringBoot的项目创建过程省略，下面是核心的pom依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库准备</h3>
<p>在本地数据库中，新增了一个表如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来本文涉及到的CURD都是针对这张表来说的</p>
<h2> II. MyBatis CURD</h2>
<p>接下来我们将从0到1，实现基于mybatis进行mysql操作的全流程</p>
<h3> 1. 基本对象</h3>
<p>经常使用Mybatis的小伙伴可能知道，操作一个db，通常会伴随几个不可或缺的东西</p>
<ul>
<li>数据库实体类：可以理解为数据库表锁映射到的Java Bean对象</li>
<li>Mapper接口：interface类，其中定义db的操作方法</li>
<li>xml文件：与上面接口对应，xml文件中写实际的sql</li>
</ul>
<p>mybatis推荐的玩法是借助xml来写sql，但是官方也提供了注解的方式，因此xml文件并不是必须的；后面会介绍注解的操作方式；本文将主要是传统的xml配套使用姿势</p>
<p>针对上面这张表，第一步定义实体类<code>MoneyPo</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>上面的三个注解属于lombok的知识点，有不清楚的小伙伴可以搜索一下</li>
</ul>
<p>接下来是Mapper接口, <code>MoneyMapper</code>如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是Mapper接口对应的xml文件<code>MoneyMapper.xml</code></p>
<p>注意xml文件放在资源文件<code>resources</code>下面，且xml文件的目录结构，与上面的Mapper接口的包路径保持完全一致 (why? 参看博文 <a href="https://spring.hhui.top/spring-blog/2021/07/07/210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】SpringBoot系列Mybatis之Mapper接口与Sql绑定几种姿势</a>)</p>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/210815/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据插入</h3>
<p>前面的三步骤，将我们需要的实体类，接口对象，xml文件都初始化完毕，接下来就是进入我们的CURD环节，实现数据库的增删改查，这里主要使用<code>insert</code>标签</p>
<p>比如我们现在希望插入一条数据，首先需要做的就是在Mapper接口中定义一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着就是在xml文件中对应的sql</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.1 解析说明</h4>
<p>注意上面的xml文件</p>
<ul>
<li>parameterType: 用于指定传参类型</li>
<li>useGenerateKeys + keyProperty: 表明需要将插入db的主键id，会写到这个实体类的id字段上</li>
<li>sql语句传参：形如<code>#{}</code>，大括号里面填写变量名，上面用的是<code>po.name</code>，po为接口定义中的参数名，这个就表示使用po对象的name成员，作为db的name字段</li>
</ul>
<p>接下来就是重要知识点：</p>
<ul>
<li>传参除了使用 <code>#{}</code>之外，还可以使用 <code>${}</code>，区别在于前面为参数参数占位，后面为字符串替换，因此存在sql注入的风险</li>
</ul>
<p>举例说明</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面这两个sql，当<code>id = 1 or 1=1</code>，对应的两个sql变成</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2 批量插入</h4>
<p>除了上面的单挑插入，批量插入也是ok的，和前面的使用姿势差不多</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于foreach标签的说明，会放在后面的博文中专门进行介绍，这里简单理解为遍历即可</p>
<h3> 3. 数据查询</h3>
<p>查询可以说是我们日常开发中最常见的情况了，这里先给出简单的查询demo，至于更复杂的查询条件（如联表，子查询，条件查询等）在后面的博文中进行介绍</p>
<p>如根据主键进行查询，主要借助<code>select</code>标签来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下上面的实现，select语句内容比较简单，但是有几个需要注意的点</p>
<ul>
<li>sql标签：内部定义需要查询的db字段，最大的特点是供后面的查询语句，通过<code>include</code>来引入，从而实现代码片段的复用</li>
<li>resullMap标签：从db字段与MoneyPo实体类对比，我们可以知道部分字段名不是完全一样，如db中使用下划线，java中使用驼峰，那么db字段与java 成员变量如何映射呢？这里使用<code>result</code>标签来指定两者的映射关系，以及类型</li>
</ul>
<p>（上面这个相信会始终伴随各位小伙伴的开发生涯）</p>
<h3> 4. 数据更新</h3>
<p>更新主要借助<code>update</code>标签，相比较上面的两个，它的知识点就比较少了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p>
<ul>
<li>上面标签中的parameterType，在这里实际上是可以省略的</li>
<li><code>@Param</code>注解：主要用于指定参数名，在xml中可以使用内部定义的名字来作为参数变量；如果不加上这个注解，在xml中，参数变量则使用<code>param0</code>, <code>param1</code>来替代</li>
</ul>
<h3> 5. 数据删除</h3>
<p>删除使用<code>delete</code>标签</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 使用演示</h3>
<p>上面的mapper接口中定义了完整的CURD，接下来就是使用这个Mapper接口来实现交互了，在Spring中，使用姿势就非常简单了，直接当一个Spring Bean对象注入到service类中即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 小结</h3>
<p>相信各位小伙伴看到这里，搭建一个mybatis实现数据库的CURD的项目应该是问题不大了，本文的主要知识点如下</p>
<ul>
<li>mybatis项目的三套件：实体类 + mapper接口 + xml文件</li>
<li>数据库的增删改查</li>
</ul>
<p>其中有一些知识点比较重要，本文只是抛出来了，有兴趣的小伙伴可以持续关注后续更新</p>
<p>下面这些知识点，后面会进行更详细的说明</p>
<ul>
<li>如何获取插入数据的主键id</li>
<li>批量场景下的<code>foreach</code>标签使用</li>
<li>数据库表结构与java 实体类的映射 <code>resultMap</code>标签</li>
<li>Mapper接口与xml文件的关联方式</li>
<li>Mapper接口如何被扫描到，并被Spring bean对象</li>
<li>Mapper接口与xml的传参方式 <code>@Param</code>注解</li>
<li>sql参数替换的两种写法 <code>${}, #{}</code></li>
<li>传参类型，返回值类型定义</li>
<li>代码复用片段<code>sql</code>标签</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/210815/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>13.Mybatis传参作为字段/表名时的注意事项</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/13.210825-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%E4%BC%A0%E5%8F%82%E4%BD%9C%E4%B8%BA%E5%AD%97%E6%AE%B5-%E8%A1%A8%E5%90%8D%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/13.210825-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%E4%BC%A0%E5%8F%82%E4%BD%9C%E4%B8%BA%E5%AD%97%E6%AE%B5-%E8%A1%A8%E5%90%8D%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">13.Mybatis传参作为字段/表名时的注意事项</source>
      <description>今天遇到一个非常有意思的事情，一个小伙伴反馈，同样的sql，为啥直接通过mysql终端执行的结果，和mybatis的执行结果不一致，感觉有点鬼畜；然后看了一下，发现这是个比较典型的问题，#{}与${}的使用区别 接下来我们看一下这个问题，顺带也重新学习一下它们两的区别</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Wed, 25 Aug 2021 18:54:44 GMT</pubDate>
      <content:encoded><![CDATA[<p>今天遇到一个非常有意思的事情，一个小伙伴反馈，同样的sql，为啥直接通过mysql终端执行的结果，和mybatis的执行结果不一致，感觉有点鬼畜；然后看了一下，发现这是个比较典型的问题，<code>#{}</code>与<code>${}</code>的使用区别</p>
<p>接下来我们看一下这个问题，顺带也重新学习一下它们两的区别</p>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 场景复现</h2>
<p>一个简单的demo来演示下使用姿势，根据传参，来指定排序的字段；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的xml如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个执行之后可能与我们预期的不一致，如下</p>
<figure><img src="/imgs/210825/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 1. 问题修复</h3>
<p>上面的演示中，本来是希望根据传参进行排序，最后的执行结果会发现都是按照id进行排序</p>
<p>要解决上面这个问题，也很简单，将<code>#</code>改成<code>$</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试如下，和我们的预期一致了</p>
<figure><img src="/imgs/210825/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 原因分析</h3>
<p>上面这个问题的关键原因在于 <code>$</code> 与 <code>#</code>的本质区别，有过一点了解的小伙伴会知道<code>$</code>最终的效果是替换，而<code>#</code>则是占位</p>
<p>比如上面的两个，转成sql，对应如下</p>
<ul>
<li><code>#{}</code>: <code>select * from money order by 'money' asc</code>
<ul>
<li>注意money作为字符串传入的</li>
</ul>
</li>
<li><code>${}</code>: <code>select * from money order by money asc</code>
<ul>
<li>注意money作为列名</li>
</ul>
</li>
</ul>
<p>上面的第一个sql，非常有意思，执行居然不会抛错，可以正常执行(注意，这个与数据库版本有关，并不是所有的版本都可以正常执行)</p>
<figure><img src="/imgs/210825/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. #{}与${}对比</h3>
<table>
<thead>
<tr>
<th>#{}</th>
<th>${}</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数占位，相当于 ?</td>
<td>直接替换到sql的一部分</td>
</tr>
<tr>
<td>动态解析 -&gt; 预编译 -&gt; 执行</td>
<td>动态解析 -&gt; 编译 -&gt; 执行</td>
</tr>
<tr>
<td>变量替换是在DBMS 中</td>
<td>变量替换是在 DBMS 外</td>
</tr>
<tr>
<td>变量替换后，#{} 对应的变量自动加上单引号 ''</td>
<td>变量替换后，${} 对应的变量不会加上单引号 ''</td>
</tr>
<tr>
<td>防sql注入</td>
<td>不能防sql注入</td>
</tr>
</tbody>
</table>
<p>注意事项：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面两条sql，在具体传参的时候，就会有一个显著的去呗</p>
<ul>
<li>#{name}: 传参 <code>一灰灰</code>，对应sql如下
<ul>
<li><code>select * from money where name = '一灰灰'</code></li>
</ul>
</li>
<li>${name}: 传参 <code>一灰灰</code>，对应sql如下
<ul>
<li><code>select * from money where name = 一灰灰</code></li>
<li>注意上面的sql中，name的传参没有引号，直接就是bad sql</li>
<li>所以传参应该是 <code>'一灰灰'</code>，需要手动的加上单引号</li>
</ul>
</li>
</ul>
<p>使用姿势：</p>
<ul>
<li>能用 #{} 的地方就用 #{}，不用或少用 ${}</li>
<li>表名作参数时，必须用 ${}</li>
<li>order by 时，必须用 ${}</li>
<li>使用 ${} 时，要注意何时加或不加单引号，即 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"></span><span class="mord"><span class="mord cjk_fallback">和</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>{}'</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210825/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>14.CURD基本使用姿势-注解篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/14.210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/14.210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">14.CURD基本使用姿势-注解篇</source>
      <description>上面一篇博文介绍了mybatis + xml配置文件的使用方式，在上文中介绍到，xml文件是可以省略掉的，直接使用java注解来实现CURD，接下来我们看一下，如何使用注解来实现等同的效果</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Tue, 31 Aug 2021 17:16:55 GMT</pubDate>
      <content:encoded><![CDATA[<p>上面一篇博文介绍了mybatis + xml配置文件的使用方式，在上文中介绍到，xml文件是可以省略掉的，直接使用java注解来实现CURD，接下来我们看一下，如何使用注解来实现等同的效果</p>
<!-- more -->
<h2> I. Mybatis注解开发</h2>
<p>关于项目环境的搭建与前文一致，如有疑问，查看博文： <a href=""></a></p>
<h3> 1. 基础配置</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的数据库实体类 MoneyPO</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mapper接口类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意与前文的区别，这里我们没有xml文件</p>
<h3> 2. 数据插入</h3>
<p>新增数据，使用注解 <code>@Insert</code>，直接放在接口中定义的方法上即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Insert</code>注解中的内容与前面xml中标签内容一致，没有什么区别，重点关注一下 <code>@Options</code>注解，用来指定一些配置信息，比如上面的case，就用来配置将插入的id，保存到参数MoneyPo的id字段上</p>
<h3> 3. 查询数据</h3>
<p>查询则使用<code>@Select</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>select注解没有什么特别的，重点关注一下<code>@Results</code>注解</p>
<p>这个注解的作用，与xml中的<code>&lt;resultMap&gt;</code>标签功能一直，通过内部的<code>@Result</code>来指定数据库表结构与java实体类的映射关系，最外层的id主要用于复用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 数据更新</h3>
<p>直接给出对应的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 数据删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 小结</h3>
<p>从注解的使用来看，与xml文件的方式基本上没有什么区别，当然从上面的示例来说，貌似使用注解的方式更加简洁，毕竟sql语句直接放在方法上，不需要像之前那样，两个文件来回切换</p>
<p>但是，请注意，注解的使用姿势并没有特别广泛使用也是有原因的，上面只是一些简单接触的case，当sql语句比较复杂的时，注解的方式写起来就没有那么爽快了</p>
<p>如in查询</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解上的内容太多，特别是上面的字符串拼接方式，会极大的影响阅读体验；当然在jdk14的新特性中，提供了文本块的支持，类似pyton中使用三个双引号来标注一个大的文本块，然而现实的是，实际上又有多少项目升级到了jdk14呢?</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/info/info.png" type="image/png"/>
    </item>
    <item>
      <title>15.参数传递的几种姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/15.210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/15.210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">15.参数传递的几种姿势</source>
      <description>在mybatis的日常开发中，mapper接口中定义的参数如何与xml中的参数进行映射呢？除了我们常用的@Param注解之外，其他的方式是怎样的呢？</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Fri, 24 Sep 2021 17:15:59 GMT</pubDate>
      <content:encoded><![CDATA[<p>在mybatis的日常开发中，mapper接口中定义的参数如何与xml中的参数进行映射呢？除了我们常用的<code>@Param</code>注解之外，其他的方式是怎样的呢？</p>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 参数传递</h2>
<p>接下来我们看一下Mapper接口中的参数与xml文件中的参数映射的几种姿势；关于mybatis项目的搭建，这里就略过，重点信息有下面几个</p>
<p>数据库实体对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapper接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xml文件，在资源文件夹下，目录层级与mapper接口的包路径完全一致（遵循默认的Mapper接口与xml文件绑定关系，详情查看<a href="https://spring.hhui.top/spring-blog/2021/07/07/210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">SpringBoot系列Mybatis之Mapper接口与Sql绑定几种姿势</a>）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. @Param注解</h3>
<p>在接口的参数上添加<code>@Param</code>注解，在内部指定传递给xml的参数名</p>
<p>一个简单的case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重点关注上面的参数</p>
<ul>
<li>通过<code>@Param</code>来指定传递给xml时的参数名</li>
</ul>
<p>对应的xml文件中的sql如下，使用<code>#{}</code>来实现参数绑定</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 单参数</h3>
<p>接下来我们看一下不使用<code>@Param</code>注解时，默认场景下，xml中应该如何指定参数；因为单参数与多参数的实际结果不一致，这里分开进行说明</p>
<p>单参数场景下，xml中的参数名，可以用任意值来表明</p>
<p>mapper接口定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml文件内容如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点看一下上面的<code>findByIdV2</code>，上面的sql中传参使用的是 <code>#{dd}</code>，和mapper接口中的参数名并不相同，但是最终的结果却没有什么区别</p>
<h3> 3. 多参数</h3>
<p>当参数个数超过1个的时候，<code>#{}</code>中的参数，有两种方式</p>
<ul>
<li>param1...N: 其中n代表的接口中的第几个参数</li>
<li>arg0...N</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的xml中，两种传参都是可以的，当然不建议使用这种默认的方式来传参，因为非常不直观，对于后续的维护很不优雅</p>
<h3> 3. Map传参</h3>
<p>如果参数类型并不是简单类型，当时Map类型时，在xml文件中的参数，可以直接使用map中对应的key来指代</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. POJO对象</h3>
<p>另外一种常见的case是传参为简单的实体对象，这个时候xml中的参数也可以直接使用对象的fieldName来指代，和map的使用方式差不多</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml文件如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 简单参数 + Map参数</h3>
<p>当参数有多个，其中部分为简单类型，部分为Map，这样的场景下参数如何处理呢?</p>
<ul>
<li>简单类型遵循上面的规则</li>
<li>map参数的传参，使用前缀 + "." + key的方式</li>
</ul>
<p>一个实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.小结</h3>
<p>本文主要介绍mybatis中传参的几种姿势：</p>
<ul>
<li>默认场景下，单参数时，xml文件中可以用任意名称代替传参</li>
<li>默认场景下，多参数时，第一个参数可用 param1 或 arg0来表示，第二个参数为 param2 或 arg1。。。</li>
<li>单参数，且为map时，可以直接使用map的key作为传参</li>
<li>单参数，pojo对象时，使用对象的fieldName来表示传参</li>
<li>@Param注解中定义的值，表示这个参数与xml中的占位映射关联</li>
<li>多参数场景下，简单对象 + map/pojo时，对于map/pojo中的参数占位，可以通过 <code>paramN.xxx</code> 的方式来完成</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/info/info.png" type="image/png"/>
    </item>
    <item>
      <title>16.转义符的使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/16.210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/16.210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">16.转义符的使用姿势</source>
      <description>在mybatis的xml文件中直接写sql比较方便简洁，但是需要注意的是，在xml文件中，经常会遇到一些需要转义的场景，比如查询 id &amp;lt; xxx的数据，这个小于号就不能直接写在sql中，接下来我们将看一下，mybatis中的有哪些转义符，可以怎么处理转义问题</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 27 Sep 2021 20:21:44 GMT</pubDate>
      <content:encoded><![CDATA[<p>在mybatis的xml文件中直接写sql比较方便简洁，但是需要注意的是，在xml文件中，经常会遇到一些需要转义的场景，比如查询 <code>id &lt; xxx</code>的数据，这个小于号就不能直接写在sql中，接下来我们将看一下，mybatis中的有哪些转义符，可以怎么处理转义问题</p>
<!-- more -->
<h2> I.转义</h2>
<h3> 1. 转义符</h3>
<p>在mybatis的xml文件中，我们最常见的转义符为小于号，如查询id小于100的数据</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的sql，小于号实际使用的是 <code>&amp;lt;</code>，不能直接使用 <code>&lt;</code>，比如直接使用小于号，在idea中会有如下的错误提示</p>
<figure><img src="/imgs/210927/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>日常开发中除了上面的小于号之外，另外一个常见的则是 <code>&amp;</code> 与操作符，如果sql中有位操作的场景，同样需要转义</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在mybatis中常见的几个转义字符表映射关系如下表 （mybatis的转义实际上完全遵循的是xml转义规则，主要有下面几个）</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>转义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&amp;</td>
<td>&amp;</td>
<td>与</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>单引号</td>
</tr>
<tr>
<td>"</td>
<td>"</td>
<td>双引号</td>
</tr>
</tbody>
</table>
<h3> 2. <code>&lt;![CDATA[ ]]&gt;</code> 写法</h3>
<p>通过转义的方式虽然简单，但是有一个问题就是不够直观，在阅读sql时，还需要在脑海里反转义一下，这样就不太友好了，好在xml提供了CDATA的语法，被包裹在它内部的语句，不会被xml解析器进行解析</p>
<p>如通过下面的写法来写与操作</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方式时，需要注意：</p>
<ul>
<li>不支持嵌套的写法</li>
<li>结尾符 <code>]]&gt;</code> 注意与起始符配套使用</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>系列博文：</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210927/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>17.传参类型如何确定</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/17.211025-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/17.211025-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">17.传参类型如何确定</source>
      <description>最近有小伙伴在讨论#{}与${}的区别时，有提到#{}是用字符串进行替换，就我个人的理解，它的主要作用是占位，最终替换的结果并不一定是字符串方式，比如我们传参类型是整形时，最终拼接的sql，传参讲道理也应该是整形，而不是字符串的方式 接下来我们来看一下，mapper接口中不同的参数类型，最终拼接sql中是如何进行替换的</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 25 Oct 2021 19:02:03 GMT</pubDate>
      <content:encoded><![CDATA[<p>最近有小伙伴在讨论<code>#{}</code>与<code>${}</code>的区别时，有提到<code>#{}</code>是用字符串进行替换，就我个人的理解，它的主要作用是占位，最终替换的结果并不一定是字符串方式，比如我们传参类型是整形时，最终拼接的sql，传参讲道理也应该是整形，而不是字符串的方式</p>
<p>接下来我们来看一下，mapper接口中不同的参数类型，最终拼接sql中是如何进行替换的</p>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试数据，主要是<code>name</code>字段，值为一个数字的字符串</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 传参类型确定</h2>
<p>本文忽略掉mybatis中的po、mapper接口、xml文件的详情，有兴趣的小伙伴可以直接查看最下面的源码（或者查看之前的博文也可以）</p>
<h3> 1. 参数类型为整形</h3>
<p>针对上面的case，定义一个根据name查询数据的接口，但是这个name参数类型为整数</p>
<p>mapper接口：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml文件如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个写法非常常见了，我们现在的问题就是，传参为整数，那么最终的sql是 <code>name = 120</code> 还是 <code>name = '120'</code>呢？</p>
<p>那么怎么确定最终生成的sql是啥样的呢？这里介绍一个直接输出mysql执行sql日志的方式</p>
<p>在mysql服务器上执行下面两个命令，开启sql执行日志</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们访问上面的接口之后，会发现最终发送给mysql的sql语句中，参数替换之后依然是整数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2. 指定jdbcType</h3>
<p>在使用<code>#{}</code>, <code>${}</code>时，有时也会看到除了参数之外，还会指定jdbcType，那么我们在xml中指定这个对最终的sql生成会有影响么?</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的sql如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从实际的sql来看，这个jdbcType并没有影响最终的sql参数拼接，那它主要是干嘛用呢？（它主要适用于传入null时，类型转换可能出现的异常）</p>
<h3> 3. 传参类型为String</h3>
<p>当我们传参类型为string时，最终的sql讲道理应该会带上引号</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个最终生成的sql如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. TypeHandler实现参数替换强制添加引号</h3>
<p>看完上面几节，基本上可以有一个得出一个简单的推论（当然对不对则需要从源码上分析了）</p>
<ul>
<li>sql参数替换，最终并不是简单使用字符串来替换，实际上是由参数java的参数类型决定，若java参数类型为字符串，拼接的sql为字符串格式；传参为整型，拼接的sql也是整数</li>
</ul>
<p>那么问题来了，为什么要了解这个？</p>
<ul>
<li>关键点在于索引失效的问题</li>
</ul>
<p>比如本文实例中的<code>name</code>上添加了索引，当我们的sql是 <code>select * from money where name = 120</code> 会走不了索引，如果想走索引，要求传入的参数必须是字符串，不能出现隐式的类型转换</p>
<p>基于此，我们就有一个应用场景了，为了避免由于传参类型问题，导致走不了索引，我们希望<code>name</code>的传参，不管实际传入参数类型是什么，最终拼接的sql，都是字符串的格式；</p>
<p>我们借助自定义的TypeHandler来实现这个场景</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在xml中，指定TypeHandler</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种写法输出的sql就会携带上单引号，这样就可以从源头上解决传参类型不对，导致最终走不了索引的问题</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5. 小结</h3>
<p>本文通过一个简单的实例，来测试Mapper接口中，不同的参数类型，对最终的sql生成的影响</p>
<ul>
<li>参数类型为整数时，最终的sql的参数替换也是整数（<code>#{}</code>并不是简单的字符串替换哦）</li>
<li>参数类型为字符串时，最终的sql参数替换，会自动携带<code>''</code> （<code>${}</code>注意它不会自动带上单引号，需要自己手动添加）</li>
</ul>
<p>当我们希望不管传参什么类型，最终生成的sql，都是字符串替换时，可以借助自定义的<code>TypeHandler</code>来实现，这样可以从源头上避免因为隐式类型转换导致走不了索引问题</p>
<p>最后疑问来了，上面的结论靠谱么？mybatis中最终的sql是在什么地方拼接的？这个sql拼接的流程是怎样的呢？</p>
<p>关于sql的拼接全流程，后续博文即将上线，我是一灰灰，走过路过的各位大佬帮忙点个赞、价格收藏、给个评价呗</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>系列博文：</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/27/210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之转义符的使用姿势</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/info/info.png" type="image/png"/>
    </item>
    <item>
      <title>18.ParameterMap、ParameterType传参类型指定使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/18.211106-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BParameterMap%E3%80%81ParameterType%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/18.211106-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BParameterMap%E3%80%81ParameterType%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">18.ParameterMap、ParameterType传参类型指定使用姿势</source>
      <description>在使用Mybatis开发时，借助xml来写具体的sql，再写传参类型或者返回结果类型时，通常会与ParameterType, ParameterMap, ResultMap, ResultType这四个打交到，那么这个Type与Map到底怎么区别，什么时候要指定类型，什么时候又可以不指定呢？</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Sat, 06 Nov 2021 21:03:43 GMT</pubDate>
      <content:encoded><![CDATA[<p>在使用Mybatis开发时，借助xml来写具体的sql，再写传参类型或者返回结果类型时，通常会与ParameterType, ParameterMap, ResultMap, ResultType这四个打交到，那么这个Type与Map到底怎么区别，什么时候要指定类型，什么时候又可以不指定呢？</p>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. Parameter/Result介绍</h2>
<h3> 1. ParameterMap &amp; ParameterType</h3>
<p>这两个主要用于指定传参类型，前面有一篇介绍过传参的姿势有兴趣的小伙伴可以查看一下<a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></p>
<p>mybatis中传参一般可以区分为两类</p>
<ul>
<li>基本数据类型：int、string、long、Date;</li>
<li>复杂数据类型：类（JavaBean、Integer等）和Map</li>
</ul>
<p>一般来说基本的参数类型，在xml中的sql编写不需要额外的指定<code>ParameterType</code>，当然也可以根据实际需要指定</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常有两种场景会经常看到<code>ParmeterType</code>，比如传参为Map</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若传参为Java bean时，可以如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li>上面的几个case中，也可以都不指定<code>parameterType</code></li>
</ul>
<p>上面说到的都是parameterType，那么什么时候会用到parameterMap呢？</p>
<p>当我们希望针对某些查询条件做一些TypeHandler时，除了在<code>#{}</code>中指定之外，借助parameterMap也是一个好的选择，如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下，这里主要是为了演示这个使用姿势，<code>StrTypeHandler</code>是一个自定义的类型抓换，不管传参什么类型，都转成String</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 最后验证一下我们的使用</h3>
<p>db中核心数据如下图</p>
<figure><img src="/imgs/211106/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>系列博文：</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/27/210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之转义符的使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/10/25/211025-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之传参类型如何确定</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如无书，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/211106/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>19.ResultMap、ResultType返回结果使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/19.220110-Mybatis%E4%B9%8BResultMap%E3%80%81ResultType%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/19.220110-Mybatis%E4%B9%8BResultMap%E3%80%81ResultType%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">19.ResultMap、ResultType返回结果使用姿势</source>
      <description>在使用mybatis进行数据库操作时，如果希望将返回结果映射为项目中定义的实体对象Entity时，ResultMap与ResultType就很重要了；它们两的主要区别在于ResultType指定指定实体对象，ResultMap则定义数据库字段与实体的映射关系 接下来通过简单的实例来看一下这两种的使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Mon, 10 Jan 2022 19:01:30 GMT</pubDate>
      <content:encoded><![CDATA[<p>在使用mybatis进行数据库操作时，如果希望将返回结果映射为项目中定义的实体对象Entity时，ResultMap与ResultType就很重要了；它们两的主要区别在于ResultType指定指定实体对象，ResultMap则定义数据库字段与实体的映射关系</p>
<p>接下来通过简单的实例来看一下这两种的使用姿势</p>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. ResultMap &amp; ResultType介绍</h2>
<h3> 1. 使用区别</h3>
<p>ResultMap:</p>
<ul>
<li>当数据库的字段与定义的实体对象不一致时（如下划线转驼峰，命名不一致等）通过<code>&lt;ResultMap&gt;</code>标签来定义映射关系，然后在sql查询标签中，通过<code>resultMap</code>来指定</li>
</ul>
<p>ResultType:</p>
<ul>
<li>db中的字段直接与实体对象进行映射时，选择ResultType，其value为实体类的全路径</li>
</ul>
<h3> 2. 实例演示</h3>
<p>注意上面的表结构，是以下划线的命名方式，接下来定义一个驼峰格式的实体类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上面这个case，很明显当我们使用查询时，返回结果就需要做一个映射，此时就可以使用<code>&lt;ResultMap&gt;</code>方式</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的select标签，通过resultMap来实现表字段与实体对象的转换关系（通过<code>&lt;resultMap&gt;</code>标签内的<code>&lt;result&gt;</code>来定义映射关系）</p>
<p>除了使用上面这种方式之外，也可以通过resultType来指定返回结果为Map，同样是可行的</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的mapper接口内容如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 测试验证</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的输出，返回结果是Map时，key和db中的字段名完全一致</p>
<p>其次也可以从Mapper接口的返回定义上可以看出，虽然最终返回的是列表，但是我们定义的resultMap, resultType，都是对应的单个实体的映射关系</p>
<p>如何理解上面这句话呢？</p>
<ul>
<li>如果上面的sql改成只获取id，那么返回结果应该是定义为longe而不是List</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的mapper接口如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. 小结</h3>
<p><strong>ResultMap</strong></p>
<ul>
<li>当希望实现sql返回的对象与项目中的实体类实现关联映射时，可以考虑通过resumtMap来实现</li>
</ul>
<p><strong>ResultType</strong></p>
<ul>
<li>指定返回实体类型，可以是基础对象(long, int...) 也可以是Map，当指定一个具体的POJO时，db的表字段与pojo的field全名匹配映射</li>
</ul>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>系列博文：</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/27/210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之转义符的使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/10/25/211025-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之传参类型如何确定</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/11/06/211106-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BParameterMap%E3%80%81ParameterType%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之ParameterMap、ParameterType传参类型指定使用姿势</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/info/info.png" type="image/png"/>
    </item>
    <item>
      <title>20.批量插入的几种姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/20.220111-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/20.220111-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">20.批量插入的几种姿势</source>
      <description>在日常的业务需求开发过程中，批量插入属于非常常见的case，在mybatis的写法中，一般有下面三种使用姿势 单个插入，业务代码中for循环调用 &amp;lt;foreach&amp;gt;标签来拼接批量插入sql 复用会话，拆分小批量插入方式</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Mybatis</category>
      <pubDate>Tue, 11 Jan 2022 18:46:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>在日常的业务需求开发过程中，批量插入属于非常常见的case，在mybatis的写法中，一般有下面三种使用姿势</p>
<ul>
<li>单个插入，业务代码中for循环调用</li>
<li><code>&lt;foreach&gt;</code>标签来拼接批量插入sql</li>
<li>复用会话，拆分小批量插入方式</li>
</ul>
<!-- more -->
<h2> I. 环境配置</h2>
<p>我们使用SpringBoot + Mybatis + MySql来搭建实例demo</p>
<ul>
<li>springboot: 2.2.0.RELEASE</li>
<li>mysql: 5.7.22</li>
</ul>
<h3> 1. 项目配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p>
<p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库表</h3>
<p>用于测试的数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 批量插入</h2>
<h3> 1. 单个插入，批量调用方式</h3>
<p>这种方式理解起来最简单，一个单独的插入接口，业务上循环调用即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的xml如下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结</strong></p>
<p>上面这种方式的优点就是简单直观，缺点就是db交互次数多，开销大</p>
<h3> 2. BATCH批处理模式</h3>
<p>针对上面做一个简单的优化，使用BATCH批处理模式，实现会话复用，避免每次请求都重新维护一个链接，导致额外开销，可以如下操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>
<ul>
<li>sqlSession.commit若放在for循环内，则每保存一个就提交，db中就可以查询到</li>
<li>若如上面放在for循环外，则所有的一起提交</li>
</ul>
<h3> 3. foreach实现sql拼接</h3>
<p>另外一种直观的想法就是组装批量插入sql，这里主要是借助foreach来处理</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的mapper接口如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际使用case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结</strong></p>
<p>使用sql批量插入的方式，优点是db交互次数少，在插入数量可控时，相比于前者开销更小</p>
<p>缺点也很明显，当一次插入的数量太多时，组装的sql既有可能直接超过了db的限制，无法执行了</p>
<h3> 4. 分批BATCH模式</h3>
<p>接下来的这种方式在上面的基础上进行处理，区别在于对List进行拆分，避免一次插入太多数据，其次就是真个操作复用一个会话，避免每一次的交互都重开一个会话，导致额外的开销</p>
<p>其使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与第二种使用姿势差不多，区别在于结合了第三种批量的优势，对大列表进行拆分，实现复用会话 + 批量插入</p>
<h3> 5. 如何选择</h3>
<p>上面介绍了几种不同的批量插入方式，那我们应该选择哪种呢？</p>
<p>就我个人的观点来讲，2，3，4这三个在一般的业务场景下并没有太大的区别，如果已知每次批量写入的数据不多（比如几十条），那么使用3就是最简单的case了</p>
<p>如果批量插入的数据非常多，那么方案4可能更加优雅</p>
<p>如果我们希望开发一个批量导数据的功能，那么方案2无疑是更好的选择</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml</a></li>
</ul>
<p>系列博文：</p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/15/210815-Mybatis%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BCURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/08/31/210831-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BMybatis%20CURD%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E6%B3%A8%E8%A7%A3%E7%AF%87/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis系列教程之CURD基本使用姿势-注解篇</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/24/210924-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之参数传递的几种姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/09/27/210927-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E8%BD%AC%E4%B9%89%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之转义符的使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/10/25/211025-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8B%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之传参类型如何确定</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2021/11/06/211106-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BParameterMap%E3%80%81ParameterType%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之ParameterMap、ParameterType传参类型指定使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2022/01/10/220110-Mybatis%E4%B9%8BResultMap%E3%80%81ResultType%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Mybatis之ResultMap、ResultType返回结果使用姿势</a></li>
</ul>
<h3> 1. 微信公众号: 一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
<figure><img src="https://spring.hhui.top/spring-blog/imgs/info/info.png" alt="一灰灰blog" tabindex="0" loading="lazy"><figcaption>一灰灰blog</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://spring.hhui.top/spring-blog/imgs/info/info.png" type="image/png"/>
    </item>
    <item>
      <title>Mybatis</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Mybatis/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Mybatis</source>
      <description>国内Java生态下ORM框架的杠把子，零基础教程，保姆级文档，适用于初中级开发的学习参考手册</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>国内Java生态下ORM框架的杠把子，零基础教程，保姆级文档，适用于初中级开发的学习参考手册</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.基本配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/01.181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/01.181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.基本配置</source>
      <description>在Spring的应用中，redis可以算是基础操作了。那么想要玩转redis，我们需要知道哪些知识点呢？ redis配置，默认，非默认，集群，多实例，连接池参数等 redis读写操作，RedisTemplate的基本使用姿势 几种序列化方式对比 本篇博文为redis系列的开篇，将介绍最基本的配置</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Mon, 29 Oct 2018 22:26:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>在Spring的应用中，redis可以算是基础操作了。那么想要玩转redis，我们需要知道哪些知识点呢？</p>
<ul>
<li>redis配置，默认，非默认，集群，多实例，连接池参数等</li>
<li>redis读写操作，RedisTemplate的基本使用姿势</li>
<li>几种序列化方式对比</li>
</ul>
<p>本篇博文为redis系列的开篇，将介绍最基本的配置</p>
<!-- more -->
<h2> I. redis基本配置</h2>
<h3> 1. 默认配置</h3>
<p>最简单的使用其实开箱即可用，添加依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本机启动redis，一切采用默认的配置 （host:127.0.0.1, port:6379, 无密码)</p>
<p>然后就可以愉快的玩耍了，可以直接注入<code>redisTemplate</code>实例，进行各种读写操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 自定义配置参数</h3>
<p>前面是默认的配置参数，在实际的使用中，一般都会修改这些默认的配置项，如果我的应用中，只有一个redis，那么完全可以只修改默认的配置参数</p>
<p>修改配置文件: <code>application.yml</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用和前面没有什么区别，直接通过注入<code>RedisTemplate</code>来操作即可，需要额外注意的是设置了连接池的相关参数，需要额外引入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 多redis配置</h3>
<p>依赖多个不同的redis，也就是说我的项目需要从多个redis实例中获取数据，这种时候，就不能直接使用默认的，需要我们自己来声明<code>ConnectionFactory</code>和 <code>RedisTemplate</code></p>
<p>配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类，采用Lettuce，基本设置如下，套路都差不多，先读取配置，初始化<code>ConnectionFactory</code>，然后创建<code>RedisTemplate</code>实例，设置连接工厂</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类如下，简单的演示下两个template的读写</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码执行演示如下</p>
<figure><img src="/imgs/181029/00.gif" alt="showcase" tabindex="0" loading="lazy"><figcaption>showcase</figcaption></figure>
<p>上面的演示为动图，抓一下重点：</p>
<ul>
<li>注意 <code>localRedisTemplate</code>, <code>defaultRedisTemplate</code> 两个对象不相同（看debug窗口后面的<code>@xxx</code>)</li>
<li>同样两个<code>RedisTemplate</code>的<code>ConnectionFactory</code>也是两个不同的实例（即分别对应前面配置类中的两个Factory)</li>
<li>执行后输出的结果正如我们预期的redis操作
<ul>
<li>塞值，马上取出没问题</li>
<li>失效后，再查询，返回null</li>
</ul>
</li>
<li>最后输出异常日志，提示如下</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面表示说有多个ConnectionFactory存在，然后创建默认的RedisTemplate就不知道该选择哪一个了，有两种方法</p>
<p><strong>方法一：指定默认的ConnectionFactory</strong></p>
<p>借助<code>@Primary</code>来指定默认的连接工厂，然后在使用工程的时候，通过<code>@Qualifier</code>注解来显示指定，我需要的工厂是哪个（主要是<code>localRedisTemplate</code>这个bean的定义，如果不加，则会根据<code>defaultLettuceConnectionFactory</code>这个实例来创建Redis连接了）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二：忽略默认的自动配置类</strong></p>
<p>既然提示的是<code>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</code>类加载bean冲突，那么就不加载这个配置即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/120-redis-config" target="_blank" rel="noopener noreferrer">120-redis-config</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181029/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>2.Jedis配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/02.181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/02.181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.Jedis配置</source>
      <description>SpringBoot2之后，默认采用Lettuce作为redis的连接客户端，当然我们还是可以强制捡回来，使用我们熟悉的Jedis的，本篇简单介绍下使用Jedis的相关配置</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Thu, 01 Nov 2018 19:54:07 GMT</pubDate>
      <content:encoded><![CDATA[<p>SpringBoot2之后，默认采用Lettuce作为redis的连接客户端，当然我们还是可以强制捡回来，使用我们熟悉的Jedis的，本篇简单介绍下使用Jedis的相关配置</p>
<!-- more -->
<h2> I. 基本配置</h2>
<h3> 1. 依赖</h3>
<p>使用Jedis与Lettuce不同的是，需要额外的引入Jedis包的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置</h3>
<p>redis的相关配置，和前面的差不多，只是线程池的参数稍稍有点区别</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. AutoConfig</h3>
<p>与前面不同的是，我们需要定义一个<code>RedisConnectionFactory</code>的bean作为默认的连接工厂，以此来确定底层的连接采用的是Jedis客户端</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 测试</h3>
<p>测试主要就是查看下RedisTemplate的连接工厂类，到底是啥，简单的是截图如下</p>
<figure><img src="/imgs/181101/00.jpg" alt="testshow" tabindex="0" loading="lazy"><figcaption>testshow</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/121-redis-jedis-config" target="_blank" rel="noopener noreferrer">121-redis-jedis-config</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181101/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.String数据结构的读写</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/03.181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/03.181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.String数据结构的读写</source>
      <description>Redis目前常用的存储结构有五种，String字符串，List列表，Set集合，Hash散列，ZSet有序集合；本篇则主要集中在String这个数据结构的读写操作之上 对于String的操作，除了常见的get/set之外，还有一些比较有特色的功能，如用于实现redis分布式锁的setnx/getset方法；用于实现计数的incr/decr方法；位图算法的经典实用场景之bitmap的使用方法等也有必要了解一下</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Thu, 08 Nov 2018 19:53:55 GMT</pubDate>
      <content:encoded><![CDATA[<p>Redis目前常用的存储结构有五种，String字符串，List列表，Set集合，Hash散列，ZSet有序集合；本篇则主要集中在String这个数据结构的读写操作之上</p>
<p>对于String的操作，除了常见的get/set之外，还有一些比较有特色的功能，如用于实现redis分布式锁的setnx/getset方法；用于实现计数的incr/decr方法；位图算法的经典实用场景之bitmap的使用方法等也有必要了解一下</p>
<!-- more -->
<h2> I. 使用方法</h2>
<h3> 1. 基本配置</h3>
<p>在项目中首先需要添加基本的依赖，然后我们使用默认的Redis配置进行操作，即本机启动redis服务，端口号为6379，密码没有</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. Get/Set方法</h3>
<p>直接使用默认的RedisTemplate进行redis的读写操作，因为我们没有指定序列化方式，所以本篇使用中，并没有使用更简单的opsForValue进行操作，具体原因可以参考博文</p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2018/06/11/180611-Spring%E4%B9%8BRedisTemplate%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">Spring之RedisTemplate配置与使用</a></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面演示了基本的get/set方法的使用，以及批量的读取和写入缓存值；也给出了getSet方法，基本上就是redis命令的一层浅封装；</p>
<p>对于getset方法，表示的是用新的值覆盖旧的值，并返回旧的值，如果旧的不存在，则返回null</p>
<h3> 3. 计数</h3>
<p>统计计数，也算是一个比较常见的case了，虽然对于redis而言，存储的都是String，但是从我们的逻辑上来看，存在redis中的值，应该是数字型，然后就可以直接传入一个增量，实现存储数据的运算效果，并返回最终的结果</p>
<p>因为redis是单进程方式的，因此采用redis的计数方式，可以较简单的实现分布式的计数效果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. bitmap操作</h3>
<p>位图操作，什么地方用得比较多呢？一个经典的case就是统计网站的日活，用户首次登陆时，根据用户id，设置位图中下标为userId的值为1，表示这个用户激活了；然后一天结束之后，只需要统计这个位图中为1的个数就可以知道每日的日活；也可以借此来统计每个用户的活跃状况</p>
<p>下面给出几个常用的位图方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的setBit和getBit就比较简单了，设置或获取位图中某个小标的值；bitCount主要就是统计为1的个数；下面主要说一下最后一个方法bitOp</p>
<p>BITOP 命令支持 AND 、 OR 、 NOT 、 XOR 这四种操作中的任意一种参数：</p>
<ul>
<li>BITOP AND destkey srckey1 … srckeyN ，对一个或多个 key 求逻辑与，并将结果保存到 destkey</li>
<li>BITOP OR destkey srckey1 … srckeyN，对一个或多个 key 求逻辑或，并将结果保存到 destkey</li>
<li>BITOP XOR destkey srckey1 … srckeyN，对一个或多个 key 求逻辑异或，并将结果保存到 destkey</li>
<li>BITOP NOT destkey srckey，对给定 key 求逻辑非，并将结果保存到 destkey</li>
</ul>
<p><strong>除了 NOT 操作之外，其他操作都可以接受一个或多个 key 作为输入，执行结果将始终保持到destkey里面。</strong></p>
<h3> 5. 其他</h3>
<p>上面的几个操作都是持久化的写入到redis，如果希望写入待失效时间的，可以使用setex，在写入值的同时加上失效时间；也可以调用额外的设置key的失效时间的方式；使用姿势比较简单，不单独列出</p>
<p>至于另外一个setnx的使用，则将放在后面的应用篇中，实现一个redis的分布式锁的时候，一并加以说明；而bitmap的更多使用，在也会放在后面的借助bitmap实现某个特殊业务场景的应用篇中详细说明</p>
<h2> II. 简单测试</h2>
<p>简单演示下基本的使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示结果如下</p>
<figure><img src="/imgs/181108/00.gif" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181108/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>4.List数据结构使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/04.181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/04.181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.List数据结构使用姿势</source>
      <description>前面一篇博文介绍redis五种数据结构中String的使用姿势，这一篇则将介绍另外一个用的比较多的List，对于列表而言，用的最多的场景可以说是当做队列或者堆栈来使用了</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Fri, 09 Nov 2018 18:16:45 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文介绍redis五种数据结构中String的使用姿势，这一篇则将介绍另外一个用的比较多的List，对于列表而言，用的最多的场景可以说是当做队列或者堆栈来使用了</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 序列化指定</h3>
<p>前面一篇的操作都是直接使用的<code>execute</code>配合回调方法来说明的，其实还有一种更加方便的方式，即 <code>opsForValue</code>, <code>opsForList</code>，本文则以这种方式演示list数据结构的操作</p>
<p>所以在正式开始之前，有必要指定一下key和value的序列化方式，当不现实指定时，采用默认的序列化（即jdk的对象序列化方式），直接导致的就是通过redis-cli获取存储数据时，会发现和你预期的不一样</p>
<p>首先实现序列化类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次定义RedisTemplate的序列化方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 添加元素</h3>
<p>对于list而言，添加元素常见的有两种，从左边加和从右边加，以lpush为例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 获取元素</h3>
<p>既然是list，就是有序的，因此完全是可以向jdk的list容器一样，获取指定索引的值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与jdk中的List获取某个索引value不同的是，这里的index可以为负数，-1表示最右边的一个，-2则表示最右边的第二个，依次</p>
<h3> 4. 范围查询</h3>
<p>这个查询就类似JDK容器中的<code>List#subList</code>了，查询指定范围的列表</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 列表长度</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 修改</h3>
<p>更新List中某个下标的value，也属于比较常见的case了，</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 删除</h3>
<p>在接口中没有看到删除指定小标的元素，倒是看到可以根据value进行删除，以及控制列表长度的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人感觉在实际的使用中remove这个方法用得不太多；但是trim方法则比较有用了，特别是在控制list的长度，避免出现非常大的列表时，很有效果，传入的start/end参数，采用的是闭区间的原则</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>5.Hash数据结构使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/05.181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/05.181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.Hash数据结构使用姿势</source>
      <description>Redis的五大数据结构，前面讲述了String和List的使用姿势，而Hash数据结构，也是比较常用的，接下来看下hash数据结构的读取，删除，塞入的基本使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Sun, 02 Dec 2018 22:09:37 GMT</pubDate>
      <content:encoded><![CDATA[<p>Redis的五大数据结构，前面讲述了String和List的使用姿势，而Hash数据结构，也是比较常用的，接下来看下hash数据结构的读取，删除，塞入的基本使用姿势</p>
<!-- more -->
<h2> I. 基本使用</h2>
<p>在开始之前，序列化的指定需要额外处理，上一篇已经提及，相关内容可以参考：</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/#1-%E5%BA%8F%E5%88%97%E5%8C%96%E6%8C%87%E5%AE%9A" target="_blank" rel="noopener noreferrer">181109-SpringBoot高级篇Redis之List数据结构使用姿势</a></li>
</ul>
<h3> 1. 查询元素</h3>
<p>hash数据结构和我们理解jdk中的hash差不多，使用的姿势也没什么区别，需要注意的是需要，定位一个元素，需要由缓存的key + hash的key-<code>field</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 添加元素</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 删除</h3>
<p>hash最好的一个地方，我个人感觉就是在删除时特别方便，比如将同类的数据聚集在一个hash中，删除key就可以实现全部都删除，清理数据就比较方便了；除此之外，另外一种就是删除hash中的部分key</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 批量查询</h3>
<p>批量查询有两种，一个是全部捞出来，一个是捞出指定key的相关数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 自增</h3>
<p>hash的value如果是数字，提供了一个自增的方式，和String中的incr/decr差不多的效果</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. hash + list</h3>
<p>hash的value如果另外一种场景就是数组，目前没有找到特别友好的操作方式，只能在业务层进行兼容</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>6.Set数据结构使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/06.181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/06.181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.Set数据结构使用姿势</source>
      <description>Redis的五大数据结构，前面讲述了String和List,Hash的使用姿势，接下来就是Set集合，与list最大的区别就是里面不允许存在重复的数据</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Tue, 11 Dec 2018 20:04:48 GMT</pubDate>
      <content:encoded><![CDATA[<p>Redis的五大数据结构，前面讲述了String和List,Hash的使用姿势，接下来就是Set集合，与list最大的区别就是里面不允许存在重复的数据</p>
<!-- more -->
<h2> I. 基本使用</h2>
<p>在开始之前，序列化的指定需要额外处理，上一篇已经提及，相关内容可以参考：</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/#1-%E5%BA%8F%E5%88%97%E5%8C%96%E6%8C%87%E5%AE%9A" target="_blank" rel="noopener noreferrer">181109-SpringBoot高级篇Redis之List数据结构使用姿势</a></li>
</ul>
<h3> 1. 新增元素</h3>
<p>新增元素时，可以根据返回值来判断是否添加成功, 如下面的单个插入时，如果集合中之前就已经有数据了，那么返回0，否则返回1</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 删除元素</h3>
<p>因为list是有序的，所以在list的删除需要指定位置；而set则不需要</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 判断是否存在</h3>
<p>set一个最大的应用场景就是判断某个元素是否有了，从而决定怎么执行后续的操作, 用的是 <code>isMember</code>方法，来判断集合中是否存在某个value</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 获取所有的value</h3>
<p>set无序，因此像list一样获取某个范围的数据，不太容易，更常见的方式就是全部获取出来</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 集合运算</h3>
<p>set还提供了另外几个高级一点的功能，就是集合的运算，如求并集，交集等操作，虽然在我有限的业务应用中，并没有使用到这些高级功能，下面依然个给出使用的姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>7.ZSet数据结构使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/07.181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/07.181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.ZSet数据结构使用姿势</source>
      <description>Redis的五大数据结构，目前就剩下最后的ZSET，可以简单的理解为带权重的集合；与前面的set最大的区别，就是每个元素可以设置一个score，从而可以实现各种排行榜的功能</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Wed, 12 Dec 2018 20:04:48 GMT</pubDate>
      <content:encoded><![CDATA[<p>Redis的五大数据结构，目前就剩下最后的ZSET，可以简单的理解为带权重的集合；与前面的set最大的区别，就是每个元素可以设置一个score，从而可以实现各种排行榜的功能</p>
<!-- more -->
<h2> I. 基本使用</h2>
<p>在开始之前，序列化的指定需要额外处理，前面List这一篇已经提及，相关内容可以参考：</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/#1-%E5%BA%8F%E5%88%97%E5%8C%96%E6%8C%87%E5%AE%9A" target="_blank" rel="noopener noreferrer">181109-SpringBoot高级篇Redis之List数据结构使用姿势</a></li>
</ul>
<h3> 1. 新增元素</h3>
<p>新增元素时，用起来和set差不多，无非是多一个score的参数指定而已</p>
<p>如果元素存在，会用新的score来替换原来的，返回0；如果元素不存在，则会会新增一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 删除元素</h3>
<p>删除就和普通的set没啥区别了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 修改score</h3>
<p>zset中的元素塞入之后，可以修改其score的值，通过 <code>zincrby</code> 来对score进行加/减；当元素不存在时，则会新插入一个</p>
<p>从上面的描述来看，<code>zincrby</code> 与 <code>zadd</code> 最大的区别是前者是增量修改；后者是覆盖score方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 获取value对应的score</h3>
<p>这个需要注意的是，当value在集合中时，返回其score；如果不在，则返回null</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 获取value在集合中排名</h3>
<p>前面是获取value对应的score；这里则是获取排名；这里score越小排名越高;</p>
<p>从这个使用也可以看出结合4、5, 用zset来做排行榜可以很简单的获取某个用户在所有人中的排名与积分</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 集合大小</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 获取集合中数据</h3>
<p>因为是有序，所以就可以获取指定范围的数据，下面有两种方式</p>
<ul>
<li>根据排序位置获取数据</li>
<li>根据score区间获取排序位置</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>10.Redis集群环境配置</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/10.190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/10.190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">10.Redis集群环境配置</source>
      <description>之前介绍的几篇redis的博文都是基于单机的redis基础上进行演示说明的，然而在实际的生产环境中，使用redis集群的可能性应该是大于单机版的redis的，那么集群的redis如何操作呢？它的配置和单机的有什么区别，又有什么需要注意的呢？ 本篇将主要介绍SpringBoot项目整合redis集群，并针对这个过程中出现的问题进行说明，并给出相应的解决方案</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Fri, 27 Sep 2019 19:32:56 GMT</pubDate>
      <content:encoded><![CDATA[<p>之前介绍的几篇redis的博文都是基于单机的redis基础上进行演示说明的，然而在实际的生产环境中，使用redis集群的可能性应该是大于单机版的redis的，那么集群的redis如何操作呢？它的配置和单机的有什么区别，又有什么需要注意的呢？</p>
<p>本篇将主要介绍SpringBoot项目整合redis集群，并针对这个过程中出现的问题进行说明，并给出相应的解决方案</p>
<!-- more -->
<h2> I. 环境相关</h2>
<p>首先需要安装redis集群环境，可以参考博文：<a href="https://blog.hhui.top/hexblog/2019/09/25/190925-Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener noreferrer">redis-集群搭建手册</a></p>
<p>然后初始化springboot项目，对应的pom结构如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，我们引入了两个包，一个是必要的 <code>spring-boot-starter-data-redis</code>，官方封装的一个操作redis的start工具，借助它我们可以很方便的直接使用RedisTemplate来操作redis</p>
<p>另外一个是<code>commonos-pool2</code>这个包，主要是当我们配置了redis的连接池的时候，需要用到它，否则会抛一个Class Not Found 的异常</p>
<h2> II. 环境整合及采坑</h2>
<p>这里我将redis集群搭建在局域网内的一台centos机器上，从后面的配置文件也可以看出（为什么这么处理？主要是为了引出后面一个问题）</p>
<h3> 1. application.yml</h3>
<p>首我们先按照默认的配置方式，来获取我们的 <code>RedisTemplate</code>， 以实现最快的接入redis集群</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们搭建的redis集群，没有做主备（否则需要6个实例），为了省事，也没有设置密码（生产环境下，这是严格禁止的）</p>
<h3> 2. 使用测试</h3>
<p>因为我们采用默认的配置，因此可以直接获取RedisTemplate的bean对象，来操作redis集群</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 拒绝连接</h4>
<p>上面执行之后，报的第一个错误是连接拒绝，而我在redis集群所在的机器(203)上是可以连接成功的，但是本机连接报错</p>
<figure><img src="/imgs/190927/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>出现上面的问题，一般有两个原因，一个是防火墙导致端口不能外部访问，一个是redis的配置</p>
<p><strong>防火墙的确认方式</strong></p>
<ul>
<li>判断防火墙是否开启: <code>firewall-cmd --state</code> 如果提示not running 表示未开启</li>
<li>查看防火墙规则: <code>firewall-cmd --list-all</code></li>
</ul>
<p>然后可以根据实际场景，添加端口</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然在内网的测试环境下，可以直接关闭防火墙</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>redis配置</strong></p>
<p>如果确认不是防火墙问题，那么多半是redis的配置需要修改一下了，在<code>redis.conf</code>中，有一行<code>bind 127.0.0.1</code>配置默认开启，表示只允许本机访问，其他机器无权访问</p>
<p>解决办法就是修改一下这个配置，并重启</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. Unable to connect to 127.0.0.1:7001</h4>
<p>执行前面的测试用例时，发现会抛一个奇怪的异常如下</p>
<figure><img src="/imgs/190927/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>关键堆栈信息如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过断点可以看到，集群中的节点ip/端口是准确的，但是异常提示出来个无法连接<code>127.0.0.1:7001</code>，出现这个问题的原因，主要是我们在创建redis集群的时候，设置集群节点使用如下面的命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上面这种方式创建的redis集群，并没有什么问题，但是在springbot的整合中，通过redis集群获取到的节点信息就是<code>127.0.0.1:7000</code>... 然后导致上面的问题，因此一个解决办法是在创建集群的时候，指定下ip</p>
<p>首先数据和配置，然后重新建立集群关系</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次测试ok</p>
<figure><img src="/imgs/190927/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. jedis配置</h3>
<p>前面的配置默认会使用letttuce作为redis的桥接工具，如果我们底层想使用jedis，可以怎么操作?</p>
<p>首先在pom依赖中添加jedis依赖</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yml文件中的配置基本上不改都ok，在实际的项目中，对连接池稍微改了一下，不影响阅读，这里不贴出</p>
<p>接下来是定义<code>RedisConnectionFactoy</code>来替换默认的</p>
<blockquote>
<p>下面的配置和以前的一篇博文 <a href="http://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">181101-SpringBoot高级篇Redis之Jedis配置</a> 基本差不多，需要注意的是我们使用<code>RedisClusterConfiguration</code>替换了<code>RedisStandaloneConfiguration</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后其他的依旧，此时RedisTemplate的底层连接就变成了Jedis</p>
<figure><img src="/imgs/190927/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 项目&amp;相关博文</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>moduel : <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/124-redis-cluster" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/124-redis-cluster</a></li>
</ul>
<p><strong>关联博文</strong></p>
<ul>
<li><a href="https://blog.hhui.top/hexblog/2019/09/25/190925-Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener noreferrer">Redis集群搭建手册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">Redis&amp;SpringBoot基本配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">Jedis&amp;SpringBoot基本配置</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190927/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>11.管道Pipelined使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/11.200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/11.200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">11.管道Pipelined使用姿势</source>
      <description>redis管道技术，可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应，这种技术可以很方便的支持我们的批量请求，下面简单介绍下如何使用RedisTemplate来使用管道</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Sat, 11 Apr 2020 16:55:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>redis管道技术，可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应，这种技术可以很方便的支持我们的批量请求，下面简单介绍下如何使用<code>RedisTemplate</code>来使用管道</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 配置</h3>
<p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用姿势</h3>
<p>这里我们主要借助<code>org.springframework.data.redis.core.RedisTemplate#executePipelined(org.springframework.data.redis.core.RedisCallback&lt;?&gt;)</code>，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的使用中，有几个注意事项</p>
<ul>
<li><code>redisConnection.openPipeline();</code> 开启管道</li>
<li>返回结果为列表，内部第一个redis操作，对应的返回结果塞在列表的下标0；依次...</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>12.高级特性Bitmap使用姿势及应用场景介绍</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/12.201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/12.201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">12.高级特性Bitmap使用姿势及应用场景介绍</source>
      <description>前面介绍过redis的五种基本数据结构，如String，List, Set, ZSet, Hash，这些属于相对常见了；在这些基本结果之上，redis还提供了一些更高级的功能，如geo, bitmap, hyperloglog，pub/sub，本文将主要介绍Bitmap的使用姿势以及其适用场景，主要知识点包括 bitmap 基本使用 日活统计应用场景中bitmap使用姿势 点赞去重应用场景中bitmap使用姿势 布隆过滤器bloomfilter基本原理及体验case</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Wed, 14 Oct 2020 09:06:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍过redis的五种基本数据结构，如String，List, Set, ZSet, Hash，这些属于相对常见了；在这些基本结果之上，redis还提供了一些更高级的功能，如geo, bitmap, hyperloglog，pub/sub，本文将主要介绍Bitmap的使用姿势以及其适用场景，主要知识点包括</p>
<ul>
<li>bitmap 基本使用</li>
<li>日活统计应用场景中bitmap使用姿势</li>
<li>点赞去重应用场景中bitmap使用姿势</li>
<li>布隆过滤器bloomfilter基本原理及体验case</li>
</ul>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 配置</h3>
<p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用姿势</h3>
<p>bitmap主要就三个操作命令，<code>setbit</code>，<code>getbit</code>以及 <code>bitcount</code></p>
<h4> a. 设置标记</h4>
<p>即<code>setbit</code>，主要是指将某个索引，设置为1(设置0表示抹去标记)，基本语法如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的SpringBoot中，借助RestTemplate可以比较容易的实现，通常有两种写法，都可以</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两种写法的核心区别，就是key的序列化问题，第一种写法使用默认的jdk字符串序列化，和后面的<code>getBytes()</code>会有一些区别，关于这个，有兴趣的小伙伴可以看一下我之前的博文: <a href="https://blog.hhui.top/hexblog/2018/06/11/180611-Spring%E4%B9%8BRedisTemplate%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">RedisTemplate配置与使用#序列化问题</a></p>
<h4> b. 判断存在与否</h4>
<p>即 <code>getbit key index</code>，如果返回1，表示存在否则不存在</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 计数</h4>
<p>即 <code>bitcount key</code>，统计和</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 应用场景</h3>
<p>前面的基本使用比较简单，在介绍String数据结构的时候也提过，我们重点需要关注的是bitmap的使用场景，它可以干嘛用，什么场景下使用它会有显著的优势</p>
<ul>
<li>日活统计</li>
<li>点赞</li>
<li>bloomfilter</li>
</ul>
<p>上面三个场景虽有相似之处，但实际的应用场景还是些许区别，接下来我们逐一进行说明</p>
<h4> a. 日活统计</h4>
<p>统计应用或网站的日活，这个属于比较常见的case了，如果是用redis来做这个事情，首先我们最容易想到的是Hash结构，一般逻辑如下</p>
<ul>
<li>根据日期，设置key，如今天为 <code>2020/10/13</code>, 那么key可以为 <code>app_20_10_13</code></li>
<li>其次当用户访问时，设置field为userId, value设置为true</li>
<li>判断日活则是统计map的个数<code>hlen app_20_10_13</code></li>
</ul>
<p>上面这个逻辑有毛病么？当然没有问题，但是想一想，当我们的应用做的很nb的时候，每天的日活都是百万，千万级时，这个内存开销就有点吓人了</p>
<p>接下来我们看一下bitmap可以怎么做</p>
<ul>
<li>同样根据日期设置key</li>
<li>当用户访问时，index设置为userId，<code>setbit app_20_10_13 uesrId 1</code></li>
<li>日活统计 <code>bitcount app_20_10_13</code></li>
</ul>
<p><strong>简单对比一下上面两种方案</strong></p>
<p>当数据量小时，且userid分布不均匀，小的为个位数，大的几千万，上亿这种，使用bitmap就有点亏了，因为userId作为index，那么bitmap的长度就需要能容纳最大的userId，但是实际日活又很小，说明bitmap中间有大量的空白数据</p>
<p>反之当数据量很大时，比如百万/千万，userId是连续递增的场景下，bitmap的优势有两点：1.存储开销小， 2.统计总数快</p>
<h4> c. 点赞</h4>
<p>点赞的业务，最主要的一点是一个用户点赞过之后，就不能继续点赞了（当然某些业务场景除外），所以我们需要知道是否可以继续点赞</p>
<p>上面这个hash当然也可以实现，我们这里则主要讨论一下bitmap的实现逻辑</p>
<ul>
<li>比如我们希望对一个文章进行点赞统计，那么我们根据文章articleId来生成redisKey=<code>like_1121</code>，将userId作为index</li>
<li>首先是通过<code>getbit like_1121 userId</code> 来判断是否点赞过，从而限制用户是否可以操作</li>
</ul>
<p>Hash以及bitmap的选择和上面的考量范围差不多</p>
<h4> d. 布隆过滤器bloomfilter</h4>
<p>布隆过滤器可谓是大名鼎鼎了，我们这里简单的介绍一下这东西是啥玩意</p>
<ul>
<li>底层存储为一个bitmap</li>
<li>当来一个数据时，经过n个hash函数，得到n个数值</li>
<li>将hash得到的n个数值，映射到bitmap，标记对应的位置为1</li>
</ul>
<p>如果来一个数据，通过hash计算之后，若这个n个值，对应的bitmap都是1，那么表示这个数据可能存在；如果有一个不为1，则表示这个数据一定不存在</p>
<p><strong>请注意：不存在时，是一定不存在；存在时，则不一定</strong></p>
<p>从上面的描述也知道，bloomfilter的底层数据结构就是bitmap，当然它的关键点在hash算法；根据它未命中时一定不存在的特性，非常适用于缓存击穿的问题解决</p>
<p><strong>体验说明</strong></p>
<p>Redis的布隆过滤器主要针对&gt;=4.0，通过插件的形式提供，项目源码地址为: <a href="https://github.com/RedisBloom/RedisBloom" target="_blank" rel="noopener noreferrer">https://github.com/RedisBloom/RedisBloom</a>，下面根据readme的说明，简单的体验一下redis中bloomfilter的使用姿势</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bloomfilter的使用比较简单，主要是两个命令<code>bf.add</code>添加元素，<code>bf.exists</code>判断是否存在，请注意它没有删除哦</p>
<h3> 4. 小结</h3>
<p>bitmap位图属于一个比较精巧的数据结构，通常在数据量大的场景下，会有出现的表现效果；redis本身基于String数据结构来实现bitmap的功能支持，使用方式比较简单，基本上就下面三个命令</p>
<ul>
<li><code>setbit key index 1/0</code>: 设置</li>
<li><code>getbit key index</code>: 判断是否存在</li>
<li><code>bitcount key</code>: 计数统计</li>
</ul>
<p>本文也给出了bitmap的三个常见的应用场景</p>
<ul>
<li>日活统计：主要借助<code>bitcount</code>来获取总数（后面会介绍，在日活十万百万以上时，使用hyperLogLog更优雅）</li>
<li>点赞: 主要借助<code>setbit/getbit</code>来判断用户是否赞过，从而实现去重</li>
<li>bloomfilter: 基于bitmap实现的布隆过滤器，广泛用于去重的业务场景中（如缓存穿透，爬虫url去重等）</li>
</ul>
<p>总的来讲，bitmap属于易用，巧用的数据结构，用得好即能节省内存也可以提高效率，用得不好貌似也不会带来太大的问题</p>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
</ul>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>13.高级特性发布订阅</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/13.201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/13.201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">13.高级特性发布订阅</source>
      <description>通常来讲，当我们业务存在消息的业务逻辑时更多的是直接使用成熟的rabbitmq,rocketmq，但是一些简单的业务场景中，真的有必要额外的引入一个mq么？本文将介绍一下redis的发布订阅方式，来实现简易的消息系统逻辑</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Sat, 17 Oct 2020 20:36:38 GMT</pubDate>
      <content:encoded><![CDATA[<p>通常来讲，当我们业务存在消息的业务逻辑时更多的是直接使用成熟的rabbitmq,rocketmq，但是一些简单的业务场景中，真的有必要额外的引入一个mq么？本文将介绍一下redis的发布订阅方式，来实现简易的消息系统逻辑</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 配置</h3>
<p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用姿势</h3>
<p>redis的发布/订阅，主要就是利用两个命令<code>publish/subscribe</code>; 在SpringBoot中使用发布订阅模式比较简单，借助RedisTemplate可以很方便的实现</p>
<h4> a. 消息发布</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 订阅消息</h4>
<p>消息订阅这里，需要注意我们借助<code>org.springframework.data.redis.connection.MessageListener</code>来实现消费逻辑</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 测试case</h4>
<p>写一个简单的测试case，来验证一下上面的发布订阅，顺带理解一下这个<code>MessageListener</code>的使用姿势；我们创建一个简单的WEB工程，提供两个rest接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过一个动图来演示一下case</p>
<figure><img src="/imgs/201017/00.gif" alt="a.gif" tabindex="0" loading="lazy"><figcaption>a.gif</figcaption></figure>
<p>我们先创建了两个消费者，然后发送消息时，两个都收到；再新增一个消费者，发送消息时，三个都能收到</p>
<h3> 3. 使用说明与应用场景</h3>
<p>redis的发布订阅，只适用于比较简单的场景，从上面的使用说明也能看出，它就是一个简单的发布订阅模型，支持1对N，而且发送的消息，只有在线的消费者才能get到（至于不在线的，那就只能说遗憾了）而且对于redis而言，消息推出去之后就完事了，至于消费者能不能正常消费，那就不care了</p>
<p>划重点：</p>
<ul>
<li>只有在线的消费者能接收到消息</li>
<li>对于消费者一个消息只能拿到一次</li>
</ul>
<p>接下来的问题就来了，什么样的场景下可以使用redis的发布订阅呢？</p>
<p><strong>基于内存的缓存失效</strong></p>
<p>利用reids + 内存做二级缓存，可以说是比较常见的方式了，借助基于内存的缓存，可以有效的提高系统的负载，但是问题也很明显，内存中缓存数据失效是个问题，特别是当一个应用部署多台服务器时，如果我希望同时失效所有服务器的某个内存缓存，使用redis的发布/订阅就是一个比较好的选择</p>
<p><strong>SpringCloud Config配置刷新</strong></p>
<p>使用SpringCloud Config做配置中心的小伙伴可能会经常遇到这个问题，配置修改之后的动态刷新是个问题（当然官方是支持通过mq走bus总线来同步，也可以通过spring boot admin来强刷）</p>
<p>借助redis发布/订阅，实现配置动态刷新也是一个不错的备选方案（后面给出一个具体的实现demo，如有兴趣请持续关注一灰灰Blog）</p>
<p><strong>redis key失效订阅</strong></p>
<p>我们在使用redis做缓存时，通常会设置一个过期时间，redis提供了一个过期的事件，当然默认是不开启的；我们也是可以通过subscribe来订阅缓存失效的事件</p>
<p>修改配置，开启key失效事件</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启redis之后，订阅失效事件即可</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
</ul>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201017/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>14.高级特性HyperLoglog</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/14.201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/14.201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">14.高级特性HyperLoglog</source>
      <description>hyperloglog算法，利用非常少的空间，实现比较大的数据量级统计；比如我们前面在介绍bitmap的过程中，说到了日活的统计，当数据量达到百万时，最佳的存储方式是hyperloglog，本文将介绍一下hyperloglog的基本原理，以及redis中的使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Wed, 21 Oct 2020 09:03:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>hyperloglog算法，利用非常少的空间，实现比较大的数据量级统计；比如我们前面在介绍bitmap的过程中，说到了日活的统计，当数据量达到百万时，最佳的存储方式是hyperloglog，本文将介绍一下hyperloglog的基本原理，以及redis中的使用姿势</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 配置</h3>
<p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用姿势</h3>
<blockquote>
<p>我们下来看使用姿势，原理放在后面说明</p>
</blockquote>
<p>redis中，<code>hyperlolog</code>使用非常简单，一般就两个操作命令，添加<code>pfadd</code> + 计数<code>pfcount</code>；另外还有一个不常用的<code>merge</code></p>
<h4> a. add</h4>
<p>添加一条记录</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. pfcount</h4>
<p>非精准的计数统计</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. merge</h4>
<p>将多个hyperloglog合并成一个新的hyperloglog；感觉用的场景并不会特别多</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 原理说明</h3>
<p>关于HyperLogLog的原理我这里也不进行详细赘述，说实话那一套算法以及调和平均公式我自己也没太整明白；下面大致说一下我个人的朴素理解</p>
<p>Redis中的HyperLogLog一共分了<code>2^14=16384</code>个桶，每个桶占6个bit</p>
<p>一个数据，塞入HyperLogLog之前，先hash一下，得到一个64位的二进制数据</p>
<ul>
<li>取低14位，用来定位桶的index</li>
<li>高50位，从低到高数，找到第一个为1出现的位置n
<ul>
<li>若桶中值 &gt; n，则丢掉</li>
<li>反之，则设置桶中的值为n</li>
</ul>
</li>
</ul>
<p>那么怎么进行计数统计呢？</p>
<ul>
<li>拿所有桶中的值，代入下面的公式进行计算</li>
</ul>
<figure><img src="/imgs/201021/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面这个公式怎么得出的?</p>
<p>之前看到一篇文章，感觉不错，有兴趣了解原理的，可以移步: <a href="https://www.jianshu.com/p/55defda6dcd2" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/55defda6dcd2</a></p>
<h3> 4. 应用场景</h3>
<p><code>hyperloglog</code>通常是用来非精确的计数统计，前面介绍了日活统计的case，当时使用的是bitmap来作为数据统计，然而当userId分散不均匀，小的特别小，大的特别大的时候，并不适用</p>
<p>在数据量级很大的情况下，<code>hyperloglog</code>的优势非常大，它所占用的存储空间是固定的<code>2^14</code>
下图引用博文<a href="https://mp.weixin.qq.com/s/AvPoG8ZZM8v9lKLyuSYnHQ" target="_blank" rel="noopener noreferrer">《用户日活月活怎么统计》</a></p>
<figure><img src="/imgs/201021/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>使用HyperLogLog进行日活统计的设计思路比较简单</p>
<ul>
<li>每日生成一个key</li>
<li>某个用户访问之后，执行 <code>pfadd key userId</code></li>
<li>统计总数: <code>pfcount key</code></li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之发布订阅</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
</ul>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201021/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>15.高级特性之GEO</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/15.201027-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BGEO.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/15.201027-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BGEO.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">15.高级特性之GEO</source>
      <description>GEO用于存储地理信息，最直观的就是我们日常使用的地图app中，如果我想查询我所在地的周边餐饮，就可以利用geo中的以(x,y)为圆心，以n为半径，扫描坐标在这个圈内的所有餐饮店，这个case借助redis的geo可以很方便的实现</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Tue, 27 Oct 2020 14:35:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>GEO用于存储地理信息，最直观的就是我们日常使用的地图app中，如果我想查询我所在地的周边餐饮，就可以利用geo中的以<code>(x,y)</code>为圆心，以n为半径，扫描坐标在这个圈内的所有餐饮店，这个case借助redis的geo可以很方便的实现</p>
<!-- more -->
<h2> I. 基本使用</h2>
<h3> 1. 配置</h3>
<p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用姿势</h3>
<p>geo有6个常见的命令，下面逐一进行解释说明</p>
<h4> a. geoadd 添加</h4>
<p>存储指定的地理空间位置，一般需要三个基本的参数，经度 + 维度 + 位置名</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. geopos 获取坐标</h4>
<p>上面添加一组坐标 + 地理位置到redis中，如果我们想知道某个位置的坐标，则可以借助<code>geopos</code>来获取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. geodist 获取距离</h4>
<p>计算两个位置之间的距离，比如我已经写入了武汉、北京的经纬度，这个时候希望知道他们两的距离，直接<code>geodist</code>即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. georadius 获取临近元素</h4>
<p>georadius 以给定的经纬度为中心， 返回与中心的距离不超过给定最大距离的所有位置元素。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. georadiusbymember 获取临近元素</h4>
<p>和上面的作用差不多，区别在于上面参数是经纬度，这里是位置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> f. geohash</h4>
<p>GeoHash将二维的经纬度转换成字符串，将二维的经纬度转换为一维的字符串，可以方便业务优化；geohash有自己的一套算法，这里不详细展开，有兴趣的小伙伴可以搜索一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 小结</h3>
<p>geo更适用于地图这种业务场景中，关于这块的业务没怎么接触过，也不太好确定诸如百度地图、高德地图这种是否有在真实业务中采用；如果我们把目标缩小一点，改成一个地下车库的导航，统计所在位置周边的空余车位，位置导航，停车位记录，感觉有点靠谱</p>
<p>注意上面的六个操作命令，没有删除，但如果我们错误的写入了一个数据，难道没法删除么？</p>
<ul>
<li>使用 <code>zrem key member</code> 执行删除操作，如上面的case中，删除北京的坐标，可以: <code>zrem xhh_pos 北京</code></li>
</ul>
<p>为什么可以这么操作？</p>
<ul>
<li>geo的底层存储借助<code>ZSET</code>来实现的，因此zset的操作符都是支持的，geo添加的元素，会通过算法得出一个score，如上面case中的北京，武汉添加之后，zset值为</li>
</ul>
<figure><img src="/imgs/201027/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/21/201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之HyperLoglog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之发布订阅</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
</ul>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201027/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>16.redisson分布式锁使用及注意事项</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/16.210301-SpringBoot%E7%B3%BB%E5%88%97redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/16.210301-SpringBoot%E7%B3%BB%E5%88%97redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">16.redisson分布式锁使用及注意事项</source>
      <description>redis使用分布式锁，除了我们自己借助setnx来实现之外，更为推荐的是借助redisson来完成，借助redisson，可以非常方便的使用redis分布锁，但是一个使用姿势不对，将可能导致锁无法释放问题 本文将介绍一下SpringBoot中redisson分布式锁的使用姿势，以及使用不当导致锁无法释放的演示</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Mon, 01 Mar 2021 19:53:58 GMT</pubDate>
      <content:encoded><![CDATA[<p>redis使用分布式锁，除了我们自己借助<code>setnx</code>来实现之外，更为推荐的是借助redisson来完成，借助redisson，可以非常方便的使用redis分布锁，但是一个使用姿势不对，将可能导致锁无法释放问题</p>
<p>本文将介绍一下SpringBoot中redisson分布式锁的使用姿势，以及使用不当导致锁无法释放的演示</p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. pom依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code> + <code>redis</code>进行开发</p>
<p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置文件</h3>
<p>redis的配置，我们这里采用默认的配置，本机启动一个redis实例</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 分布式锁</h2>
<h3> 1. 使用姿势</h3>
<p>核心类就是获取一个<code>RedissonClient</code>实例，然后借助它来获取锁</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种非阻塞的使用方式形如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里没有显示设置锁的失效时间，默认持有锁30s，且由<code>watch dog</code>(看门狗)每隔10s续期一波，这里的自动续期，请重点关注，后面会说明因为它导致的锁无法释放</p>
<p>手动设置失效时间： <code>tryLock(time, TimeUnit)</code></p>
<ul>
<li>当指定失效时间时，将没有看门狗的自动续期逻辑</li>
</ul>
<p>一个具体的分布式锁使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望阻塞方式获取分布式锁时，使用<code>RLock#lock()</code>来替换<code>RLock#tryLock()</code></p>
<h3> 2. 锁无法释放场景</h3>
<p>重点关注下上面的自动续期方式，当我们使用姿势不对的时候，可能导致锁无法释放，那么什么样的场景会导致这个问题呢？</p>
<ul>
<li>主动释放锁异常失败</li>
<li>watch dog 一直存活，不断的续期</li>
</ul>
<p>我们借助线程池来演示这个场景</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用锁的业务逻辑中，释放锁时模拟了释放失败的case</p>
<figure><img src="/imgs/210301/00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>两个线程池</p>
<ul>
<li>一个固定大小的线程池（线程不会被回收）：再次访问时，之前持有锁的线程依然可以获取锁；另外一个不行</li>
<li>一个普通的线程池（线程会被回收）：将没有线程能持有锁</li>
</ul>
<p>上面这种case最主要的问题在于<code>redissonClient</code>作为单实例，这个实例不回收，看门狗的续期任务也不会取消；因此即便持有锁的业务逻辑走完了，抛异常了，但是续期任务没有感知，依然在默默的执行，从而导致分布式锁一直无法释放，直到<code>redissonClient</code>实例销毁</p>
<p><strong>小结</strong></p>
<ul>
<li><code>RedissonClient</code>公用时，主动释放锁失败，但是注意看门狗的任务不注销，分布式锁一直续期，从而导致分布式锁无法有效释放</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/126-redisson" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/126-redisson</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210301/00.png" type="image/png"/>
    </item>
    <item>
      <title>17.缓存注解@Cacheable @CacheEvit @CachePut使用姿势介绍</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/17.210616-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable-CacheEvit-CachePut%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/17.210616-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable-CacheEvit-CachePut%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">17.缓存注解@Cacheable @CacheEvit @CachePut使用姿势介绍</source>
      <description>Spring在3.1版本，就提供了一条基于注解的缓存策略，实际使用起来还是很丝滑的，本文将针对几个常用的注解进行简单的介绍说明，有需要的小伙伴可以尝试一下 本文主要知识点： @Cacheable: 缓存存在，则使用缓存；不存在，则执行方法，并将结果塞入缓存 @CacheEvit: 失效缓存 @CachePut: 更新缓存</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Wed, 16 Jun 2021 19:21:44 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring在3.1版本，就提供了一条基于注解的缓存策略，实际使用起来还是很丝滑的，本文将针对几个常用的注解进行简单的介绍说明，有需要的小伙伴可以尝试一下</p>
<p>本文主要知识点：</p>
<ul>
<li>@Cacheable: 缓存存在，则使用缓存；不存在，则执行方法，并将结果塞入缓存</li>
<li>@CacheEvit: 失效缓存</li>
<li>@CachePut: 更新缓存</li>
</ul>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code> + <code>redis5.0</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全程使用默认配置，redis本机，端口6379，无密码</p>
<h2> II. 缓存注解介绍</h2>
<h3> 1. <code>@Cacheable</code></h3>
<p>这个注解用于修饰方法or类，当我们访问它修饰的方法时，优先从缓存中获取，若缓存中存在，则直接获取缓存的值；缓存不存在时，执行方法，并将结果写入缓存</p>
<p>这个注解，有两个比较核心的设置</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cacheNames可以理解为缓存key的前缀，可以为组件缓存的key变量；当key不设置时，使用方法参数来初始化，注意key为SpEL表达式，因此如果要写字符串时，用单引号括起来</p>
<p>一个简单的使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们传参为 yihuihui, 那么缓存key为 <code>say::p_yihuihui</code></p>
<p>除了上面三个配置值之外，查看<code>@Cacheable</code>注解源码的童鞋可以看到还有<code>condition</code>设置，这个表示当它设置的条件达成时，才写入缓存</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个case中，age为偶数的时候，才走缓存；否则不写缓存</p>
<p>接下来是<code>unless</code>参数，从名字上可以看出它表示不满足条件时才写入缓存</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. @CachePut</h3>
<p>不管缓存有没有，都将方法的返回结果写入缓存；适用于缓存更新</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. @CacheEvict</h3>
<p>这个就是我们理解的删除缓存</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. @Caching</h3>
<p>在实际的工作中，经常会遇到一个数据变动，更新多个缓存的场景，对于这个场景，可以通过<code>@Caching</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个就是组合操作</p>
<ul>
<li>从 <code>caching::age</code>缓存取数据，不存在时执行方法并写入缓存；</li>
<li>失效缓存 <code>t4::age</code></li>
</ul>
<h3> 5. 异常时，缓存会怎样？</h3>
<p>上面的几个case，都是正常的场景，当方法抛出异常时，这个缓存表现会怎样？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据实测结果，当<code>age==0</code>时，上面两个缓存都不会成功</p>
<h3> 6. 测试用例</h3>
<p>接下来验证下缓存注解与上面描述的是否一致</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个主要是验证<code>@Cacheable</code>注解，若缓存不命中，每次返回的结果应该都不一样，然而实际访问时，会发现返回的都是相同的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>失效缓存</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失效缓存，需要和上面的case配合起来使用</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>剩下其他的相关测试类就比较好理解了，一并贴出对应的代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 小结</h3>
<p>最后管理小结一下Spring提供的几个缓存注解</p>
<ul>
<li><code>@Cacheable</code>: 缓存存在，则从缓存取；否则执行方法，并将返回结果写入缓存</li>
<li><code>@CacheEvit</code>: 失效缓存</li>
<li><code>@CachePut</code>: 更新缓存</li>
<li><code>@Caching</code>: 都注解组合</li>
</ul>
<p>上面虽说可以满足常见的缓存使用场景，但是有一个非常重要的点没有说明，缓存失效时间应该怎么设置？？？</p>
<p>如何给每个缓存设置不同的缓存失效时间，咱么下篇博文见，我是一灰灰，欢迎关注长草的公众号<code>一灰灰blog</code></p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/125-cache-ano" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/125-cache-ano</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>18.缓存注解@Cacheable之自定义key策略及缓存失效时间指定</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/18.210701-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89key%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E6%97%B6%E9%97%B4%E6%8C%87%E5%AE%9A.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/18.210701-SpringBoot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3-Cacheable%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89key%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E6%97%B6%E9%97%B4%E6%8C%87%E5%AE%9A.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">18.缓存注解@Cacheable之自定义key策略及缓存失效时间指定</source>
      <description>上一篇博文介绍了Spring中缓存注解@Cacheable @CacheEvit @CachePut的基本使用，接下来我们将看一下更高级一点的知识点 key生成策略 超时时间指定</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <pubDate>Thu, 01 Jul 2021 20:52:19 GMT</pubDate>
      <content:encoded><![CDATA[<p>上一篇博文介绍了Spring中缓存注解<code>@Cacheable</code> <code>@CacheEvit</code> <code>@CachePut</code>的基本使用，接下来我们将看一下更高级一点的知识点</p>
<ul>
<li>key生成策略</li>
<li>超时时间指定</li>
</ul>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code> + <code>redis5.0</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 扩展知识点</h2>
<h3> 1. key生成策略</h3>
<p>对于<code>@Cacheable</code>注解，有两个参数用于组装缓存的key</p>
<ul>
<li>cacheNames/value: 类似于缓存前缀</li>
<li>key: SpEL表达式，通常根据传参来生成最终的缓存key</li>
</ul>
<p>默认的<code>redisKey = cacheNames::key</code> (注意中间的两个冒号)</p>
<p>如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓存key默认采用<code>SimpleKeyGenerator</code>来生成，比如上面的调用，如果<code>id=1</code>， 那么对应的缓存key为 <code>k1::1</code></p>
<p>如果没有参数，或者多个参数呢？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后写一个测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问之后，输出结果如下</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结一下</p>
<ul>
<li>单参数：<code>cacheNames::arg</code></li>
<li>无参数: <code>cacheNames::SimpleKey []</code>, 后面使用 <code>SimpleKey []</code>来补齐</li>
<li>多参数: <code>cacheNames::SimpleKey [arg1, arg2...]</code></li>
<li>非基础对象：<code>cacheNames::obj.toString()</code></li>
</ul>
<h3> 2. 自定义key生成策略</h3>
<p>如果希望使用自定义的key生成策略，只需继承<code>KeyGenerator</code>，并声明为一个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在使用的地方，利用注解中的<code>keyGenerator</code>来指定key生成策略</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓存key放在了返回结果的<code>keys</code>中，输出如下，和预期的一致</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 缓存失效时间</h3>
<p>以上所有的缓存都没有设置失效时间，实际的业务场景中，不设置失效时间的场景有；但更多的都需要设置一个ttl，对于Spring的缓存注解，原生没有额外提供一个指定ttl的配置，如果我们希望指定ttl，可以通过<code>RedisCacheManager</code>来完成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个设置<code>RedisCacheConfiguration</code>的方法，其中有两个点</p>
<ul>
<li>序列化方式：采用json对缓存内容进行序列化</li>
<li>失效时间：根据传参来设置失效时间</li>
</ul>
<p>如果希望针对特定的key进行定制化的配置的话，可以如下操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是定义我们需要的<code>RedisCacheManager</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的测试case基础上，添加返回ttl的信息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果如下，注意返回的ttl失效时间</p>
<figure><img src="/imgs/210701/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 自定义失效时间扩展</h3>
<p>虽然上面可以实现失效时间指定，但是用起来依然不是很爽，要么是全局设置为统一的失效时间；要么就是在代码里面硬编码指定，失效时间与缓存定义的地方隔离，这就很不直观了</p>
<p>接下来介绍一种，直接在注解中，设置失效时间的case</p>
<p>如下面的使用case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义的策略如下：</p>
<ul>
<li>value中，等号左边的为cacheName, 等号右边的为失效时间</li>
</ul>
<p>要实现这个逻辑，可以扩展一个自定义的<code>RedisCacheManager</code>，如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写<code>createRedisCache</code>逻辑， 根据name解析出失效时间；</p>
<p>注册使用方式与上面一致，声明为Spring的bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证结果如下</p>
<figure><img src="/imgs/210701/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>到此基本上将Spring中缓存注解的常用姿势都介绍了一下，无论是几个注解的使用case，还是自定义的key策略，失效时间指定，单纯从使用的角度来看，基本能满足我们的日常需求场景</p>
<p>下面是针对缓存注解的一个知识点抽象</p>
<p><strong>缓存注解</strong></p>
<ul>
<li><code>@Cacheable</code>: 缓存存在，则从缓存取；否则执行方法，并将返回结果写入缓存</li>
<li><code>@CacheEvit</code>: 失效缓存</li>
<li><code>@CachePut</code>: 更新缓存</li>
<li><code>@Caching</code>: 都注解组合</li>
</ul>
<p><strong>配置参数</strong></p>
<ul>
<li><code>cacheNames/value</code>: 可以理解为缓存前缀</li>
<li><code>key</code>: 可以理解为缓存key的变量，支持SpEL表达式</li>
<li><code>keyGenerator</code>: key组装策略</li>
<li><code>condition/unless</code>: 缓存是否可用的条件</li>
</ul>
<p><strong>默认缓存ke策略y</strong></p>
<blockquote>
<p>下面的cacheNames为注解中定义的缓存前缀，两个分号固定</p>
</blockquote>
<ul>
<li>单参数：<code>cacheNames::arg</code></li>
<li>无参数: <code>cacheNames::SimpleKey []</code>, 后面使用 <code>SimpleKey []</code>来补齐</li>
<li>多参数: <code>cacheNames::SimpleKey [arg1, arg2...]</code></li>
<li>非基础对象：<code>cacheNames::obj.toString()</code></li>
</ul>
<p><strong>缓存失效时间</strong></p>
<p>失效时间，本文介绍了两种方式，一个是集中式的配置，通过设置<code>RedisCacheConfiguration</code>来指定ttl时间</p>
<p>另外一个是扩展<code>RedisCacheManager</code>类，实现自定义的<code>cacheNames</code>扩展解析</p>
<p>Spring缓存注解知识点到此告一段落，我是一灰灰，欢迎关注长草的公众号<code>一灰灰blog</code></p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486428&amp;idx=1&amp;sn=e64947b13d5261db72e7c8d3e56e9cfe&amp;chksm=fce71070cb90996677ae7a42600977855e45a9fe2fa24700b21936287c6dcfa44b9eb2ff68dd&amp;token=1673053889&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">Spring系列缓存注解@Cacheable @CacheEvit @CachePut 使用姿势介绍</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210701/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Redis实战</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/Redis/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">Redis实战</source>
      <description>缓存神器Redis的基础 + 进阶教程，搭配实际业务场景的实战博文，彻底掌握redis的使用姿势</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>缓存神器Redis的基础 + 进阶教程，搭配实际业务场景的实战博文，彻底掌握redis的使用姿势</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.声明式事务Transactional</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/01.200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/01.200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.声明式事务Transactional</source>
      <description>当我们希望一组操作，要么都成功，要么都失败时，往往会考虑里利用事务来实现这一点；之前介绍的db操作，主要在于单表的CURD，本文将引入声明式事务@Transactional的使用姿势</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>事务</category>
      <pubDate>Sun, 19 Jan 2020 16:56:27 GMT</pubDate>
      <content:encoded><![CDATA[<p>当我们希望一组操作，要么都成功，要么都失败时，往往会考虑里利用事务来实现这一点；之前介绍的db操作，主要在于单表的CURD，本文将引入声明式事务<code>@Transactional</code>的使用姿势</p>
<!-- more -->
<h2> I. 配置</h2>
<p>本篇主要介绍的是<code>jdbcTemplate</code>配合事务注解<code>@Transactional</code>的使用姿势，至于JPA，mybatis在实际的使用区别上，并不大，后面会单独说明</p>
<p>创建一个SpringBoot项目，版本为<code>2.2.1.RELEASE</code>，使用mysql作为目标数据库，存储引擎选择<code>Innodb</code>，事务隔离级别为RR</p>
<h3> 1. 项目配置</h3>
<p>在项目<code>pom.xml</code>文件中，加上<code>spring-boot-starter-jdbc</code>，会注入一个<code>DataSourceTransactionManager</code>的bean，提供了事务支持</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库配置</h3>
<p>进入spring配置文件<code>application.properties</code>，设置一下db相关的信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库</h3>
<p>新建一个简单的表结构，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 使用说明</h2>
<h3> 1. 初始化</h3>
<p>为了体现事务的特点，在不考虑DDL的场景下，DML中的增加，删除or修改属于不可缺少的语句了，所以我们需要先初始化几个用于测试的数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用<code>replace into</code>语句来初始化数据，每次bean创建之后都会执行，确保每次执行后面你的操作时，初始数据都一样</p>
<h3> 2. transactional</h3>
<p>这个注解可以放在类上，也可以放在方法上；如果是标注在类上，则这个类的所有公共方法，都支持事务；</p>
<p>如果类和方法上都有，则方法上的注解相关配置，覆盖类上的注解</p>
<p>下面是一个简单的事务测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们需要开启事务的公共方法上添加注解<code>@Transactional</code>，表明这个方法的正确调用姿势下，如果方法内部执行抛出运行异常，会出现事务回滚</p>
<blockquote>
<p>注意上面的说法，正确的调用姿势，事务才会生效；换而言之，某些case下，不会生效</p>
</blockquote>
<h3> 3. 测试</h3>
<p>接下来，测试一下上面的方法事务是否生效，我们新建一个Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的调用中，打印了修改之前的数据和修改之后的数据，如果事务正常工作，那么这两次输出应该是一致的</p>
<p>实际输出结果如下，验证了事务生效，中间的修改name的操作被回滚了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 注意事项</h3>
<h4> a. 适用场景</h4>
<p>在使用注解<code>@Transactional</code>声明式事务时，其主要是借助AOP，通过代理来封装事务的逻辑，所以aop不生效的场景，也适用于这个事务注解不生效的场景</p>
<p>简单来讲，下面几种case，注解不生效</p>
<ul>
<li>private方法上装饰<code>@Transactional</code>，不生效</li>
<li>内部调用，不生效
<ul>
<li>举例如: 外部调用服务A的普通方法m，而这个方法m，调用本类中的声明有事务注解的方法m2, 正常场景下，事务不生效</li>
</ul>
</li>
</ul>
<h4> b. 异常类型</h4>
<p>此外，注解<code>@Transactional</code>默认只针对运行时异常生效，如下面这种case，虽然是抛出了异常，但是并不会生效</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要它生效，可以借助<code>rollbackFor</code>属性来指明，触发回滚的异常类型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下上面的两种case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，正好验证了上面提出的内容</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. @Transactional 注解的属性信息</h4>
<p>上面的内容，都属于比较基本的知识点，足以满足我们一般的业务需求，如果需要进阶的话，有必要了解一下属性信息</p>
<blockquote>
<p>以下内容来自: <a href="https://www.cnblogs.com/xd502djj/p/10940627.html" target="_blank" rel="noopener noreferrer">透彻的掌握 Spring 中@transactional 的使用</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td>
</tr>
<tr>
<td>propagation</td>
<td>事务的传播行为，默认值为 REQUIRED。</td>
</tr>
<tr>
<td>isolation</td>
<td>事务的隔离度，默认值采用 DEFAULT。</td>
</tr>
<tr>
<td>timeout</td>
<td>事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td>
</tr>
<tr>
<td>read-only</td>
<td>指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td>
</tr>
<tr>
<td>rollback-for</td>
<td>用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td>
</tr>
<tr>
<td>no-rollback- for</td>
<td>抛出 no-rollback-for 指定的异常类型，不回滚事务。</td>
</tr>
</tbody>
</table>
<p>关于上面几个属性的使用实例，以及哪些情况下，会导致声明式事务不生效，会新开坑进行说明，敬请期待。。。</p>
<h2> III. 其他</h2>
<h3> 0. 系列博文&amp;源码</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">180926-SpringBoot高级篇DB之基本使用</a></li>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">190418-SpringBoot高级篇JdbcTemplate之数据更新与删除</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2.事务隔离级别知识点小结</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/02.200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/02.200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.事务隔离级别知识点小结</source>
      <description>终于渡过漫长的自我隔离期，健康的活着真好；为武汉祈福，希望快点渡过，能早日回归大武汉 😭😭😭 上一篇博文介绍了声明式事务@Transactional的简单使用姿势，最文章的最后给出了这个注解的多个属性，本文将着重放在事务隔离级别的知识点上，并通过实例演示不同的事务隔离级别下，脏读、不可重复读、幻读的具体场景</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>事务</category>
      <pubDate>Mon, 20 Jan 2020 14:07:39 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>终于渡过漫长的自我隔离期，健康的活着真好；为武汉祈福，希望快点渡过，能早日回归大武汉 😭😭😭</p>
</blockquote>
<p>上一篇博文介绍了声明式事务<code>@Transactional</code>的简单使用姿势，最文章的最后给出了这个注解的多个属性，本文将着重放在事务隔离级别的知识点上，并通过实例演示不同的事务隔离级别下，脏读、不可重复读、幻读的具体场景</p>
<!-- more -->
<h2> I. 基础知识</h2>
<p>在进入正文之前，先介绍一下事务隔离级别的一些基础知识点，详细内容，推荐参考博文</p>
<blockquote>
<p><a href="https://juejin.im/post/5ab5e44a6fb9a028c97a013d" target="_blank" rel="noopener noreferrer">mysql之锁与事务</a></p>
</blockquote>
<h3> 1. 基本概念</h3>
<blockquote>
<p>以下基本概念源于个人理解之后，通过简单的case进行描述，如有问题，欢迎拍砖</p>
</blockquote>
<p><strong>更新丢失</strong></p>
<p>简单来讲，两个事务A,B分别更新一条记录的filedA, filedB字段，其中事务B异常，导致回滚，将这条记录的恢复为修改之前的状态，导致事务A的修改丢失了，这就是更新丢失</p>
<p><strong>脏读</strong></p>
<p>读取到另外一个事务未提交的修改，所以当另外一个事务是失败导致回滚的时候，这个读取的数据其实是不准确的，这就是脏读</p>
<p><strong>不可重复读</strong></p>
<p>简单来讲，就是一个事务内，多次查询同一个数据，返回的结果居然不一样，这就是不可重复度（重复读取的结果不一样）</p>
<p><strong>幻读</strong></p>
<p>同样是多次查询，但是后面查询时，发现多了或者少了一些记录</p>
<p>比如：查询id在[1,10]之间的记录，第一次返回了1,2,3三条记录；但是另外一个事务新增了一个id为4的记录，导致再次查询时，返回了1,2,3,4四条记录，第二次查询时多了一条记录，这就是幻读</p>
<p>幻读和不可重复读的主要区别在于：</p>
<ul>
<li>幻读针对的是查询结果为多个的场景，出现了数据的增加or减少</li>
<li>不可重复度读对的是某些特定的记录，这些记录的数据与之前不一致</li>
</ul>
<h3> 2. 隔离级别</h3>
<p>后面测试的数据库为mysql，引擎为innodb，对应有四个隔离级别</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>说明</th>
<th>fix</th>
<th>not fix</th>
</tr>
</thead>
<tbody>
<tr>
<td>RU(read uncommitted)</td>
<td>未授权读，读事务允许其他读写事务；未提交写事务禁止其他写事务（读事务ok）</td>
<td>更新丢失</td>
<td>脏读，不可重复读，幻读</td>
</tr>
<tr>
<td>RC(read committed)</td>
<td>授权读，读事务允许其他读写事务；未提交写事务，禁止其他读写事务</td>
<td>更新丢失，脏读</td>
<td>不可重复读，幻读</td>
</tr>
<tr>
<td>RR(repeatable read)</td>
<td>可重复度，读事务禁止其他写事务；未提交写事务，禁止其他读写事务</td>
<td>更新丢失，脏读，不可重复度</td>
<td><del>幻读</del></td>
</tr>
<tr>
<td>serializable</td>
<td>序列化读，所有事务依次执行</td>
<td>更新丢失，脏读，不可重复度，幻读</td>
<td>-</td>
</tr>
</tbody>
</table>
<p><strong>说明，下面存为个人观点，不代表权威，谨慎理解和引用</strong></p>
<ul>
<li>我个人的观点，rr级别在mysql的innodb引擎上，配合mvvc + gap锁，已经解决了幻读问题</li>
<li>下面这个case是幻读问题么？
<ul>
<li>从锁的角度来看，步骤1、2虽然开启事务，但是属于快照读；而9属于当前读；他们读取的源不同，应该不算在幻读定义中的同一查询条件中</li>
</ul>
</li>
</ul>
<figure><img src="/imgs/200120/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 配置</h2>
<p>接下来进入实例演示环节，首先需要准备环境，创建测试项目</p>
<p>创建一个SpringBoot项目，版本为<code>2.2.1.RELEASE</code>，使用mysql作为目标数据库，存储引擎选择<code>Innodb</code>，事务隔离级别为RR</p>
<h3> 1. 项目配置</h3>
<p>在项目<code>pom.xml</code>文件中，加上<code>spring-boot-starter-jdbc</code>，会注入一个<code>DataSourceTransactionManager</code>的bean，提供了事务支持</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库配置</h3>
<p>进入spring配置文件<code>application.properties</code>，设置一下db相关的信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库</h3>
<p>新建一个简单的表结构，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 实例演示</h2>
<h3> 1. 初始化数据</h3>
<p>准备一些用于后续操作的数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供一些基本的查询和修改方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. RU隔离级别</h3>
<p>我们先来测试RU隔离级别，通过指定<code>@Transactional</code>注解的<code>isolation</code>属性来设置事务的隔离级别</p>
<p>通过前面的描述，我们知道RU会有脏读问题，接下来设计一个case，进行演示</p>
<p>事务一，修改数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只读事务二(设置readOnly为true，则事务为只读)多次读取相同的数据，我们希望在事务二的第一次读取中，能获取到事务一的中间修改结果（所以请注意两个方法中的sleep使用）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来属于测试的case，用两个线程来调用只读事务，和读写事务</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关注一下上面结果中<code>ru read only &gt;&gt;&gt;&gt;</code>开头的记录，首先两次输出结果不一致，所以不可重复读问题是存在的</p>
<p>其次，第二次读取的数据与读写事务中的中间结果一致，即读取到了未提交的结果，即为脏读</p>
<h3> 3. RC事务隔离级别</h3>
<p>rc隔离级别，可以解决脏读，但是不可重复读问题无法避免，所以我们需要设计一个case，看一下是否可以读取另外一个事务提交后的结果</p>
<p>在前面的测试case上，稍微改一改</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出中，在只读事务，前面两次查询，结果一致，虽然第二次查询时，读写事务修改了这个记录，但是并没有读取到这个中间记录状态，所以这里没有脏读问题；</p>
<p>当读写事务完毕之后，只读事务的第三次查询中，返回的是读写事务提交之后的结果，导致了不可重复读</p>
<h3> 4. RR事务隔离级别</h3>
<p>针对rr，我们主要测试一下不可重复读的解决情况，设计case相对简单</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望读写事务的执行周期在只读事务的两次查询之内，所有测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两次只读事务的输出一致，并没有出现上面的不可重复读问题</p>
<p><strong>说明</strong></p>
<ul>
<li><code>@Transactional</code>注解的默认隔离级别为<code>Isolation#DEFAULT</code>，也就是采用数据源的隔离级别，mysql innodb引擎默认隔离级别为RR（所有不额外指定时，相当于RR）</li>
</ul>
<h3> 5. SERIALIZABLE事务隔离级别</h3>
<p>串行事务隔离级别，所有的事务串行执行，实际的业务场景中，我没用过... 也不太能想像，什么场景下需要这种</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只读事务的查询输出之后，才输出读写事务的日志，简单来讲就是读写事务中的操作被delay了</p>
<h3> 6. 小结</h3>
<p>本文主要介绍了事务的几种隔离级别，已经不同干的隔离级别对应的场景，可能出现的问题；</p>
<p><strong>隔离级别说明</strong></p>
<table>
<thead>
<tr>
<th>级别</th>
<th>fix</th>
<th>not fix</th>
</tr>
</thead>
<tbody>
<tr>
<td>RU</td>
<td>更新丢失</td>
<td>脏读，不可重复读，幻读</td>
</tr>
<tr>
<td>RC</td>
<td>更新丢失 脏读</td>
<td>不可重复读，幻读</td>
</tr>
<tr>
<td>RR</td>
<td>更新丢、脏读，不可重复读，幻读</td>
<td>-</td>
</tr>
<tr>
<td>serialze</td>
<td>更新丢失、 脏读，不可重复读，幻读</td>
<td>-</td>
</tr>
</tbody>
</table>
<p><strong>使用说明</strong></p>
<ul>
<li>mysql innodb引擎默认为RR隔离级别；<code>@Transactinoal</code>注解使用数据库的隔离级别，即RR</li>
<li>通过指定<code>Transactional#isolation</code>来设置事务的事务级别</li>
</ul>
<h2> IV. 其他</h2>
<h3> 0. 系列博文&amp;源码</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">180926-SpringBoot高级篇DB之基本使用</a></li>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">190418-SpringBoot高级篇JdbcTemplate之数据更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">200119-SpringBoot系列教程之声明式事务Transactional</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/200120/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.事务传递属性</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/03.200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/03.200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.事务传递属性</source>
      <description>对于mysql而言，关于事务的主要知识点可能集中在隔离级别上；在Spring体系中，使用事务的时候，还有一个知识点事务的传递属性同样重要，本文将主要介绍7中传递属性的使用场景</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>事务</category>
      <pubDate>Sun, 02 Feb 2020 16:03:26 GMT</pubDate>
      <content:encoded><![CDATA[<p>对于mysql而言，关于事务的主要知识点可能集中在隔离级别上；在Spring体系中，使用事务的时候，还有一个知识点事务的传递属性同样重要，本文将主要介绍7中传递属性的使用场景</p>
<!-- more -->
<h2> I. 配置</h2>
<p>本文的case，将使用声明式事务，首先我们创建一个SpringBoot项目，版本为<code>2.2.1.RELEASE</code>，使用mysql作为目标数据库，存储引擎选择<code>Innodb</code>，事务隔离级别为RR</p>
<h3> 1. 项目配置</h3>
<p>在项目<code>pom.xml</code>文件中，加上<code>spring-boot-starter-jdbc</code>，会注入一个<code>DataSourceTransactionManager</code>的bean，提供了事务支持</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库配置</h3>
<p>进入spring配置文件<code>application.properties</code>，设置一下db相关的信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库</h3>
<p>新建一个简单的表结构，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 使用说明</h2>
<h3> 0. 准备</h3>
<p>在正式开始之前，得先准备一些基础数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次测试事务的使用，我们需要额外创建一个测试类，后面的测试case都放在类<code>PropagationSample</code>中; 为了使输出结果更加友好，提供了一个封装的call方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. REQUIRED</h3>
<p>也是默认的传递属性，其特点在于</p>
<ul>
<li>如果存在一个事务，则在当前事务中运行</li>
<li>如果没有事务则开启一个新的事务</li>
</ul>
<p>使用方式也比较简单，不设置<code>@Transactional</code>注解的propagation属性，或者设置为 REQUIRED即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是一个基础的使用姿势</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. SUPPORTS</h3>
<p>其特点是在事务里面，就事务执行；否则就非事务执行，即</p>
<ul>
<li>如果存在一个事务，支持当前事务</li>
<li>如果没有事务，则非事务的执行</li>
</ul>
<p>使用姿势和前面基本一致</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个传递属性比较特别，所以我们的测试case需要两个，一个事务调用，一个非事务调用</p>
<p>测试事务调用时，我们新建一个bean: <code>PropagationDemo2</code>，下面的support方法支持事务运行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于非事务调用，则是直接在测试类中调用(请注意下面的call方法，调用的是两个不同bean中的support方法)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出，也可以得出结果：非事务执行时，不会回滚；事务执行时，回滚</p>
<h3> 3. MANDATORY</h3>
<p>需要在一个正常的事务内执行，否则抛异常</p>
<p>使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种传播属性的特点是这个方法必须在一个已有的事务中运行，所以我们的测试case也比较简单，不再事务中运行时会怎样?</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出可知，直接抛出了异常，并不会执行方法内的逻辑</p>
<h3> 4. NOT_SUPPORT</h3>
<p>这个比较有意思，被它标记的方法，总是非事务地执行，如果存在活动事务，则挂起</p>
<p>（实在是没有想到，有什么场景需要这种传播属性）</p>
<p>一个简单的使用case如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要好好的想一下我们的测试用例，首先是它需要在一个事务中调用，外部事物失败回滚，并不会影响上面这个方法的执行结果</p>
<p>我们在<code>PropagationDemo2</code>中，添加测试case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面输出可以看出</p>
<ul>
<li>NOT_SUPPORT 标记的方法，属于非事务运行（因为抛异常，修改没有回滚）</li>
<li>外部事务回滚，不会影响其修改</li>
</ul>
<h3> 5. NEVER</h3>
<p>总是非事务地执行，如果存在一个活动事务，则抛出异常。</p>
<p>使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的测试就比较简单了，如果在事务中运行，是不是会抛异常</p>
<p>在<code>PropagationDemo2</code>中，添加一个事务调用方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接抛出了异常，并没有执行方法内的业务逻辑</p>
<h3> 6. NESTED</h3>
<p>其主要特点如下</p>
<ul>
<li>如果不存在事务，则开启一个事务运行</li>
<li>如果存在事务，则运行一个嵌套事务；</li>
</ul>
<p>上面提出了一个嵌套事务的概念，什么是嵌套事务呢？</p>
<ul>
<li>一个简单的理解：外部事务回滚，内部事务也会被回滚；内部事务回滚，外部无问题，并不会回滚外部事务</li>
</ul>
<p>接下来设计两个测试用例，一个是内部事务回滚；一个是外部事务回滚</p>
<h4> a. case1 内部事务回滚</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>PropagationDemo2</code>这个bean中，添加一个外部事务，捕获上面方法的异常，因此外部执行正常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细看一下上面的结果，外部事务修改的结果都被保存了，内部事务的修改被回滚了，没有影响最终的结果</p>
<h4> b. case2 外部事务回滚</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>PropagationDemo2</code>这个bean中，添加一个外部事务，内部事务正常，但是外部事务抛异常，主动回滚</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细看上面的输出，对别case1，其特别在于全部回滚了，内部事务的修改也被回滚了</p>
<h3> 7. REQUIRES_NEW</h3>
<p>这个和上面的NESTED有点相似，但是又不一样</p>
<ul>
<li>当存在活动事务时，新创建一个事务执行</li>
<li>当不存在活动事务时，和REQUIRES效果一致，创建一个事务执行</li>
</ul>
<p><strong>注意</strong></p>
<p><code>REQUIRES_NEW</code>和<code>NESTED</code>相比，两个事务之间没有关系，任何一个回滚，对另外一个无影响</p>
<p>测试case和前面差不多，不多做细说...</p>
<h3> 8. 小结</h3>
<p>前面介绍了7中传播属性，下面简单对比和小结一下</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUIRED</td>
<td>默认，如果存在事务，则支持当前事务；不存在，则开启一个新事务</td>
</tr>
<tr>
<td>SUPPORTS</td>
<td>如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>需要在一个正常的事务内执行，否则抛异常</td>
</tr>
<tr>
<td>REQUIRES_NEW</td>
<td>不管存不存在事务，都开启一个新事务</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>不管存不存在，都以非事务方式执行，当存在事务时，挂起事务</td>
</tr>
<tr>
<td>NEVER</td>
<td>非事务方式执行，如果存在事务，则抛异常</td>
</tr>
<tr>
<td>NESTED</td>
<td>如果不存在事务，则开启一个事务运行；如果存在事务，则运行一个嵌套事务</td>
</tr>
</tbody>
</table>
<h2> III. 其他</h2>
<h3> 0. 系列博文&amp;源码</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">180926-SpringBoot高级篇DB之基本使用</a></li>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">190418-SpringBoot高级篇JdbcTemplate之数据更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">200119-SpringBoot系列教程之声明式事务Transactional</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/20/200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">200120-SpringBoot系列教程之事务隔离级别知识点小结</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>4.事务不生效的几种case</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/04.200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/04.200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.事务不生效的几种case</source>
      <description>前面几篇博文介绍了声明式事务@Transactional的使用姿势，只知道正确的使用姿势可能还不够，还得知道什么场景下不生效，避免采坑。本文将主要介绍让事务不生效的几种case</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>事务</category>
      <pubDate>Mon, 03 Feb 2020 14:40:43 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面几篇博文介绍了声明式事务<code>@Transactional</code>的使用姿势，只知道正确的使用姿势可能还不够，还得知道什么场景下不生效，避免采坑。本文将主要介绍让事务不生效的几种case</p>
<!-- more -->
<h2> I. 配置</h2>
<p>本文的case，将使用声明式事务，首先我们创建一个SpringBoot项目，版本为<code>2.2.1.RELEASE</code>，使用mysql作为目标数据库，存储引擎选择<code>Innodb</code>，事务隔离级别为RR</p>
<h3> 1. 项目配置</h3>
<p>在项目<code>pom.xml</code>文件中，加上<code>spring-boot-starter-jdbc</code>，会注入一个<code>DataSourceTransactionManager</code>的bean，提供了事务支持</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库配置</h3>
<p>进入spring配置文件<code>application.properties</code>，设置一下db相关的信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库</h3>
<p>新建一个简单的表结构，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 不生效case</h2>
<p>在声明式事务的使用教程<a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">200119-SpringBoot系列教程之声明式事务Transactional</a> 中，也提到了一些事务不生效的方式，比如声明式事务注解<code>@Transactional</code>主要是结合代理实现，结合AOP的知识点，至少可以得出放在私有方法上，类内部调用都不会生效，下面进入详细说明</p>
<h3> 1. 数据库</h3>
<p>事务生效的前提是你的数据源得支持事务，比如mysql的MyISAM引擎就不支持事务，而Innodb支持事务</p>
<p>下面的case都是基于mysql + Innodb 引擎</p>
<p>为后续的演示case，我们准备一些数据如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 类内部访问</h3>
<p>简单来讲就是指非直接访问带注解标记的方法B，而是通过类普通方法A，然后由A访问B</p>
<p>下面是一个简单的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个方法，直接调用<code>testCompleException</code>方法，事务正常操作；通过调用<code>testCall</code>间接访问，在不生效</p>
<p>测试case如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出可以看到，事务并没有回滚，主要是因为类内部调用，不会通过代理方式访问</p>
<h3> 3. 私有方法</h3>
<p>在私有方法上，添加<code>@Transactional</code>注解也不会生效，私有方法外部不能访问，所以只能内部访问，上面的case不生效，这个当然也不生效了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用时，下面这种场景不太容易出现，因为IDEA会有提醒，文案为: <code>Methods annotated with '@Transactional' must be overridable</code></p>
<h3> 4. 异常不匹配</h3>
<p><code>@Transactional</code>注解默认处理运行时异常，即只有抛出运行时异常时，才会触发事务回滚，否则并不会如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，事务并未回滚（如果需要解决这个问题，通过设置<code>@Transactional</code>的rollbackFor属性即可）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 多线程</h3>
<p>这个场景可能并不多见，在标记事务的方法内部，另起子线程执行db操作，此时事务同样不会生效</p>
<p>下面给出两个不同的姿势，一个是子线程抛异常，主线程ok；一个是子线程ok，主线程抛异常</p>
<h4> a. case1</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种场景不生效很好理解，子线程的异常不会被外部的线程捕获，<code>testMultThread</code>这个方法的调用不抛异常，因此不会触发事务回滚</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. case2</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个看着好像没有毛病，抛出线程，事务回滚，可惜两个子线程的修改并不会被回滚</p>
<p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下面的输出也可以知道，子线程的修改并不在同一个事务内，不会被回滚</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 传播属性</h3>
<p>上一篇关于传播属性的博文中，介绍了其中有几种是不走事务执行的，所以也需要额外注意下，详情可以参考博文 <a href="http://spring.hhui.top/spring-blog/2020/02/02/200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">200202-SpringBoot系列教程之事务传递属性</a></p>
<h3> 7. 小结</h3>
<p>下面小结几种<code>@Transactional</code>注解事务不生效的case</p>
<ul>
<li>数据库不支持事务</li>
<li>注解放在了私有方法上</li>
<li>类内部调用</li>
<li>未捕获异常</li>
<li>多线程场景</li>
<li>传播属性设置问题</li>
</ul>
<h2> III. 其他</h2>
<h3> 0. 系列博文&amp;源码</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">180926-SpringBoot高级篇DB之基本使用</a></li>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">190418-SpringBoot高级篇JdbcTemplate之数据更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">200119-SpringBoot系列教程之声明式事务Transactional</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/20/200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">200120-SpringBoot系列教程之事务隔离级别知识点小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/02/200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">200202-SpringBoot系列教程之事务传递属性</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>5.编程式事务使用姿势介绍篇</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/05.200204-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D%E7%AF%87.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/05.200204-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D%E7%AF%87.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.编程式事务使用姿势介绍篇</source>
      <description>前面介绍的几篇事务的博文，主要是利用@Transactional注解的声明式使用姿势，其好处在于使用简单，侵入性低，可辨识性高（一看就知道使用了事务）；然而缺点也比较明显，不够灵活，稍不注意，可能就因为姿势不对，导致事务不生效 本文将介绍另外一种事务的使用姿势，借助TransactionTemplate的编程式事务</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>事务</category>
      <pubDate>Tue, 04 Feb 2020 16:42:11 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面介绍的几篇事务的博文，主要是利用<code>@Transactional</code>注解的声明式使用姿势，其好处在于使用简单，侵入性低，可辨识性高（一看就知道使用了事务）；然而缺点也比较明显，不够灵活，稍不注意，可能就因为姿势不对，导致事务不生效</p>
<p>本文将介绍另外一种事务的使用姿势，借助<code>TransactionTemplate</code>的编程式事务</p>
<!-- more -->
<h2> I. 配置</h2>
<p>本篇主要介绍的是<code>jdbcTemplate</code>+<code>transactionTemplate</code>来完成一个编程式事务的实例demo</p>
<p>创建一个SpringBoot项目，版本为<code>2.2.1.RELEASE</code>，使用mysql作为目标数据库，存储引擎选择<code>Innodb</code>，事务隔离级别为RR</p>
<h3> 1. 项目配置</h3>
<p>在项目<code>pom.xml</code>文件中，加上<code>spring-boot-starter-jdbc</code>，会注入一个<code>DataSourceTransactionManager</code>的bean，提供了事务支持</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 数据库配置</h3>
<p>进入spring配置文件<code>application.properties</code>，设置一下db相关的信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 数据库</h3>
<p>新建一个简单的表结构，用于测试</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 使用说明</h2>
<h3> 1. 初始化</h3>
<p>创建几条数据，用于事务操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用case</h3>
<p>为了演示事务的特性，我们设计几个简单的sql操作，并抛出异常，引发回滚，如下</p>
<ul>
<li>在doUpdate方法中，显示更新name，输出更新的结果，然后再更新money的值，最后抛出一个异常，希望事务回滚</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这一端逻辑，如果看了前面几篇博文，会比较熟悉，区别在于doUpdate方法上面没有添加<code>@Transactional</code>注解，当下它的调用并不会在事务中执行</p>
<p>接下来我们看一下编程式事务的核心写法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，将方法的调用，封装在<code>transactionTemplate.execute</code>的调用中，通过设置<code>transactionStatus.setRollbackOnly()</code>来标记回滚</p>
<p>通过前面几篇博文的学习我们知道实际使用时，事务的隔离级别，传递属性也很重要，在编程式事务中，当然也是可以设置的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后写一个测试代码，验证一下是否生效</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，最终数据big没有被修改</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 其他</h2>
<h3> 0. 系列博文&amp;源码</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/09/26/180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">180926-SpringBoot高级篇DB之基本使用</a></li>
<li><a href="http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener noreferrer">190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/" target="_blank" rel="noopener noreferrer">190412-SpringBoot高级篇JdbcTemplate之数据查询上篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/17/190417-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8B%E7%AF%87/" target="_blank" rel="noopener noreferrer">190417-SpringBoot高级篇JdbcTemplate之数据查询下篇</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2019/04/18/190418-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener noreferrer">190418-SpringBoot高级篇JdbcTemplate之数据更新与删除</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/19/200119-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1Transactional/" target="_blank" rel="noopener noreferrer">200119-SpringBoot系列教程之声明式事务Transactional</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/01/20/200120-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">200120-SpringBoot系列教程之事务隔离级别知识点小结</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/02/200202-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener noreferrer">200202-SpringBoot系列教程之事务传递属性</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2020/02/03/200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase/" target="_blank" rel="noopener noreferrer">200203-SpringBoot系列教程之事务不生效的几种case</a></li>
</ul>
<p><strong>源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>实例源码: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>事务</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E4%BA%8B%E5%8A%A1/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">事务</source>
      <description>进阶知识点，如何在Spring容器中使用事务？看这个系列就完了</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>进阶知识点，如何在Spring容器中使用事务？看这个系列就完了</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.DB之基本使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/01.180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/01.180926-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87DB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.DB之基本使用</source>
      <description>现在的完整的后端项目，基本上离不开DB、缓存，接下来开始进入DB篇的系列教程，首先确定我们的目标，一个是知道怎么配置，怎么用；接着就是更高级一点的多个数据源的配置，使用不同的方式来实现CURD（如Mybatis, JPDA, MyCat, Hibernate, Jooq等），数据库不得不谈到的事物管理，锁机制，以及高级一点的分库分表等；然后再进一步则是优秀的框架的学习了，大名鼎鼎的MyBaits的设计思路，Jooq的使用姿势也特别有意思 要学习的东西不少，要写的内容也挺多，先一步步来，本篇主要目的是先搭建一个可以跑DB的基础Demo，为后续的博文开开胃</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>示例</category>
      <pubDate>Wed, 26 Sep 2018 21:52:10 GMT</pubDate>
      <content:encoded><![CDATA[<p>现在的完整的后端项目，基本上离不开DB、缓存，接下来开始进入DB篇的系列教程，首先确定我们的目标，一个是知道怎么配置，怎么用；接着就是更高级一点的多个数据源的配置，使用不同的方式来实现CURD（如Mybatis, JPDA, MyCat, Hibernate, Jooq等），数据库不得不谈到的事物管理，锁机制，以及高级一点的分库分表等；然后再进一步则是优秀的框架的学习了，大名鼎鼎的MyBaits的设计思路，Jooq的使用姿势也特别有意思</p>
<p>要学习的东西不少，要写的内容也挺多，先一步步来，本篇主要目的是先搭建一个可以跑DB的基础Demo，为后续的博文开开胃</p>
<!-- more -->
<h2> I. 基本配置</h2>
<p>首先确认我们的DB采用的是MySql数据库，我们这里通过JdbcTemplate来对DB内容进行操作演示；在开始之前，请先准备好Mysql的安装以及相关配置，下面我们默认已经备好</p>
<h3> 1. 依赖配置</h3>
<p>对于SpringBoot而言，要想操作DB，需要引入如下的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 配置</h3>
<p>测试的MySql的配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试的库名为story, 表名为Subcribe，表结构如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此配置基本完成，具体到我们的项目中，也就是pom中添加两个依赖，设置下properties文件中的参数，然后就可以愉快的使用了</p>
<h2> II. 使用实例</h2>
<p>前面配置完成，接着就来测试，看下是否就真的可以用了</p>
<h3> 1. 测试代码</h3>
<p>直接用比较简单的JdbcTemplate来实现db的操作，至于如何获取这个实例呢？直接注入即可（后面说原因）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们的项目结构比较简单，没有引入web的依赖，所以就把JdbcTemplate的测试放在了Application的构造方法中；执行完毕之后，项目就结束；而这个JdbcTemplate实例，则是由Spring框架来初始化，并注入的</p>
<h3> 2. 结果截图</h3>
<p>整个测试DB使用的项目就完成了，相比较之前的Spring时代，少了n多的xml配置和pom引入，简单了不少，下面是执行的截图</p>
<figure><img src="/imgs/180926/00.jpg" alt="测试结果" tabindex="0" loading="lazy"><figcaption>测试结果</figcaption></figure>
<h3> 3. 默认配置分析</h3>
<p>前面讲配置的博文中，也说到了SpringBoot也一套默认的配置，具体博文可以查看: <a href="http://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">180925-SpringBoot基础篇配置信息之默认配置</a></p>
<p>我们来看一下db相关的默认属性为</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的默认配置中东西挺多的，首先需要过滤出我们必要的几个参数</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看出，并没有给默认值，所以我们想要使用MySql，就必须填上必要的参数了（url, usernmae必须的），即我们只设置这两个参数，项目就可以愉快的玩耍了 （工程源码中只保留了两个基本参数）</p>
<h2> III. 小结</h2>
<p>本篇内容相对简单，主要介绍了如何使用SpringBoot搭建一个简单的可读写DB的示例DEMO，总得来说，配置很简单了</p>
<ul>
<li>pom依赖引入：<code>spring-boot-starter-jdbc</code>, <code>mysql-connector-java</code></li>
<li>数据库配置指定：<code>spring.datasource.url</code>, <code>spring.datasource.username</code> 这两个参数为必选</li>
<li>注入JdbcTemplate开始使用</li>
</ul>
<p>第一步是搭建起来了，接下来自然而然就有几个问题了</p>
<ul>
<li>如果项目需要连接多个不同的数据库怎么办?</li>
<li>JdbcTemplate操作DB的方式不太简单，用更高级的方式可以怎么玩？</li>
<li>听说druid号称是java中最好的数据库连接池，那这个到底是啥，要怎么用？有没有其他类似的东西呢？</li>
<li>关于db的使用相关姿势问题....</li>
</ul>
<p>基础环境搭建好，接下来开始上菜</p>
<h2> IV. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/180926/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2.SpringBoot+Mysql 无法保存emoj表情</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/02.191210-SpringBoot-Mysql-%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98emoj%E8%A1%A8%E6%83%85%EF%BC%9F.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/02.191210-SpringBoot-Mysql-%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98emoj%E8%A1%A8%E6%83%85%EF%BC%9F.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.SpringBoot+Mysql 无法保存emoj表情</source>
      <description>尤记得很久以前，想存emoj表情到mysql中，需要额外的将emoj表情转码之后保存，每次读取时，再解码还原成一下；每次这种sb的操作，真心感觉心塞，那么有没有办法直接存呢？ mysql本身可以通过选择编码集（如utfbmb4）来支持emoj表情，然而今天遇到了一个相当鬼畜的问题，表中可以直接写入emoj表情，但是通过spring boot代码塞入的emoj时，却抛出异常： Caused by: java.sql.SQLException: Incorrect string value: &amp;apos;\xF0\x9F\x98\x9D\xE6\xB1...&amp;apos; for column &amp;apos;nick&amp;apos; at row 1 	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1084) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4232) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4164) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2615) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2776) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2838) ~[mysql-connector-java-5.1.30.jar:na] 	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2082) ~[mysql-connector-java-5.1.30.jar:na] 接下来演示一下正确的使用姿势，以及导致上面问题的错误case，避免大家重复采坑</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>采坑记录</category>
      <pubDate>Tue, 10 Dec 2019 18:03:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>尤记得很久以前，想存emoj表情到mysql中，需要额外的将emoj表情转码之后保存，每次读取时，再解码还原成一下；每次这种sb的操作，真心感觉心塞，那么有没有办法直接存呢？</p>
<p>mysql本身可以通过选择编码集（如utfbmb4）来支持emoj表情，然而今天遇到了一个相当鬼畜的问题，表中可以直接写入emoj表情，但是通过spring boot代码塞入的emoj时，却抛出异常：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来演示一下正确的使用姿势，以及导致上面问题的错误case，避免大家重复采坑</p>
<!-- more -->
<h2> I. Emoj表情支持之旅</h2>
<p>接下来我们的目标是可以直接向mysql中读取或写入emoj表情</p>
<h3> 1. 表字符集</h3>
<p>首先针对mysql表，需要指定字符集为<code>utfbmb4</code></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面直接设置表的字符集为<code>utf8mb4</code>，如果某个表已经存在，但是字符集不是utf8mb4，这种case下我们也可以单独的设置某个列的编码如下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上设置之后，我们可以直接在这个表中添加emoj</p>
<figure><img src="/imgs/191210/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. SpringBoot支持</h3>
<p>接下来进入正题，springboot项目，如何支持emoj的插入；首先看一下项目依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用的是<code>2.2.1.RELEASE</code>版本，请确保引入了依赖<code>spring-boot-starter-jdbc</code> 与 <code>mysql-connector-java</code></p>
<p>然后配置db相关属性, <code>application.properties</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以愉快的进行测试了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测结果如下</p>
<figure><img src="/imgs/191210/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这个不已经插入成功了么，那么问题来了，本文开头的那个异常是怎么回事呢</p>
<h3> 3. 场景复现</h3>
<p>出现文章开头的问题，主要是由于<code>mysql-connector-java</code>的版本问题导致的，我们来复现一下，首先将版本指定为<code>5.1.30</code> (因为我们内部使用的就是这个版本，所以采坑了...)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次需要在环境配置中，指定一下<code>driver-class-name</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong></p>
<p>这里需要说明一下，在更高的<code>mysql-connector-java</code>版本中，已经改成<code>com.mysql.cj.jdbc.Driver</code>这个类了；如果依旧配置上面的Driver，在执行时会有一行提示</p>
<figure><img src="/imgs/191210/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后再次执行前面的测试代码，异常就来了</p>
<figure><img src="/imgs/191210/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 4. 小结</h3>
<p>在mysql中存入emoj表情的场景可以说比较多了，毕竟21世纪了，不支持emoj的应用是没有前途的；通过前面的case，即介绍了如何正确的让springboot应用支持emoj表情，也给出了一个由于版本问题导致的坑</p>
<p>emoj支持步骤</p>
<ul>
<li>首先是源头支持，需要修改mysql的表字符集；或者修改某些列的字符集，设置为utf8mb4</li>
<li>注意引入的<code>mysql-connector-java</code>版本，务必选择比较新的版本，
<ul>
<li>如<code>springboot2.2.1.RELEASE</code>默认提供的版本为<code>8.0.18</code></li>
<li>而我们演示中的 <code>5.1.30</code> 则不支持emoj插入</li>
</ul>
</li>
<li>驱动类，新版中已经使用<code>com.mysql.cj.jdbc.Driver</code>替换之前的<code>com.mysql.jdbc.Driver</code></li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码模块: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/100-mysql" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/100-mysql</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191210/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.借助Redis实现排行榜功能（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/08.181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/08.181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.借助Redis实现排行榜功能（应用篇）</source>
      <description>更多Spring文章，欢迎点击 一灰灰Blog-Spring专题 在一些游戏和活动中，当涉及到社交元素的时候，排行榜可以说是一个很常见的需求场景了，就我们通常见到的排行榜而言，会提供以下基本功能 全球榜单，对所有用户根据积分进行排名，并在榜单上展示前多少 个人排名，用户查询自己所在榜单的位置，并获知周边小伙伴的积分，方便自己比较和超越 实时更新，用户的积分实时更改，榜单也需要实时更新 上面可以说是一个排行榜需要实现的几个基本要素了，正好我们刚讲到了redis这一节，本篇则开始实战，详细描述如何借助redis来实现一份全球排行榜</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <category>应用篇</category>
      <pubDate>Tue, 25 Dec 2018 22:02:13 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>更多Spring文章，欢迎点击 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">一灰灰Blog-Spring专题</a></p>
</blockquote>
<p>在一些游戏和活动中，当涉及到社交元素的时候，排行榜可以说是一个很常见的需求场景了，就我们通常见到的排行榜而言，会提供以下基本功能</p>
<ul>
<li>全球榜单，对所有用户根据积分进行排名，并在榜单上展示前多少</li>
<li>个人排名，用户查询自己所在榜单的位置，并获知周边小伙伴的积分，方便自己比较和超越</li>
<li>实时更新，用户的积分实时更改，榜单也需要实时更新</li>
</ul>
<p>上面可以说是一个排行榜需要实现的几个基本要素了，正好我们刚讲到了redis这一节，本篇则开始实战，详细描述如何借助redis来实现一份全球排行榜</p>
<!-- more -->
<h2> I. 方案设计</h2>
<p>在进行方案设计之前，先模拟一个真实的应用场景，然后进行辅助设计与实现</p>
<h3> 1. 业务场景说明</h3>
<p>以前一段时间特别🔥的跳一跳这个小游戏进行说明，假设我们这个游戏用户遍布全球，因此我们要设计一个全球的榜单，每个玩家都会根据自己的战绩在排行榜中获取一个排名，我们需要支持全球榜单的查询，自己排位的查询这两种最基本的查询场景；此外当我的分数比上一次的高时，我需要更新我的积分，重新获得我的排名；</p>
<p>此外也会有一些高级的统计，比如哪个分段的人数最多，什么分段是瓶颈点，再根据地理位置计算平均分等等</p>
<p>本篇博文主要内容将放在排行榜的设计与实现上；至于高级的功能实现，后续有机会再说</p>
<h3> 2. 数据结构</h3>
<p>因为排行榜的功能比较简单了，也不需要什么复杂的结构设计，也没有什么复杂的交互，因此我们需要确认的无非就是数据结构 + 存储单元</p>
<p><strong>存储单元</strong></p>
<p>表示排行榜中每一位上应该持有的信息，一个最简单的如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据结构</strong></p>
<p>排行榜，一般而言都是连续的，借此我们可以联想到一个合适的数据结构LinkedList，好处在于排名变动时，不需要数组的拷贝</p>
<figure><img src="http://spring.hhui.top/spring-blog/imgs/181225/00.jpg" alt="arch" tabindex="0" loading="lazy"><figcaption>arch</figcaption></figure>
<p>上图演示，当一个用户积分改变时，需要向前遍历找到合适的位置，插入并获取新的排名, 在更新和插入时，相比较于ArrayList要好很多，但依然有以下几个缺陷</p>
<p><strong>问题1：用户如何获取自己的排名？</strong></p>
<p>使用<code>LinkedList</code>在更新插入和删除的带来优势之外，在随机获取元素的支持会差一点，最差的情况就是从头到尾进行扫描</p>
<p><strong>问题2：并发支持的问题？</strong></p>
<p>当有多个用户同时更新score时，并发的更新排名问题就比较突出了，当然可以使用jdk中类似写时拷贝数组的方案</p>
<p>上面是我们自己来实现这个数据结构时，会遇到的一些问题，当然我们的主题是借助redis来实现排行榜，下面则来看下，利用redis可以怎么简单的支持我们的需求场景</p>
<h3> 3. redis使用方案</h3>
<p>这里主要使用的是redis的ZSET数据结构，带权重的集合，下面分析一下可能性</p>
<ul>
<li>set: 集合确保里面元素的唯一性</li>
<li>权重：这个可以看做我们的score，这样每个元素都有一个score；</li>
<li>zset：根据score进行排序的集合</li>
</ul>
<p>从zset的特性来看，我们每个用户的积分，丢到zset中，就是一个带权重的元素，而且是已经排好序的了，只需要获取元素对应的index，就是我们预期的排名</p>
<h2> II. 功能实现</h2>
<p>再具体的实现之前，可以先查看一下redis中zset的相关方法和操作姿势：<a href="http://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">SpringBoot高级篇Redis之ZSet数据结构使用姿势</a></p>
<p>我们主要是借助zset提供的一些方法来实现排行榜的需求，下面的具体方法设计中，也会有相关说明</p>
<h3> 0. 前提准备</h3>
<p>首先准备好redis环境，spring项目搭建好，然后配置好redisTemplate</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 用户上传积分</h3>
<p>上传用户积分，然而zset中有一点需要注意的是其排行是根据score进行升序排列，这个就和我们实际的情况不太一样了；为了和实际情况一致，可以将score取反；另外一个就是排行默认是从0开始的，这个与我们的实际也不太一样，需要+1</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现，主要利用了zset的两个方法，一个是添加元素，一个是查询排名，对应的redis操作方法如下，</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 获取个人排名</h3>
<p>获取个人排行信息，主要就是两个一个是排名一个是积分；需要注意的是当用户没有积分时（即没有上榜时），需要额外处理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的封装中，除了使用前面的获取用户排名之外，还有获取用户积分</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 获取个人周边用户积分及排行信息</h3>
<p>有了前面的基础之后，这个就比较简单了，首先获取用户的个人排名，然后查询固定排名段的数据即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面的实现，获取用户排名之后，就可以计算要查询的排名范围<code>[Math.max(0, rank.getRank() - n - 1), rank.getRank() + n - 1]</code></p>
<p>其次需要注意的如何将返回的结果进行封装，上面写了个转换类，主要起始排行榜信息</p>
<h3> 4. 获取topn排行榜</h3>
<p>上面的理解之后，这个就很简答了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 测试小结</h2>
<p>首先准备一个测试脚本，批量的插入一下积分，用于后续的查询更新使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1. 测试</h3>
<p>上面执行完毕之后，排行榜中应该就有三十条数据，接下来我们开始逐个接口测试，首先获取top10排行</p>
<p>对应的rest接口如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://spring.hhui.top/spring-blog/imgs/181225/00.gif" alt="topn" tabindex="0" loading="lazy"><figcaption>topn</figcaption></figure>
<p>接下来我们挑选第15名，获取对应的排行榜信息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们从redis中获取第15名的userId，然后再来查询</p>
<figure><img src="http://spring.hhui.top/spring-blog/imgs/181225/01.gif" alt="rank" tabindex="0" loading="lazy"><figcaption>rank</figcaption></figure>
<p>然后尝试修改下他的积分，改大一点，将score改成80分，则会排到第五名</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://spring.hhui.top/spring-blog/imgs/181225/02.gif" alt="update" tabindex="0" loading="lazy"><figcaption>update</figcaption></figure>
<p>最后我们查询下这个用户周边2个的排名信息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://spring.hhui.top/spring-blog/imgs/181225/03.gif" alt="around" tabindex="0" loading="lazy"><figcaption>around</figcaption></figure>
<h3> 2. 小结</h3>
<p>上面利用redis的zset实现了排行榜的基本功能，主要借助下面三个方法</p>
<ul>
<li>range 获取范围排行信息</li>
<li>score 获取对应的score</li>
<li>range 获取对应的排名</li>
</ul>
<p>虽然实现了基本功能，但是问题还是有不少的</p>
<ul>
<li>上面的实现，redis的复合操作，原子性问题</li>
<li>由原子性问题导致并发安全问题</li>
<li>性能怎么样需要测试</li>
</ul>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/120-redis-ranklist" target="_blank" rel="noopener noreferrer">spring-case/120-redis-ranklist</a></li>
</ul>
]]></content:encoded>
      <enclosure url="http://spring.hhui.top/spring-blog/imgs/181225/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>4.借助Redis搭建一个简单站点统计服务（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/09.190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/09.190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">4.借助Redis搭建一个简单站点统计服务（应用篇）</source>
      <description>判断一个网站值不值钱的一个重要标准就是看pv/uv，那么你知道pv,uv是怎么统计的么？当然现在有第三方做的比较完善的可以直接使用，但如果让我们自己来实现这么一个功能，应该怎么做呢？ 本篇内容较长，源码如右 ➡️ https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <category>应用篇</category>
      <pubDate>Mon, 13 May 2019 19:09:19 GMT</pubDate>
      <content:encoded><![CDATA[<p>判断一个网站值不值钱的一个重要标准就是看pv/uv，那么你知道pv,uv是怎么统计的么？当然现在有第三方做的比较完善的可以直接使用，但如果让我们自己来实现这么一个功能，应该怎么做呢？</p>
<p>本篇内容较长，源码如右 ➡️  <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount</a></p>
<!-- more -->
<h2> I. 背景及需求</h2>
<p>为了看看我的博客是不是我一个人的单机游戏，所以就想着统计一下总的访问量，每日的访问人数，哪些博文又是大家感兴趣的，点击得多的；</p>
<p>因此就萌发了自己撸一个pv/uv统计的服务，当然我这个也不需要特别完善高大上，能满足我自己的基本需要就可以了</p>
<ul>
<li>希望统计站点(域名）总访问次数</li>
<li>希望统计站点总的访问人数，当前访问者在访问人数中的排名（即这个ip是所有访问ip中的第多少位访问的这个站点）</li>
<li>每个子页面都有访问次数，访问总人数，当前ip访问的排名统计</li>
<li>同一个ip，同一天内访问同一个子页面，pv次数只加1次；隔天之后，再次访问pv+1</li>
</ul>
<h2> II. 方案设计</h2>
<p>前面的背景和需求，可以说大致说明了我们要做个什么东西，以及需要注意哪些事项，再进行方案设计的过程中，则需要对需求进行详细拆解</p>
<h3> 1. 术语说明</h3>
<p>前面提到了pv,uv，在我们的实际实现中，会发现这个服务中对于pv,uv的定义和标准定义并不是完全一致的，下面进行说明</p>
<h4> a. pv</h4>
<p><code>page viste</code>, 每个页面的访问次数，在本服务中，我们的pv指的是总量，即从开始接入时，到现在总的访问次数</p>
<p>但是这里有个限制： <strong>一个合法的ip，一天之内pv统计次数只能+1次</strong></p>
<ul>
<li>根据ip进行区分，因此需要获取访问者ip</li>
<li>同一天内，这个ip访问相同的URI，只能算一次有效pv；第二天之后，再次访问，则可以再算一次有效pv</li>
</ul>
<h4> b. hot</h4>
<p>前面的pv针对ip进行了限制，一个ip同一天的访问，只能计算一次，大部分情况下这种统计并没有什么问题，但是如果一个文章写得特别有参考意义，导致有人重复的看，仔细的看，换着花样的刷新看，这个时候统计下总的访问次数是不是也挺好的</p>
<p>因此在这个服务中，引入了hot（热度）的概念，对于一个uri而言，只要一次点击，hot+1</p>
<h4> c. uv</h4>
<p><code>unique visitor</code>, 这个就是统计URI的访问ip数</p>
<h3> 2. 流程图</h3>
<p>通过前面三个术语的定义，我们的操作流程就相对清晰了，我们的服务接收一个IP和URI，然后操作对应的pv,uv,hot并返回</p>
<ul>
<li>首先判断这个ip是否为第一次访问这个URI</li>
<li>是，则pv+1, uv+1, hot+1</li>
<li>否，表示之前访问过，uv就不能变了
<ul>
<li>判断是否今天第一次访问</li>
<li>是，今天访问过，那么pv不变，hot+1</li>
<li>否，之前访问过，今天没有，pv可以+1， hot+1</li>
</ul>
</li>
</ul>
<p>对应的流程图如下</p>
<figure><img src="/imgs/190513/00.jpg" alt="流程图" tabindex="0" loading="lazy"><figcaption>流程图</figcaption></figure>
<h3> 3. 数据结构</h3>
<p>流程清晰之后，接下来就需要看下pv,uv,hot三个数据怎么存了</p>
<h4> a. pv</h4>
<p>pv保存的就是访问次数，与ip无关，所以kv存储就可以满足我们的需求了，这里的key为uri，value则保存pv的值</p>
<h4> b. hot</h4>
<p>hot和pv类似，同样用kv可以满足要求</p>
<h4> c. uv</h4>
<p>uv这里有两个数据，一个是uv总数，要给是这个ip的访问排名，redis中有个zset数据结构正好就可以做这个</p>
<p>zset数据结构中，我们定义value为ip，score为ip的排名，那么uv就是最大的score了</p>
<h4> d. 结构图</h4>
<figure><img src="/imgs/190513/01.jpg" alt="流程图" tabindex="0" loading="lazy"><figcaption>流程图</figcaption></figure>
<h3> 4. 方案设计</h3>
<p>流程清晰，结构设计出来之后，就可以进入具体的方案设计环节了，在这个环节中，我们引入一个app的维度，这样我们的服务就可以通用了；</p>
<p>每个使用者都申请一个app，那么这个使用者的请求的所有站点统计数据，都关联到这个app上，这样也有利于后续统计了</p>
<h4> a. 接口API</h4>
<p>引入了app之后，结合前面的两个参数ip + URI，我们的请求参数就清晰了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们返回的数据，pv + uv + rank + hot，所以返回的基础VO如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外需要注意一点的是，发起一个子页面的请求时，这个时候我们基于域名的站点总数统计也应该被触发（简单来说，访问<code>http://spring.hhui.top/spring-blog/</code>时，不仅这个uri的统计需要更新， <code>spring.hhui.top</code>这个域名的pv,uv,hot也需要随之统计）</p>
<p>因此我们最终的返回对象应该是</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有输出，又返回，那么访问api就简单了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. hot相关api</h4>
<p>hot数据结构为hash，每次请求过来，都是次数+1，因此直接使用redis的 <code>hIncrBy</code>，实现计数+1，并返回最终的计数</p>
<ul>
<li>key: <code>"hot_cnt_" + app</code> 作为hash的key</li>
<li>field: 使用URI作为hash的field</li>
<li>value: 保存具体的hot，整型</li>
</ul>
<figure><img src="/imgs/190513/02.jpg" alt="hot api" tabindex="0" loading="lazy"><figcaption>hot api</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. pv相关api</h4>
<p>pv与hot不一样的是并不是每次都需要计数+1，所以它需要有一个查询pv的接口，和一个计数+1的接口</p>
<ul>
<li>key: <code>"site_cnt_" + app</code> 作为hash的key</li>
<li>field: 使用URI作为hash的field</li>
<li>value: 保存具体的pv，整型</li>
</ul>
<figure><img src="/imgs/190513/03.jpg" alt="pv api" tabindex="0" loading="lazy"><figcaption>pv api</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. uv相关api</h4>
<p>前面说到uv采用的是zset数据结构，其中ip作为value，排名作为score；所以uv就是最大的score</p>
<ul>
<li>key: 根据app和uri来确定uv的key</li>
<li>value: 存储访问者ip（ipv4格式的）</li>
<li>score: 排名，整型</li>
</ul>
<figure><img src="/imgs/190513/04.jpg" alt="uv api" tabindex="0" loading="lazy"><figcaption>uv api</figcaption></figure>
<p>因为uv需要返回两个结构，所以我们的返回需要注意</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. 今日是否访问</h4>
<p>前面的都还算比较简单，接下来有个非常有意思的地方了，如何判断这个ip，今天访问没访问？</p>
<p><strong>方案一</strong></p>
<p>要实现这个功能，一个自然而然的想法就出来了，直接kv就行了</p>
<ul>
<li>key: <code>uri_年月日_ip</code></li>
<li>value: 1</li>
</ul>
<p>如果value存在，表示今天访问过，如果不存在，则没有访问过</p>
<p><strong>方案二</strong></p>
<p>前面那个倒是没啥问题，如果我希望统计今天某个uri的ip访问数，上面的就不太好处理，很容易想到用hash来替换</p>
<ul>
<li>key: <code>uri_年月日</code></li>
<li>field: <code>ip</code></li>
<li>value: 1</li>
</ul>
<p>同样value存在，则表示今天访问过；否则没有访问过</p>
<p>如果需要统计今天访问的总数，hlen一把就可以；还可以获取今天所有访问过的ip</p>
<p><strong>方案三</strong></p>
<p>前面的方案看似挺好的，但是有个缺陷，如果我这个站点特别火，每天几百万的uv，这个存储量就有点夸张了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面简单的计算可以看出这存储开销对于比较火的站点而言，有点吓人；然后可以找其他的存储方式了，所以bitmap可以隆重登场了</p>
<figure><img src="/imgs/190513/05.jpg" alt="bitmap" tabindex="0" loading="lazy"><figcaption>bitmap</figcaption></figure>
<p>我们将位数组分成四节，分别于ip的四段对应，因为ipv4每一段取值是(0-2^8)，所以我们的位数组，也只需要(4 * 8b = 4B)，相比较前面的方案来说，存储空间大大减少</p>
<p>看到上面这个结构，会有一个疑问，为什么分成四节？将ip转成整形，作为下标，一个就可以了</p>
<ul>
<li>答：将ip转为整型，取值将是 (0 - 2^32)，需要的bitmap空间为<code>4Gb</code>，显然不如上面优雅</li>
</ul>
<div class="hint-container danger">
<p class="hint-container-title">警告</p>
<p><strong>重要说明</strong></p>
<p>这种方案有个致命的问题，就是误判，如</p>
<ul>
<li>192.168.1.1</li>
<li>192.168.3.3</li>
</ul>
<p>这两个ip访问之后，会导致误判 <code>192.168.1.3</code> 也访问了，所以不要进行拆分；当不拆分直接bitmap时，固定消耗为 <code>2^32b = 512M</code>，实际上更推荐的做法则是前面介绍的HyperLogLog</p>
<p>下面的实现主要看一下设计思路以及redis的使用，请不要直接应用，会有坑，会有坑，会有坑！！！</p>
</div>
<hr>
<p><strong>方案确定</strong></p>
<p>上面三个方案中，我们选择了第三个，对应的api设计也比较简单了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> III. 服务实现</h2>
<p>前面接口设计出来，按照既定思路实现就属于比较轻松的环节了</p>
<h4> 1. pv接口实现</h4>
<p>pv两个接口，一个访问，一个计数+1，都可以直接使用redisTemplate的基础操作完成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. hot接口实现</h3>
<p>只有一个计数+1的接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. uv接口实现</h3>
<p>uv的获取会麻烦一点，首先获取uv值，然后获取ip对应的排名；如果uv为0，排名也就不需要再获取了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 今天是否访问过</h3>
<p>前面选择位数组方式来记录是否访问过，这里的实现选择了简单的实现方式，利用四个bitmap来分别对应ip的四段；（实际上一个也可以实现，可以想一想应该怎么做）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. api接口实现</h3>
<p>前面基本的接口实现之后，api就是流程图的翻译了，也没有什么特别值得说到的地方，唯一需要注意的就是URI的解析，域名作为站点；uri由path + segment构成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> IV. 测试与小结</h2>
<h3> 1. 测试</h3>
<p>搭建一个简单的web服务，开始测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. 首次访问</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/06.jpg" alt="test a" tabindex="0" loading="lazy"><figcaption>test a</figcaption></figure>
<h4> b. 再次访问</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/07.jpg" alt="test b" tabindex="0" loading="lazy"><figcaption>test b</figcaption></figure>
<h4> c. 同ip，不同URI</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/08.jpg" alt="test c" tabindex="0" loading="lazy"><figcaption>test c</figcaption></figure>
<h4> d. 不同ip，接上一个URI</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/09.jpg" alt="test d" tabindex="0" loading="lazy"><figcaption>test d</figcaption></figure>
<h4> e. 上一个ip，换第一个uri</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/10.jpg" alt="test e" tabindex="0" loading="lazy"><figcaption>test e</figcaption></figure>
<h4> f. 第二天访问</h4>
<p>真要第二天操作有点麻烦，为了验证，直接干掉今天的占位标记</p>
<figure><img src="/imgs/190513/11.jpg" alt="rest" tabindex="0" loading="lazy"><figcaption>rest</figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/190513/12.jpg" alt="test f" tabindex="0" loading="lazy"><figcaption>test f</figcaption></figure>
<h3> 2. 小结</h3>
<p>本文可以说是redis学习之后，一个挺好的应用场景，涉及到了我们常用和不常用的几个数据结构，包括hash,zset,bitmap, 其中关于bitmap的使用个人感觉还是非常有意思的；</p>
<p>对于redis操作不太熟的，可以参考下前面几篇博文</p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">181029-SpringBoot高级篇Redis之基本配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">181101-SpringBoot高级篇Redis之Jedis配置</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">181108-SpringBoot高级篇Redis之String数据结构的读写</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181109-SpringBoot高级篇Redis之List数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181202-SpringBoot高级篇Redis之Hash数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181211-SpringBoot高级篇Redis之Set数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181212-SpringBoot高级篇Redis之ZSet数据结构使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">181225-SpringBoot应用篇之借助Redis实现排行榜功能</a></li>
</ul>
<p><strong>注意</strong></p>
<p>上面这个服务，在实际使用中，需要考虑并发问题，很明显我们上的设计并不是多线程安全的，也就是说，在并发量大的时候，获取的数据极有可能和预期的不一致</p>
<p><strong>扩展</strong></p>
<p>上文的设计中，每个uri都有一组位图，我们可以通过遍历，获取value为1的下标，来统计这个页面今天的pv数，以及更详细的今天哪些ip访问过；同样也可以分析站点的今日UV数，以及对应的访问ip</p>
<p><strong>说明</strong></p>
<p>文中采用分段计算，判断ip是否访问过的数据模型是有问题的，比如 192.1.1.1 和 192.0.2.1两个ip访问过之后，会错误的认为 192.1.2.1 这个ip也访问过； 请不要直接在生产中使用上面的做法，会有坑；如有需要，考虑HyperLogLog吧</p>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/190513/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>5.借助redis来实现延时队列（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/19.210805-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E5%80%9F%E5%8A%A9redis%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/19.210805-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E5%80%9F%E5%8A%A9redis%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.借助redis来实现延时队列（应用篇）</source>
      <description>延时队列，相信各位小伙伴并不会陌生，jdk原生提供了延时队列的使用，当然我们这里介绍的不是这种；在实际的项目中，如果我们有延时队列的场景，可以怎样去实现呢 举一个简单的例子，如下单15分钟内，若没有支付，则自动取消订单 本文将介绍一种非常非常简单的实现方式</description>
      <category>SpringBoot</category>
      <category>DB系列</category>
      <category>Redis</category>
      <category>应用篇</category>
      <pubDate>Thu, 05 Aug 2021 08:35:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>延时队列，相信各位小伙伴并不会陌生，jdk原生提供了延时队列的使用，当然我们这里介绍的不是这种；在实际的项目中，如果我们有延时队列的场景，可以怎样去实现呢</p>
<p>举一个简单的例子，如下单15分钟内，若没有支付，则自动取消订单</p>
<p>本文将介绍一种非常非常简单的实现方式</p>
<!-- more -->
<h2> I. 方案设计</h2>
<p>要实现15分钟后自动取消订单，这个也太简单了，来给出一段神级代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好的，本文就此结束（开玩笑....）</p>
<p>忽略上面的段子，接下来想一想，如果让我们来实现一个延时队列，可以怎么整？</p>
<ul>
<li>单机：
<ul>
<li>DelayQueue</li>
<li>定时任务</li>
</ul>
</li>
<li>分布式:
<ul>
<li>Quartz定时任务</li>
<li>rabbitmq延时队列</li>
<li>redis zset</li>
<li>redis 过期回调</li>
<li>时间轮</li>
</ul>
</li>
</ul>
<p>首先我们这里排除掉单机版，至于原因，现在单体单实例应用实在不多见了，直接来看多实例的情况吧</p>
<p>在上面的几种方案中，重心放在redis上，两种case，下面分别介绍一下</p>
<h3> 1. redis过期时间</h3>
<p>我们知道，在使用redis做缓存时，可以设置失效时间，借助redis的失效事件，我们可以来实现延时队列的场景</p>
<p>比如，现在一个订单，我们在redis中新加入一个订单id，失效时间设置为15分钟；当支付成功之后，主动删除这个缓存；若一直没有付钱，则15分钟后，触发一个过期事件，然后订阅这个事件，来执行取消订单</p>
<p>上面这种实现，有两个问题</p>
<ul>
<li>key失效监听，可能存在大量的无效信息</li>
<li>广播方式消费事件，多实例接收到这个事件，怎么防并发？或者没有一个实例接收到这个事件，那么这个取消订单就会漏掉</li>
</ul>
<p>显然上面的第二点，漏消息是不能接受的</p>
<h3> 2. redis zset</h3>
<p>zset属于redis提供的几个基本数据结构中的一种，它的特点是有 <code>value + score</code></p>
<p>如果我们想使用zset拉实现演示队列，那么一个可选的方案就是将score设置为触发的时间戳，value为业务值</p>
<p>然后写一个定时任务，不断的从zset中，取出score小于当前时间戳的数据，任务它们都是已经到期可以执行的</p>
<p>借助这个方案，可以相对简单的实现一个演示队列了</p>
<h2> II. redis演示队列实现</h2>
<h3> 1. 环境配置</h3>
<p>接下来我们将以redis的zset来实现延时队列，本文借助SpringBoot来搭建一个演示工程，使用的基本配置如下</p>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>核心依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis使用默认的配置，本机 <code>localhost + 6379</code></p>
<h3> 2. 核心实现</h3>
<p>借助redis zset来实现延时队列，具体的实现代码就很简单了，无非是从zset中取出score小于当前时间戳的数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现，有一个点需要说一下</p>
<p>zset：每次查询时取了三个数据，然后遍历获取到的数据，依次尝试去删除，若删除成功，则表示当前实例抢占到了这个消息</p>
<p><strong>为什么这样设计?</strong></p>
<p>这里有两个点，先解释第一个，<strong>为啥先查后删</strong></p>
<p>如果我们按照正常的实现流程，每次从zset中取一个，但是无法保证这个时候就只有我一个人拿到了这个数据，在多实例的场景下，可能存在多个实例同时拿到了它，那么如何才能表示只有我一个人霸占了她呢（忽然进入言情的世界😓）</p>
<p>借助redis的单线程机制，只可能有一个实例会删除成功，所以拿到并删除成功的那个小伙伴，就是最终的幸运儿；</p>
<p>因此实现细节就是先查，后删，若删除成功，表示获取成功；否则表示被其他的实例捷足先登</p>
<p>接下来再看第二个，<strong>为啥一次拿三个</strong></p>
<p>从上面的分析可以看出，如果我一次只拿一个，那么我抢占到的几率并不太大，特别是当实例比较多时，可能会做多次的无效操作；为了减少这个可能性，所以我一次多拿几个做备选，这样抢占到的概率就会高一些，至于为什么是3，这个就看实际的实例与定时任务的执行间隔了</p>
<h3> 3. 写入队列</h3>
<p>上面是从队列中拿数据，有拿当然得有写，所以我们简单的封装一下写入队列的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 定时取演示队列消息</h3>
<p>接下来就是一个定时任务，不断的调用上面的实现，从zset中获取到期的数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的定时任务，直接借助Spring的<code>@Schedule</code>来实现，遍历所有的topic，捞出数据之后，通过spring的 <code>event/listener</code>事件机制来实现消息处理的解耦</p>
<h3> 5. 消息消费</h3>
<p>最终就是我们的消息消费逻辑了，主要就是消费前面抛出的<code>DelayMsg</code>，我们这里借助AOP来实现消息过滤</p>
<p>定义一个注解<code>Consumer</code>，用来指定消费哪个topic</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这个注解上面还有 <code>@EventListener</code>，表明它可以监听的spring的事件</p>
<p>aop拦截逻辑，根据topic进行过滤</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 测试demo</h3>
<p>最后写一个测试demo，验证下上面的实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210805/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 6. 小结</h3>
<p>本文属于一个实战小技巧，借助redis的zset来灵活的实现一个简单的延时队列，实现倒是没有太大的难度，其中的一些小细节还是挺有意思的，好的，今天分享到此over，欢迎各位老铁来撩，公众号 <code>一灰灰blog</code> 你值得拥有</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码：<a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/126-redis-delay-list" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/126-redis-delay-list</a></li>
</ul>
<h3> 1. 微信公众号：一灰灰Blog</h3>
<p>尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>
<p>下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛</p>
<ul>
<li>一灰灰Blog个人博客 <a href="https://blog.hhui.top" target="_blank" rel="noopener noreferrer">https://blog.hhui.top</a></li>
<li>一灰灰Blog-Spring专题博客 <a href="http://spring.hhui.top" target="_blank" rel="noopener noreferrer">http://spring.hhui.top</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210805/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.Redis实现分布式锁（应用篇）</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/20.201030-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%89.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/20.201030-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%89.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.Redis实现分布式锁（应用篇）</source>
      <description>分布式锁，应用场景可以说是比较多的，网上随便一查就能搜到很多的文章；那么这里为什么跟着来一篇呢，原因也很简单，别人写的再好再清晰，那也是别人的知识点；自己思考过的、写过的才属于自己； 本篇虽然名为redis实现分布式锁，但也会说一下基于数据库实现分布式锁的思路（至于ZK实现的分布式锁，没玩过zk，就不抄了）</description>
      <category>redis</category>
      <category>分布式锁</category>
      <pubDate>Fri, 30 Oct 2020 20:04:58 GMT</pubDate>
      <content:encoded><![CDATA[<p>分布式锁，应用场景可以说是比较多的，网上随便一查就能搜到很多的文章；那么这里为什么跟着来一篇呢，原因也很简单，别人写的再好再清晰，那也是别人的知识点；自己思考过的、写过的才属于自己；</p>
<p>本篇虽然名为redis实现分布式锁，但也会说一下基于数据库实现分布式锁的思路（至于ZK实现的分布式锁，没玩过zk，就不抄了）</p>
<!-- more -->
<h2> I. 分布式锁</h2>
<h3> 1. 介绍</h3>
<p>锁，这个名词或者动词可以说频繁的出现在我们的编程生涯中，当然我们最常见的就是单体应用中的<code>synchronized</code>以及<code>Lock</code>，主要就是为了确保某一段代码逻辑（特别是写逻辑）一次只能被一个业务方调用执行</p>
<p>而分布式锁最大的特点就是，希望即便是在分布式的环境中，即便有多个应用、多个实例操作某段业务逻辑，也能确保这段逻辑的"串行"执行</p>
<h3> 2. 应用场景</h3>
<p>分布式锁最主要的特点就是希望能确保，在某一时间段内，只能有一个业务方，访问某段业务逻辑</p>
<p>从上面的描述，一个非常典型的case就是电商里面的下单减库存</p>
<p>我们在创建订单之前，得确保库存足够，假设有这么一个场景</p>
<ul>
<li>商品只有2个库存</li>
<li>用户A，下单买两个，去判断库存为2，可以购买</li>
<li>用户B，下单买1个，去判断库存，发现也是2，可以购买</li>
<li>当用户A,B的订单都完成了，最终库存变成-1了，导致超卖</li>
</ul>
<p>如果我们使用分布式锁，把这段逻辑包裹住</p>
<ul>
<li>用户A，下单买2个，抢占分布式锁成功，判断库存为2</li>
<li>用户B，下单买1个，抢占分布式锁，已经被A占用了，抢不到，等待；直到用户A释放</li>
<li>用户A，订单生成，库存-2，现在真实库存变为0，释放锁</li>
<li>用户B，多次尝试获取锁，成功之后，再去看库存，为0，不满足，下单失败</li>
</ul>
<h3> 3. DB版分布式锁</h3>
<p>这种方式我个人没有用过，根据网上查询到一些资料，从原理上进行简单的说明</p>
<p><strong>唯一键约束方式</strong></p>
<p>借助mysql的唯一键约束，确保一次只能有一个<code>insert sql</code>是成功的，操作成功的就认为是成功的抢了锁；如果插入失败，则表示没有抢占；删除这条记录就表示释放锁</p>
<p>这种方式实现比较简单，但是问题比较多</p>
<ul>
<li>如果抢占锁的小伙伴一直不删除这条记录，那这个锁就永不释放么？</li>
<li>抢占锁失败直接抛异常，一个是不友好，另外一个就是非阻塞方式，需要我们自己来循环的判断是否</li>
<li>非重入的，即持有锁的小伙伴，再次去获取锁的时候，也是失败</li>
<li>性能瓶颈</li>
</ul>
<p><strong>乐观锁</strong></p>
<p>在数据库中添加一个version字段，在修改的时候，加一个version的查询限定，一把的业务逻辑为</p>
<ul>
<li><code>select * from table where id=1</code></li>
<li>执行业务逻辑</li>
<li><code>update xxx, version=version+1 wherer id=1 and version=oldVersion</code> 如果执行成功，则表示正确持有锁，业务流程ok；如果失败，则表示没有抢占到锁，回滚</li>
</ul>
<p>上面这个做法，有个比较明显的问题，没有阻塞操作，和我们预期的分布式锁差别有点大</p>
<p><strong>悲观锁</strong></p>
<p>如果想解决上面的阻塞问题，我们可以考虑使用写锁</p>
<ul>
<li>开启事务</li>
<li><code>select * from table where id=1 for update</code></li>
<li>执行业务逻辑</li>
<li>提交事务，释放锁</li>
</ul>
<p>上面是利用数据库的写锁来完成排他性，同样存在锁释放问题</p>
<p><strong>小结</strong></p>
<p>上面的几个思路主要来自于网络上的一些博文，就我个人看完的观点，基于db的分布式锁绝不是一个优雅的选择方案，如非万不得已，不要这么干</p>
<h2> II. Redis版分布式锁</h2>
<p>关于redis实现分布式锁的方案由来已久了，主要是借助redis的单线程模型，以及命令执行的原子性，通过确保同一时刻，只能有一个<code>setnx</code>成功，即表示抢占到锁；其他失败的小伙伴只能遗憾的加入下一次的抢锁计划</p>
<p>为了避免持有锁的小伙伴因为异常挂掉没有释放锁，从而导致其他客户端都拿不到锁的问题，因此在抢占锁的时候，我们需要考虑设置有效期；幸运的是redis已经支持一个命令执行上面的过程了</p>
<h3> 1. 实现</h3>
<p>redis分布式锁</p>
<p>设置锁和释放锁两个方面；</p>
<ul>
<li>setnx：当不存在时，设置成功；存在时，设置失败</li>
<li>为了防止持有锁的客户端挂掉，没有释放锁，从而导致其他客户端都拿不到锁的case，我们需要设置锁的有效期</li>
</ul>
<p>这里我们借助<code>SET key value [EX seconds | PX milliseconds] [NX | XX] [KEEPTTL]</code>来实现原子的操作</p>
<p>下面是基于<code>RedisTemplate</code>来实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放锁的时候需要注意，持有者不能把别人的锁给释放掉了（比如A持有了锁，超时时间为5s，但是它的业务逻辑超过了5s，导致B也获取到了锁，如果这时候A执行完了，把B的锁删掉，那就gg了）</p>
<p>因此，删除的重点是，只能删自己的锁（这里就需要借助lua脚本来执行原子操作了）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 测试</h3>
<p>我们写一个简单的并发扣库存的测试case，主要的逻辑就是当前的库存小于购买数时，下单失败</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/201030/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<p><strong>系列博文</strong></p>
<ul>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/27/201027-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BGEO/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之GEO</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/21/201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之HyperLoglog</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之发布订阅</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之管道Pipelined使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis集群环境配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【DB系列】借助Redis实现排行榜功能（应用篇）</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之ZSet数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Set数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Hash数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之List数据结构使用姿势</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之String数据结构的读写</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之Jedis配置</a></li>
<li><a href="https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener noreferrer">【DB系列】Redis之基本配置</a></li>
</ul>
<p><strong>工程源码</strong></p>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/201030/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>实战演练</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/db/%E5%AE%9E%E4%BE%8B/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">实战演练</source>
      <description>实战系列教程，有0基础的搭建项目工程，有进阶的问题排查手册，也有使用的业务场景支持；欢迎来到实战系列教程栏目</description>
      <pubDate>Fri, 03 Feb 2023 10:09:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>实战系列教程，有0基础的搭建项目工程，有进阶的问题排查手册，也有使用的业务场景支持；欢迎来到实战系列教程栏目</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.基本使用姿势小结</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/01.190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/01.190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.基本使用姿势小结</source>
      <description>一般来讲，谈到Spring的特性，绕不过去的就是DI（依赖注入）和AOP（切面），在将bean的系列中，说了DI的多种使用姿势；接下来看一下AOP的玩法</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Fri, 01 Mar 2019 17:47:02 GMT</pubDate>
      <content:encoded><![CDATA[<p>一般来讲，谈到Spring的特性，绕不过去的就是DI（依赖注入）和AOP（切面），在将bean的系列中，说了DI的多种使用姿势；接下来看一下AOP的玩法</p>
<!-- more -->
<h2> I. 背景知识</h2>
<p>在实际使用之前有必要了解一下什么是AOP，以及AOP的几个基本概念</p>
<h3> 1.  advice</h3>
<ul>
<li>before: 在方法执行之前被调用</li>
<li>after: 在方法执行之后调用</li>
<li>after returning: 方法执行成功之后</li>
<li>after throwing: 方法抛出异常之后</li>
<li>around: 环绕，自己在内部决定方法的执行时机，因此可以在之前之后做一些业务逻辑</li>
</ul>
<h3> 2. join point</h3>
<p>连接点，比如方法调用，方法执行，字段设置/获取、异常处理执行、类初始化、甚至是 for 循环中的某个点</p>
<p>但 Spring AOP 目前仅支持方法执行 (method execution)</p>
<p>简单来说，Spring AOP中，PointCut就是那个被拦截的方法</p>
<h3> 3. pointcut</h3>
<p>切点，用来描述满足什么规则的方法会被拦截</p>
<ul>
<li>正则表达式 ： <code>@Before("execution(public * com.git.hui.demo.base.bean.*.*(..))")</code></li>
<li>注解拦截方式 ：<code>@Around("@annotation(parameterCheck)")</code></li>
</ul>
<h3> 4. aspect</h3>
<p>切面是切点和通知的结合。通知和切点共同定义了关于切面的全部内容，它是什么时候，在何时和何处完成功能</p>
<h3> 5. introduction</h3>
<p>引入允许我们向现有的类添加新的方法或者属性</p>
<h3> 6. weaving</h3>
<p>组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>
<p>简单来讲就是生成一个代理类，在调用被拦截的方法时，实际上执行的是代理类，这个代理类内部执行切面逻辑</p>
<h2> II. 使用说明</h2>
<h3> 1. 基本配置</h3>
<p>首先是基本环境的搭建, 先贴上必要的xml配置, 使用aop需要引入包： <code>spring-boot-starter-aop</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 代码准备</h3>
<p>首先创建一个被拦截的bean: <code>com.git.hui.boot.aop.demo.DemoBean</code>，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在启动类中，执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. AOP使用</h3>
<p>在实际使用之前，需要创建一个切面，用<code>@Aspect</code>声明，其次切面也需要作为bean托付给Spring容器管理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> a. before</h4>
<p>在方法调用之前，需要执行一些操作，这个时候可以使用 <code>@Before</code> 注解来声明<code>before advice</code></p>
<p>一种可使用姿势如下，我们的切点直接在注解中进行定义，使用正则表达式的方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. after</h4>
<p>在方法调用完毕之后，再执行一些操作，这个时候after就可以派上用场，为了考虑切点的通用性，我们可以考虑声明一个切点，使用<code>@Pointcut</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用pointcut的方式也比较简单，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. after returning</h4>
<p>在正常返回结果之后，再次执行，这个也挺有意思的，通常使用这个advice时，一般希望获取返回结果，那么应该怎么处理呢？</p>
<ul>
<li><code>org.aspectj.lang.annotation.AfterReturning#returning</code> 指定返回结果对应参数name</li>
<li>返回结果作为参数传入，要求类型一致，否则不生效</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. around</h4>
<p>这个也比较常见，在方法执行前后干一些事情，比如常见的耗时统计，日志打印，安全控制等，很多都是基于around advice实现的</p>
<p>使用这个advice需要注意的是传入参数类型为 <code>ProceedingJoinPoint</code>，需要在方法内部显示执行<code>org.aspectj.lang.ProceedingJoinPoint#proceed()</code>来表示调用方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> e. 输出</h4>
<p>执行之后输出如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果上，可以看到每个advice的使用范围，当然也带来了一些疑问</p>
<ul>
<li>可以存在多个同类型的advice，拦截同一个目标吗？（如两个around都拦截methodA方法，那么methodA方法被调用时，两个around advice是否都会执行）</li>
<li>多个advice之间的优先级怎么定义？</li>
<li>aop拦截的目标方法有没有限制（对非public的方法可以拦截么？）</li>
<li>被拦截的方法中存在相互调用的时候，会怎样？（如methodA,methodB都可以被拦截，且methodA中调用了methodB，那么在执行methodA时，methodB的各种advice是否会被触发？）</li>
<li>基于注解的aop方式可以怎样用</li>
</ul>
<p>以上这些问题留在下一篇进行介绍</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2.高级使用技能</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/02.190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/02.190302-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E8%83%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.高级使用技能</source>
      <description>前面一篇博文 190301-SpringBoot基础篇AOP之基本使用姿势小结 介绍了aop的简单使用方式，在文章最后，抛出了几个问题待解决，本篇博文则将针对前面的问题，看下更多关于AOP的使用说明</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Sat, 02 Mar 2019 19:22:46 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇博文 <a href="http://spring.hhui.top/spring-blog/2019/03/01/190301-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener noreferrer">190301-SpringBoot基础篇AOP之基本使用姿势小结</a> 介绍了aop的简单使用方式，在文章最后，抛出了几个问题待解决，本篇博文则将针对前面的问题，看下更多关于AOP的使用说明</p>
<!-- more -->
<h2> I. 高级技能</h2>
<h3> 1. 注解拦截方式</h3>
<p>前面一文，主要介绍的是根据正则表达式来拦截对应的方法，接下来演示下如何通过注解的方式来拦截目标方法，实现也比较简单</p>
<p>首先创建注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在目标方法上添加注解，这里借助前面博文中工程进行说明，新建一个<code>com.git.hui.boot.aop.demo2.AnoDemoBean</code>，注意这个包路径，是不会被前文的<code>AnoAspect</code>定义的Advice拦截的，这里新建一个包路径的目的就是为了尽可能的减少干扰项</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来定义对应的advice, 直接在前面的<code>AnoAspect</code>中添加（不知道前文的也没关系，下面贴出相关的代码类，前文的类容与本节内容无关）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，在执行目标方法之前，会先执行before advice中的逻辑</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 多个advice拦截</h3>
<p>一个方法执行时，如果有多个advice满足拦截规则，是所有的都会触发么？通过前面一篇博文知道，不同类型的advice是都可以拦截的，如果出现多个相同类型的advice呢？</p>
<p>在前面一篇博文的基础上进行操作，我们扩展下<code>com.git.hui.boot.aop.demo.DemoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的测试切面内容如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，所有的切面都执行了，也就是说，只要满足条件的advice，都会被拦截到</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 嵌套拦截</h3>
<p>嵌套的方式有几种case，先看第一种</p>
<h4> a. 调用方法不满足拦截规则，调用本类中其他满足拦截条件的方法</h4>
<p>这里我们借助第一节中的bean来继续模拟, 在<code>AnoDemoBean</code>类中，新增一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的切面为</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后测试case需要改为直接调用 <code>AnoDemoBean#randUUID</code>，需要看这个方法内部调用的<code>genUUID</code>是否会被切面拦截住</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，没有切面的日志，表明这种场景下，不会被拦截</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 调用方法不满足拦截规则，调用其他类中满足拦截条件的方法</h4>
<p>依然使用前面的例子进行说明，不过是稍稍改一下<code>AnoDemoBean</code>，调用第二节中的DemoBean的方法</p>
<p>DemoBean的代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后AnoDemoBean的代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码和前面完全一致，接下来看下输出</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的日志分析中，可以明确看出对比，调用本类中，满足被拦截的方法，也不会走切面逻辑；调用其他类中的满足切面拦截的方法，会走切面逻辑</p>
<h4> c. 调用方法满足切面拦截条件，又调用其他满足切面拦截条件的方法</h4>
<p>这个和两个case有点像，不同的是直接调用的方法也满足被切面拦截的条件，我们主要关注点在于嵌套调用的方法，会不会进入切面逻辑，这里需要修改的地方就很少了，直接把 <code>AnoDemoBean#randUUID</code>方法上添加注解，然后执行即可</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果进行反推，一个结论是</p>
<ul>
<li>执行的目标方法，如果调用了本类中一个满足切面规则的方法A时，在执行方法A的过程中，不会触发切面逻辑</li>
<li>执行的目标方法，如果调用其他类中一个满足切面规则的方法B时，在执行方法B的过程中，将会触发切面逻辑</li>
</ul>
<h3> 4. AOP拦截方法作用域</h3>
<p>前面测试的被拦截方法都是public，那么是否表明只有public方法才能被拦截呢？</p>
<p>从第三节基本可以看出，private方法首先淘汰出列，为啥？因为private方法正常来讲只能内部调用，而内部调用不会走切面逻辑；所以接下来需要关注的主要放在默认作用域和protected作用域</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不直接使用这个类里面的方法，借助前面的 <code>AnoDemoBean</code>， 下面给出了通过反射的方式来调用private方法的case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，从日志打印来看，protected和default方法的切面都走到了</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 小结</h3>
<p>本篇博文篇幅比较长，主要是测试代码比较占用地方，因此有必要简单的小结一下，做一个清晰的归纳，方便不想看细节，只想获取最终结论的小伙伴</p>
<p><strong>注解拦截方式:</strong></p>
<ul>
<li>首先声明注解</li>
<li>在目标方法上添加注解</li>
<li>切面中，advice的内容形如 <code>@Around("@annotation(AnoDot)")</code></li>
</ul>
<p><strong>多advice情况：</strong></p>
<ul>
<li>多个advice满足拦截场景时，全部都会执行</li>
</ul>
<p><strong>嵌套场景</strong></p>
<ul>
<li>执行的目标方法，如果调用了本类中一个满足切面规则的方法A时，在执行方法A的过程中，不会触发切面逻辑</li>
<li>执行的目标方法，如果调用其他类中一个满足切面规则的方法B时，在执行方法B的过程中，将会触发切面逻辑</li>
</ul>
<p><strong>作用域</strong></p>
<ul>
<li>public, protected, default 作用域的方法都可以被拦截</li>
</ul>
<p><strong>优先级</strong></p>
<p>这个内容因为特别多，所以有必要单独拎出来，其主要的分类如下</p>
<ul>
<li>同一aspect，不同advice的执行顺序</li>
<li>不同aspect，advice的执行顺序</li>
<li>同一aspect，相同advice的执行顺序</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>项目: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/010-aop</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>5.接口上注解AOP拦截不到场景兼容</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/05.210525-SpringBoot%E6%8E%A5%E5%8F%A3%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E5%9C%BA%E6%99%AF%E5%85%BC%E5%AE%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/05.210525-SpringBoot%E6%8E%A5%E5%8F%A3%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E5%9C%BA%E6%99%AF%E5%85%BC%E5%AE%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.接口上注解AOP拦截不到场景兼容</source>
      <description>在Java的开发过程中，面向接口的编程可能是大家的常态，切面也是各位大佬使用Spring时，或多或少会使用的一项基本技能；结果这两个碰到一起，有意思的事情就发生了，接口方法上添加注解，面向注解的切面拦截，居然不生效 这就有点奇怪了啊，最开始遇到这个问题时，表示难以相信；事务注解也挺多是写在接口上的，好像也没有遇到这个问题（难道是也不生效，只是自己没有关注到？） 接下来我们好好瞅瞅，这到底是怎么个情况</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Tue, 25 May 2021 12:33:16 GMT</pubDate>
      <content:encoded><![CDATA[<p>在Java的开发过程中，面向接口的编程可能是大家的常态，切面也是各位大佬使用Spring时，或多或少会使用的一项基本技能；结果这两个碰到一起，有意思的事情就发生了，接口方法上添加注解，面向注解的切面拦截，居然不生效</p>
<p>这就有点奇怪了啊，最开始遇到这个问题时，表示难以相信；事务注解也挺多是写在接口上的，好像也没有遇到这个问题（难道是也不生效，只是自己没有关注到？）</p>
<p>接下来我们好好瞅瞅，这到底是怎么个情况</p>
<!-- more -->
<h2> I. 场景复现</h2>
<p>这个场景复现相对而言比较简单了，一个接口，一个实现类；一个注解，一个切面完事</p>
<h3> 1. 项目环境</h3>
<p>采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>IDEA</code> + <code>maven</code> 进行开发</p>
<p>添加aop依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 复现case</h3>
<p>声明一个注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拦截切面，下面这段代码来自之前分享的博文 <a href="https://spring.hhui.top/spring-blog/2019/03/13/190313-SpringCloud%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BAOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener noreferrer">【基础系列】AOP实现一个日志插件（应用篇）</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个接口与实现类，注意下面的两个方法，一个注解在接口上，一个注解在实现类上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后输出结果如下（有图有真相，别说我骗你🙃）</p>
<figure><img src="/imgs/210525/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 事务注解测试</h3>
<p>上面这个不生效，那我们通常写在接口上的事务注解，会生效么？</p>
<p>添加mysql操作的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库配置 <code>application.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是我们的接口定义与实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的update方法，事务注解在接口上，接下来我们需要确认调用之后，是否会回滚</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210525/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>回滚了，有木有！！！</p>
<p>果然是没有问题的，吓得我一身冷汗，这要是有问题，那就...(不敢想不敢想)</p>
<p>所以问题来了，为啥第一种方式不生效呢？？？</p>
<h2> II. 接口注解切面拦截实现</h2>
<p>暂且按下探寻究竟的欲望，先看下如果想让我们可以拦截接口上的注解，可以怎么做呢?</p>
<p>既然拦截不上，多半是因为子类没有继承父类的注解，所以在进行切点匹配时，匹配不到；既然如此，那就让它在匹配时，找下父类看有没有对应的注解</p>
<h3> 1. 自定义Pointcut</h3>
<p>虽说是自定义，但也没有要求我们直接实现这个接口，我们选择<code>StaticMethodMatcherPointcut</code>来补全逻辑</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们采用声明式来实现切面逻辑</p>
<h3> 2. 自定义Advice</h3>
<p>这个advice就是我们需要执行的切面逻辑，和上面的日志输出差不多，区别在于参数不同</p>
<p>自定义advice实现自接口<code>MethodInterceptor</code>，顶层接口是<code>Advice</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 自定义Advisor</h3>
<p>将上面自定义的切点pointcut与通知advice整合，实现我们的切面</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 最后注册切面</h3>
<p>说是注册，实际上就是声明为bean，丢到spring容器中而已</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次执行上面的测试用例，输出如下</p>
<figure><img src="/imgs/210525/02.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>接口上的注解也被拦截了，但是最后一个耗时的输出，有点夸张了啊，采用上面这种方式，这个耗时有点夸张了啊，生产环境这么一搞，岂不是分分钟卷铺盖的节奏</p>
<ul>
<li>可以借助 StopWatch 来查看到底是哪里的开销增加了这么多 （关于StopWatch的使用，下篇介绍）</li>
<li>单次执行的统计偏差问题，将上面的调用，执行一百遍之后，再看耗时，趋于平衡，如下图</li>
</ul>
<figure><img src="/imgs/210525/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 5. 小结</h3>
<p>到这里，我们实现了接口上注解的拦截，虽说解决了我们的需求，但是疑惑的地方依然没有答案</p>
<ul>
<li>为啥接口上的注解拦截不到 ？</li>
<li>为啥事务注解，放在接口上可以生效，事务注解的实现机制是怎样的？</li>
<li>自定义的切点，可以配合我们的注解来玩么？</li>
<li>为什么首次执行时，耗时比较多；多次执行之后，则耗时趋于正常？</li>
</ul>
<p>上面这几个问题，毫无意外，我也没有确切的答案，待我研究一番，后续再来分享</p>
<h2> III. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>接口切面拦截: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/011-aop-logaspect</a></li>
<li>事务: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/101-jdbctemplate-transaction" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/101-jdbctemplate-transaction</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210525/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>6.AOP结合SpEL实现日志输出的注意事项</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/06.210608-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E7%BB%93%E5%90%88SpEL%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/06.210608-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87AOP%E7%BB%93%E5%90%88SpEL%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.AOP结合SpEL实现日志输出的注意事项</source>
      <description>使用AOP来打印日志大家一把都很熟悉了，最近在使用的过程中，发现了几个有意思的问题，一个是SpEL的解析，一个是参数的JSON格式输出</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>AOP</category>
      <pubDate>Tue, 08 Jun 2021 18:50:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>使用AOP来打印日志大家一把都很熟悉了，最近在使用的过程中，发现了几个有意思的问题，一个是SpEL的解析，一个是参数的JSON格式输出</p>
<!-- more -->
<h2> I. 项目环境</h2>
<h3> 1. 项目依赖</h3>
<p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p>
<p>开一个web服务用于测试</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. AOP &amp; SpEL</h2>
<p>关于AOP与SpEL的知识点，之前都有过专门的介绍，这里做一个聚合，一个非常简单的日志输出切面，在需要打印日志的方法上，添加注解<code>@Log</code>，这个注解中定义一个<code>key</code>，作为日志输出的标记；key支持SpEL表达式</p>
<h3> 1. AOP切面</h3>
<p>注解定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切面逻辑</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个逻辑比较简单，和大家熟知的使用姿势没有太大的区别</p>
<h3> 2. StandardEvaluationContext安全问题</h3>
<p>关于<code>StandardEvaluationContext</code>的注入问题，有兴趣的可以查询一下相关文章；对于安全校验较高的，要求只能使用<code>SimpleEvaluationContext</code>，使用它的话，SpEL的能力就被限制了</p>
<p>如加一个测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了验证<code>SimpleEvaluationContext</code>，我们修改一下上面的<code>loadKeys</code>方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/210608/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>直接提示方法找不到！！！</p>
<h3> 3. gson序列化问题</h3>
<p>上面的case中，使用的FastJson对传参进行序列化，接下来我们采用Gson来做序列化</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后新增一个特殊的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面方法的第二个参数，非常有意思的是，传参是自己的实例；再次执行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接抛了异常</p>
<figure><img src="/imgs/210608/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这就很尴尬了，一个输出日志的辅助工具，因为序列化直接导致接口不可用，这就不优雅了；而我们作为日志输出的切面，又是没有办法控制这个传参的，没办法要求使用的参数，一定能序列化，这里需要额外注意 （比较好的方式就是简单对象都实现toString,然后输出toString的结果；而不是json串）</p>
<h3> 4. 小结</h3>
<p>虽然上面一大串的内容，总结下来，也就两点</p>
<ul>
<li>SpEL若采用的是<code>SimpleEvaluationContext</code>，那么注意spel的功能是减弱的，一些特性不支持</li>
<li>若将方法参数json序列化输出，那么需要注意某些类在序列化的过程中，可能会抛异常</li>
</ul>
<p>（看到这里的小伙伴，不妨点个赞，顺手关注下微信公众号”一灰灰blog“，我的公众号已经寂寞的长草了😭）</p>
<h2> III. 不能错过的源码和相关知识点</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/014-spel-aop" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/014-spel-aop</a></li>
</ul>
<p><strong>AOP系列博文</strong></p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247486254&amp;idx=1&amp;sn=d33ed6b90880fe518f587225a4550283&amp;chksm=fce71082cb90999461d262d4ad41683ebea96d1a0eb6c8e48dcc8613922841b3c1dcd2c8f5fb&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础系列AOP无法拦截接口上注解场景兼容</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484621&amp;idx=1&amp;sn=fd24ef403c138292aff808daedcc87dd&amp;chksm=fce71f61cb9096779257b53aab53cd985e35d5ed17fdd53be6aa953a2d97c3734aa0ba49a309&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础系列实现一个简单的分布式定时任务(应用篇)</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484170&amp;idx=1&amp;sn=56ae689c23d75649009d59dd2a9b97c2&amp;chksm=fce718a6cb9091b071a8f8c71c096fcd91bf3b764f96f02e09e6e345df455b25573124874a92&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之拦截优先级详解</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484181&amp;idx=1&amp;sn=4518fb3d9c60bdb04428f044cc75af85&amp;chksm=fce718b9cb9091af543634b338cbc998bf3014f5a230244e7340d92169a58c150ae07211d713&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot应用篇之AOP实现日志功能</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484155&amp;idx=1&amp;sn=9ae1870f6ed9bd69a2c0745fbfddcb2a&amp;chksm=fce71957cb909041b418ae24ae9dca5f64c8546f8db230c9b5a1d8d21828f2b8e8171568f12a&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之高级使用技能</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&amp;mid=2247484151&amp;idx=1&amp;sn=96394bfb6cd4d009ab32d5605fc96d25&amp;chksm=fce7195bcb90904d31a2f6a4f3367455c81715944ec0c89b4dc2f4502e27fecbbf37a780bef6&amp;token=798393379&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SpringBoot基础篇AOP之基本使用姿势小结</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/210608/00.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>AOP专题</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/AOP/</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">AOP专题</source>
      <description>教你如何玩转Spring的两大特性之一AOP，掌握工作中的代码整洁之道</description>
      <pubDate>Fri, 03 Feb 2023 08:06:50 GMT</pubDate>
      <content:encoded><![CDATA[<p>教你如何玩转Spring的两大特性之一AOP，掌握工作中的代码整洁之道</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.Bean之基本定义与使用</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/01.181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/01.181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">1.Bean之基本定义与使用</source>
      <description>我们知道在Spring中，有两个非常有名的特性，依赖注入（DI）与切面（AOP)，其中依赖注入其主要的作用，可以说就是维护Spring容器创建的Bean之间的依赖关系，简单来说就是一个bean（假定名为A）持有另一个Bean（假定名为B）的引用作为成员变量b，则由Spring容器自动将B赋值给A的成员变量b 因此在想理解依赖注入，就有必要了解下创建和使用Bean的几种姿势；本篇博文作为基础篇，将介绍 bean的基本创建方式 bean的常见使用姿势 I. Bean的几种创建方式</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Tue, 09 Oct 2018 22:42:01 GMT</pubDate>
      <content:encoded><![CDATA[<p>我们知道在Spring中，有两个非常有名的特性，依赖注入（DI）与切面（AOP)，其中依赖注入其主要的作用，可以说就是维护Spring容器创建的Bean之间的依赖关系，简单来说就是一个bean（假定名为A）持有另一个Bean（假定名为B）的引用作为成员变量b，则由Spring容器自动将B赋值给A的成员变量b</p>
<p>因此在想理解依赖注入，就有必要了解下创建和使用Bean的几种姿势；本篇博文作为基础篇，将介绍</p>
<ul>
<li>bean的基本创建方式</li>
<li>bean的常见使用姿势</li>
</ul>
<!--more-->
<h2> I. Bean的几种创建方式</h2>
<p>在SpringBoot的大环境下，基本上不再使用以前的xml配置，所以本篇博文也不再介绍以往Spring中，通过xml来声明bean的使用方式</p>
<h3> 1. 注解方式</h3>
<p>这种也是我们最常见的使用姿势，一般就是在类上添加<code>@Component</code>, <code>@Service</code>等注解（<code>@Controller</code>表示提供http接口的bean, <code>@Configuration</code>表示配置类Bean)</p>
<p>添加上这种注解的类，会被Spring容器扫描加载，自动生成单例的bean，一个典型的实例如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在实际测试时，发现无法获取上面的bean，就需要注意下bean的包路径，是否在被你程序的扫描路径包含</p>
<h3> 2. <code>@Bean</code>定义方式</h3>
<p>这种方式，主要是结合<code>Configuration</code>来定义bean，首先是声明一个配置类，然后再配置类中，通过返回bean对象的方法形式来声明bean，一般使用姿势如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的一点是BeanLoadConfig类本身也被Spring容器看为一个Bean</p>
<h3> 3. 工厂类方式</h3>
<p>FactoryBean本质上也是一个Bean，但是可以通过他来生成你期待的Bean，在实际的业务场景中可能使用场景不多，但是在抽象的框架层面应用很广，一个简单的使用姿势如</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. Bean的使用姿势</h2>
<p>前面介绍了如何创建Bean，创建完之后，接着就是使用了，下面介绍最基本的几种使用方式</p>
<h3> 1. <code>Autowired</code>注入</h3>
<p>将注解<code>@Autowired</code>或者<code>@Resource</code>添加到成员变量上，即表示这个成员变量会由Spring容器注入对应的Bean对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由Spring容器依赖注入的方式，从代码上看，是不会找到有什么地方主动的塞入了这个值，但是使用处却可以直接使用，因此需要注意有可能会出现npe</p>
<h3> 2. Setter方法</h3>
<p>和前面其实也差不多，只不过注解放在了setter方法上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 构造方法</h3>
<p>顾名思义，就是在构造方法中传入Bean对象来初始化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的好处是可以避免潜在的NPE问题（后面将有博文专门提及），而且针对Bean不存在的情况，系统会抛出异常，提早知道问题</p>
<h3> 4. 小结</h3>
<p>本篇主要介绍了Bean的基本创建和使用姿势，基本上也是我们在平常的业务开发中使用得最广的方式了，是不是会这些就行了呢？业务做多了之后，随之而来就会有一些疑问</p>
<ul>
<li>提供的jar包给第三方使用，如何保证其他人能顺利加载jar包中的bean？</li>
<li>bean初始化的先后顺序是怎样的？</li>
<li>可以手动注册一个Bean么，改怎么做？</li>
<li>BeanFactory与FactoryBean的区别是啥，各自的典型应用场景又是什么？</li>
<li>重名的Bean是否可以解决？</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2.Bean之自动加载</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/02.181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/02.181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">2.Bean之自动加载</source>
      <description>前面一篇介绍了Bean的常用姿势，在一个项目中，可能不会出现什么问题，可如果你提供了一个Jar包供第三方用户使用，那么你这个jar包中的Bean，能被第三方加载么？ 本篇博文将主要介绍AutoConfig相关的内容，即如果我想提供一个jar包供第三方在Spring的环境下使用时，可以怎么做</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 12 Oct 2018 19:17:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面一篇介绍了Bean的常用姿势，在一个项目中，可能不会出现什么问题，可如果你提供了一个Jar包供第三方用户使用，那么你这个jar包中的Bean，能被第三方加载么？</p>
<p>本篇博文将主要介绍AutoConfig相关的内容，即如果我想提供一个jar包供第三方在Spring的环境下使用时，可以怎么做</p>
<!-- more -->
<h2> I. AutoConfiguration</h2>
<p>通常来讲，要想实现上面的场景，建议是借助<code>@Configuration</code>注解的配置类来管理你自己的bean，这样对于其他使用方而言，只需要加载到你的配置类，就可以注册你的所有bean了</p>
<h3> 1. 包路径扫描使用姿势</h3>
<p>首先是在你的工程中定义一个配置类，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置类功能比较简单，指明扫描的包路径，然后这个配置类如何给使用方使用呢？</p>
<p><strong>将配置放在指定的文件中即可，使用者会自动加载，从而避免的代码的侵入</strong></p>
<ul>
<li>在资源目录下新建目录 META-INF</li>
<li>在 META-INF 目录下新建文件 <code>spring.factories</code></li>
<li>在文件中添加 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.git.hui.boot.autoconfig.SelfAutoConfig</code></li>
</ul>
<p><strong>说明，如果需要换行时，可以如下</strong></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用方就可以愉快的使用你的bean了，定义一个测试的Bean如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 定义Bean使用方式</h3>
<p>直接在Config配置中，定义Bean，可以说是更加常见的方式，特别是当你的bean不是那么多的时候，推荐使用这种方式，便于集中管理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实例演示</h3>
<p>在新工程中，测试前面的工程的bean，看是否可以正常加载，这一小结结合源码运行查看，更有助于理解</p>
<p><strong>源码工程说明</strong></p>
<ul>
<li><a href="">005-autoconfig</a> 提供自动加载的Bean的工程，内部定义了前面的两个测试Bean和配置文件</li>
<li><a href="">004-bean</a> 测试引入第三方jar中Bean的工程</li>
</ul>
<p>测试代码如下，已删除无关的内容</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示图如下:</p>
<figure><img src="/imgs/181012/00.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h3> 4. 小结</h3>
<p>本篇的内容比较简单，东西也不多，主要就是在自己的项目中添加一个<code>Configuration</code>配置类，然后在资源目录下新增 <code>META-INF/spring.factories</code> 即可</p>
<p>上面这么做，其实和Java本身的SPI机制有点像，都是讲一些类信息写在约定的文件中，然后由框架层来获取文件中的内容然后进行解析，后面在源码篇，会涉及到整个处理流程；现在知道大致是这么玩的就行</p>
<p>从简单的使用来讲，上面可以满足一般场景，但是实际的应用中，还有其他的问题</p>
<ul>
<li>我直接依赖或间接依赖了很多jar包，但是有些包并不想引入他们定义的AutoConfig怎么办？(如进行redis操作的Lettuce和Jedis，只需要一个生效即可）</li>
<li>如我的Jar包工作的前提是需要引入其他的jar包，但是我不知道使用我的地方是否提供了这个依赖，如何处理？（如只有Spring容器中有BeanA之后，我定义的Bean才生效）</li>
<li>Bean初始化顺序的问题</li>
</ul>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 参考</h4>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html#boot-features-understanding-auto-configured-beans" target="_blank" rel="noopener noreferrer">官方文档：Creating Your Own Auto-configuration</a></li>
</ul>
<h4> b. 项目</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/004-bean" target="_blank" rel="noopener noreferrer">004-bean</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/005-autoconfig" target="_blank" rel="noopener noreferrer">005-autoconfig</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181012/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>3.Bean之动态注册</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/03.181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/03.181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">3.Bean之动态注册</source>
      <description>Spring中的Bean除了前面提到的几种JavaConfig或者@Component等注解标识之外，也是可以动态的向Spring容器注册的，本篇博文将主要介绍 如何向Spring容器注册Bean 如何引用主动注册的Bean 注册的Bean中，如果依赖其他的Bean，怎么操作</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Sat, 13 Oct 2018 17:38:31 GMT</pubDate>
      <content:encoded><![CDATA[<p>Spring中的Bean除了前面提到的几种JavaConfig或者<code>@Component</code>等注解标识之外，也是可以动态的向Spring容器注册的，本篇博文将主要介绍</p>
<ul>
<li>如何向Spring容器注册Bean</li>
<li>如何引用主动注册的Bean</li>
<li>注册的Bean中，如果依赖其他的Bean，怎么操作</li>
</ul>
<!-- more -->
<h2> I. 手动注册Bean方式</h2>
<h3> 1. 核心实现类</h3>
<p>以前也写过关于动态注册Bean的博文，如 <a href="https://blog.hhui.top/hexblog/2018/08/04/180804-Spring%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cbean/" target="_blank" rel="noopener noreferrer">180804-Spring之动态注册bean</a></p>
<p>我们的实现方式和上面也没什么区别，依然是借助<code>BeanDefinition</code>来创建Bean定义并注册到BeanFactory中，具体实现的核心代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面唯一的方法中，接收四个参数，源码中也有说明，稍微需要注意下的是Spring容器中不允许出现同名的Bean</p>
<h3> 2. 测试用例</h3>
<p>动态创建Bean，并不是塞入容器之中就完结了，塞进去之后，是为了后续的使用，自然而然的就会有下面几种情形</p>
<h4> a. 无其他Bean依赖</h4>
<p>即不依赖其他的Bean, 单纯的供其他地方使用，这种情况下，主要需要测试的就是别人可以通过什么方式来使用它</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 依赖其他Bean</h4>
<p>和前面一个不同，这个Bean内部需要注入其他的Bean，因此我们主动注册Bean时，能否将依赖的Bean也注入进去呢？</p>
<p>定义一个测试Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其依赖的普通Bean定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> c. 普通Bean依赖主动注册的Bean</h4>
<p>这个其实就是使用case了，主动注册的Bean也是被人使用的，那可以怎么使用呢？传统的<code>Autowired</code>可否？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> d. Bean注册实现</h4>
<p>前面定义了两个需要手动注册的bean，所以就需要选择一个合适的地方来处理主动注册的逻辑，我们把这段逻辑放在AutoConfig中，用于测试演示</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实测演示</h3>
<p>前面的测试case都准备好了，接着就需要实际的跑一下看看效果了，选择Rest服务来演示，创建一个简单的Controller</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就使用了三个Bean，两个主动注册的外加一个依赖了主动注册Bean的<code>anoOriginBean</code> (其实Controller本身也是一个使用主动注册Bean的Bean）</p>
<p>先预测一下结果：</p>
<ul>
<li>如果 manualBean, manualDIBean 为空，表示不能直接通过 <code>@Autowired</code> 注解的方式引入手动注册的Bean；此时会抛npe</li>
<li>如果没有npe，且 AnoOriginBean内部依赖的manualBean也不是null，则表示直接用<code>@Autowired</code>来注入没啥毛病（是否绝对呢？）</li>
<li>manualDIBean 内部依赖了<code>originBean</code>，也是通过注解方式注入，如果正常返回，表示手动注册的也可以这么引用其他的Bean；否则不行</li>
</ul>
<figure><img src="/imgs/181013/00.gif" alt="手动注册演示" tabindex="0" loading="lazy"><figcaption>手动注册演示</figcaption></figure>
<p>执行结果如上图，简单来说，就是手动注册的Bean，和我们一般使用的Bean也没什么两样，原来可以怎么用，现在依然可以这么用</p>
<h2> II. BeanDefinitionRegistryPostProcessor扩展方式</h2>
<p>前面这种手动注入的方式有个不好的地方就是主动注册的这个逻辑，感觉写在什么地方都不太优雅，在Spring项目的源码中通过实现<code>BeanDefinitionRegistryPostProcessor扩展方式</code>接口的方式比较多，比如<code>org.springframework.cloud.autoconfigure.RefreshAutoConfiguration</code></p>
<p>依葫芦画瓢实现一个</p>
<h3> 1. 实现类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的实现中，Bean的注册方式和前面的其实是一样的，这个接口提供了两个方法，通常实现第一个方法来做Bean的注册；两者从根本上也没太大的区别，上面只是给出了一种使用演示</p>
<h3> 2. 测试用例</h3>
<p>测试的思路基本上和前面一样，定义了三个需要我们注册的Bean，一个没有外部依赖的<code>AutoBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个依赖外部Bean的<code>AutoDIBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个用于主动创建和设置依赖的<code>AutoFacDIBean</code> （用于前面的实现类中的第二个方法的注册方式）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个依赖了主动注册AutoBean的 <code>AnoAutoOriginBean</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 实测演示</h3>
<p>同样写一个RestApi进行演示，通过实际的演示结果发现和前面没什么太大的区别</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/imgs/181013/01.gif" alt="接口方式注册演示" tabindex="0" loading="lazy"><figcaption>接口方式注册演示</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 文档</h4>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/30590254" target="_blank" rel="noopener noreferrer">动态注册bean，Spring官方套路：使用BeanDefinitionRegistryPostProcessor</a></li>
<li><a href="https://blog.hhui.top/hexblog/2018/08/04/180804-Spring%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cbean/" target="_blank" rel="noopener noreferrer">180804-Spring之动态注册bean</a></li>
</ul>
<h4> b. 源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>model: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/006-dynamicbean" target="_blank" rel="noopener noreferrer">006-dynamicbean</a></li>
</ul>
<hr>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181013/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>5.条件注入@Condition使用姿势</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/05.181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/05.181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">5.条件注入@Condition使用姿势</source>
      <description>前面几篇关于Bean的基础博文中，主要集中在Bean的定义和使用，但实际的情况中有没有一些场景是不加载我定义的bean，或者只有满足某些前提条件的时候才加载我定义的Bean呢？ 本篇博文将主要介绍bean的加载中，条件注解@Conditional的相关使用</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Thu, 18 Oct 2018 14:57:42 GMT</pubDate>
      <content:encoded><![CDATA[<p>前面几篇关于Bean的基础博文中，主要集中在Bean的定义和使用，但实际的情况中有没有一些场景是不加载我定义的bean，或者只有满足某些前提条件的时候才加载我定义的Bean呢？</p>
<p>本篇博文将主要介绍bean的加载中，条件注解<code>@Conditional</code>的相关使用</p>
<!-- more -->
<h2> I. <code>@Conditional</code>注解</h2>
<p>这个注解在Spring4中引入，其主要作用就是判断条件是否满足，从而决定是否初始化并向容器注册Bean</p>
<h3> 1. 定义</h3>
<p><code>@Conditional</code>注解定义如下，其内部主要就是利用了Condition接口，来判断是否满足条件，从而决定是否需要加载Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是<code>Condtion</code>接口的定义，这个可以说是最基础的入口了，其他的所有条件注解，归根结底，都是通过实现这个接口进行扩展的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口中，有个参数比较有意思<code>ConditionContext</code>,它持有不少有用的对象，可以用来获取很多系统相关的信息，来丰富条件判断，接口定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 使用说明</h3>
<p>通过一个小例子，简单的说一下如何使用Condition和<code>@Conditional</code>注解，来实现bean的条件加载</p>
<p>首先我们定义一个随机产生数据的类，其功能就是随机生成一些数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们目前提供两种随机数据生成的bean，但是需要根据配置来选择具体选中的方式，因此我们如下定义Bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置，先不管<code>@Conditional</code>注解的内容，单看两个Bean的定义，一个是定义int随机数生成；一个是定义boolean随机生成；</p>
<p>但是我们的系统中，只需要一个随机数据生成器即可，我们选择根据配置<code>conditional.rand.type</code>的值来选择到底用哪个，配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就得看这个条件如何加上了，也就是上面配置类<code>ConditionalAutoConfig</code>中两个注解的内容了，两个类都是实现<code>Condition</code>的接口，具体如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现也比较清晰，获取配置值，然后判断，并返回true/fase；返回true，则表示这个条件满足，那么这个Bean就可以被加载了；否则这个Bean就不会创建</p>
<h3> 3. 测试与验证</h3>
<p>针对上面的配置与实现，写一个测试类如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置文件的值为int时，每次访问返回的应该都是正整数，演示如下图</p>
<figure><img src="/imgs/181018/00.gif" alt="int随机生成" tabindex="0" loading="lazy"><figcaption>int随机生成</figcaption></figure>
<p>将配置的值改成boolean之后，再次测试如下图</p>
<figure><img src="/imgs/181018/01.gif" alt="boolean随机生成" tabindex="0" loading="lazy"><figcaption>boolean随机生成</figcaption></figure>
<h2> II. 扩展与小结</h2>
<p>上面的测试演示了通过配置文件选择注入Bean的情况，如果一个Bean是通过自动扫描加载的，是否可以直接在Bean的类上添加注解来决定是否载入呢？</p>
<h3> 1. 自动扫描Bean的条件加载</h3>
<p>从使用来讲，和前面的没有什么区别，只是将注解放在具体的类上而言，同样给出一个示例，先定义一个bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的判断条件如下，当配置文件中<code>conditional.demo.load</code>为true时，才会加载这个配置，否则不实例化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类和前面差不多，稍微注意下的就是自动注入时，改一下必要条件，避免bean不存在时报错</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置为true时，bean应该存在，走上面的else逻辑</p>
<figure><img src="/imgs/181018/02.gif" alt="自动扫描条件准确" tabindex="0" loading="lazy"><figcaption>自动扫描条件准确</figcaption></figure>
<p>当配置为false时，不会加载bean，走if逻辑</p>
<figure><img src="/imgs/181018/03.gif" alt="自动扫描添加不符" tabindex="0" loading="lazy"><figcaption>自动扫描添加不符</figcaption></figure>
<h3> 2. 小结</h3>
<p>通过<code>@Conditional</code>注解配合<code>Condition</code>接口，来决定给一个bean是否创建和注册到Spring容器中，从而实现有选择的加载bean</p>
<h4> a. 优势</h4>
<p>这样做的目的是什么呢？</p>
<ul>
<li>当有多个同名bean时，怎么抉择的问题</li>
<li>解决某些bean的创建有其他依赖条件的case</li>
</ul>
<h4> b. 更多注解</h4>
<p>上面可以控制bean的创建，但通过上面的流程，会发现有一点繁琐，有没有什么方式可以简化上面的流程呢？</p>
<p>只用一个注解就好，不要自己再来实现Condtion接口，Spring框架提供了一系列相关的注解，如下表</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ConditionalOnSingleCandidate</code></td>
<td>当给定类型的bean存在并且指定为Primary的给定类型存在时,返回true</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingBean</code></td>
<td>当给定的类型、类名、注解、昵称在beanFactory中不存在时返回true.各类型间是or的关系</td>
</tr>
<tr>
<td><code>@ConditionalOnBean</code></td>
<td>与上面相反，要求bean存在</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingClass</code></td>
<td>当给定的类名在类路径上不存在时返回true,各类型间是and的关系</td>
</tr>
<tr>
<td><code>@ConditionalOnClass</code></td>
<td>与上面相反，要求类存在</td>
</tr>
<tr>
<td><code>@ConditionalOnCloudPlatform</code></td>
<td>当所配置的CloudPlatform为激活时返回true</td>
</tr>
<tr>
<td><code>@ConditionalOnExpression</code></td>
<td>spel表达式执行为true</td>
</tr>
<tr>
<td><code>@ConditionalOnJava</code></td>
<td>运行时的java版本号是否包含给定的版本号.如果包含,返回匹配,否则,返回不匹配</td>
</tr>
<tr>
<td><code>@ConditionalOnProperty</code></td>
<td>要求配置属性匹配条件</td>
</tr>
<tr>
<td><code>@ConditionalOnJndi</code></td>
<td>给定的jndi的Location 必须存在一个.否则,返回不匹配</td>
</tr>
<tr>
<td><code>@ConditionalOnNotWebApplication</code></td>
<td>web环境不存在时</td>
</tr>
<tr>
<td><code>@ConditionalOnWebApplication</code></td>
<td>web环境存在时</td>
</tr>
<tr>
<td><code>@ConditionalOnResource</code></td>
<td>要求制定的资源存在</td>
</tr>
</tbody>
</table>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181018/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>6.@ConditionalOnBean与@ConditionalOnClass</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/06.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/06.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">6.@ConditionalOnBean与@ConditionalOnClass</source>
      <description>bean的条件注入，除了前面一篇博文中介绍的通过@Conditional注解配合Condition接口的实现之外，还提供了更多简化的注解使用方式，省略了自己实现Condtion接口，本篇博文主要介绍下面几个常用的注解使用方式 @ConditionalOnBean @ConditionalOnMissingBean @ConditionalOnClass @ConditionalOnMissingClass</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:38:15 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面一篇博文中介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的实现之外，还提供了更多简化的注解使用方式，省略了自己实现<code>Condtion</code>接口，本篇博文主要介绍下面几个常用的注解使用方式</p>
<ul>
<li><code>@ConditionalOnBean</code></li>
<li><code>@ConditionalOnMissingBean</code></li>
<li><code>@ConditionalOnClass</code></li>
<li><code>@ConditionalOnMissingClass</code></li>
</ul>
<!-- more -->
<h2> I. Bean的存在与否作为条件</h2>
<p>当Bean不存在时，创建一个默认的Bean，在Spring的生态中可以说比较常见了；接下来看下这种方式可以怎么用</p>
<h3> 1. <code>@ConditionalOnBean</code></h3>
<p>要求bean存在时，才会创建这个bean；如我提供了一个bean名为<code>RedisOperBean</code>，用于封装redis相关的操作；但是我这个bean需要依赖<code>restTemplate</code>这个bean，只有当应用引入了redis的相关依赖，并存在<code>RestTemplate</code>这个bean的时候，我这个bean才会生效</p>
<p>假设bean的定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的好处就是我提供的这个第三方包，如果被用户A间接依赖（但是A本身不需要操作redis），也不会因为创建<code>RedisOperBean</code>而抛异常</p>
<blockquote>
<p>产生异常的原因是因为找不到RestTemplate的bean，因此无法实例化RedisOperBean，从而抛出异常</p>
</blockquote>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>构建一个简单的测试用例，先定义一个基础的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个依赖只有上面的bean存在时，才会加载的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是bean的定义了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的测试用例，<code>LoadIfBeanExist</code>是会被正常加载的; 具体结果看后面的实例演示</p>
<h3> 2. <code>ConditionalOnMissingBean</code></h3>
<p>和前面一个作用正好相反的，上面是要求存在bean，而这个是要求不存在</p>
<h4> a. 接口定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>同样定义一个bean不存在时，才创建的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的bean配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为没有notExistsBean，所以上面这个bean也应该被正常注册</p>
<h3> 3. 实例演示</h3>
<p>因为bean的是否存在和class的是否存在有较大的相似性，因此实例演示放在下一小节，一起测试</p>
<h2> II. Class的存在与否作为条件</h2>
<p>从使用来看，和前面基本上没有太大的区别，无非就是将bean换成了class；这样就可以避免因为<code>Class Not Found</code>导致的编译异常了</p>
<h3> 1. <code>@ConditionalOnClass</code></h3>
<p>要求class存在</p>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>先定义一个class</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后依赖class存在的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是Bean的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为类存在，所以测试时，这个bean应该被正常注册</p>
<h3> 2. <code>@ConditionalOnMissingClass</code></h3>
<p>class不存在时，才会加载bean</p>
<h4> a. 注解定义</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> b. 测试用例</h4>
<p>定义一个class缺少时才会创建的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bean的配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为上面这个类存在，所以这个bean不应该被正常注册</p>
<h3> 3. 实例演示</h3>
<p>起一个rest服务，测试下上面的四个bean是否正常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面的分析，返回的结果应该是三个存在，一个不存在；下图执行和我们预期一致</p>
<figure><img src="/imgs/181019/00.gif" alt="条件依赖注册演示" tabindex="0" loading="lazy"><figcaption>条件依赖注册演示</figcaption></figure>
<h2> III. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>7.条件注入@ConditionalOnExpression</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/07.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/07.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">7.条件注入@ConditionalOnExpression</source>
      <description>bean的条件注入，除了前面几篇博文分别介绍的通过@Conditional注解配合Condition接口的基本实现，以及如何使用条件注解@ConditionalOnBean和@ConditionalOnClass和基于配置的@ConditionalOnProperty 本文介绍的注解将更加的灵活，基于SPEL表达式的条件注解ConditionalOnExpression</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:51:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面几篇博文分别介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的基本实现，以及如何使用条件注解<code>@ConditionalOnBean</code>和<code>@ConditionalOnClass</code>和基于配置的<code>@ConditionalOnProperty</code></p>
<p>本文介绍的注解将更加的灵活，基于SPEL表达式的条件注解<code>ConditionalOnExpression</code></p>
<!-- more -->
<h2> IV. 表达式条件注入</h2>
<p>相比较前面的Bean，Class是否存在，配置参数是否存在或者有某个值而言，这个依赖SPEL表达式的，就显得更加的高级了；其主要就是执行Spel表达式，根据返回的true/false来判断是否满足条件</p>
<p>至于SPEL是什么东西，后面会有专文进行解释，此处不加以展开。下面以一个简单的demo进行演示它的使用姿势</p>
<h3> 1. <code>@ConditionalOnExpression</code></h3>
<p>接口定义</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 实例测试</h3>
<p>用一个简单的例子，当配置参数中，根据是否满足某个条件来决定是否需要加载bean</p>
<h4> a. 测试用例</h4>
<p>定义一个满足条件和一个不满足的bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下bean的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置如下</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. 实例演示</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的执行，<code>expressTrueBean</code>应该存在，另外一个为null，运行结果如下</p>
<figure><img src="/imgs/181019/02.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/02.gif" type="image/gif"/>
    </item>
    <item>
      <title>8.条件注入@ConditionalOnProperty</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/08.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/08.181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">8.条件注入@ConditionalOnProperty</source>
      <description>bean的条件注入，除了前面两篇博文分别介绍的通过@Conditional注解配合Condition接口的基本实现，以及如何使用条件注解@ConditionalOnBean和@ConditionalOnClass 本文将主要介绍根据配置来决定是否创建bean的注解@ConditionalOnProperty</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Fri, 19 Oct 2018 10:47:25 GMT</pubDate>
      <content:encoded><![CDATA[<p>bean的条件注入，除了前面两篇博文分别介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的基本实现，以及如何使用条件注解<code>@ConditionalOnBean</code>和<code>@ConditionalOnClass</code></p>
<p>本文将主要介绍根据配置来决定是否创建bean的注解<code>@ConditionalOnProperty</code></p>
<!-- more -->
<h2> I. 配置属性作为条件</h2>
<p>主要是根据配置参数，来决定是否需要创建这个bean，这样就给了我们一个根据配置来控制Bean的选择的手段了，如前面一篇博文中根据配置来选择是随机生成boolean还是随机生成int；只需要更改配置即可</p>
<h3> 1. <code>@ConditionalOnProperty</code></h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 实例测试</h3>
<h4> a. 测试用例</h4>
<p>测试几个常用的姿势，一是根据配置是否存在，来决定是否创建</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的bean配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>当配置存在，且value匹配时</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是配置的参数</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> b. 实例演示</h4>
<p>根据前面的分析，上面的四个bean中，<code>PropertyExistBean</code>, <code>PropertyNotExistBean</code>, <code>PropertyValueExistBean</code> 应该存在；而<code>PropertyValueNotExistBean</code> 因为配置值不匹配，不会创建</p>
<p>测试代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后结果如下，一如预期</p>
<figure><img src="/imgs/181019/01.gif" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure>
<h2> II. 其他</h2>
<h3> 0. 相关</h3>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean" target="_blank" rel="noopener noreferrer">007-conditionbean</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181019/01.gif" type="image/gif"/>
    </item>
    <item>
      <title>9.多实例选择</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/09.181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/09.181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">9.多实例选择</source>
      <description>当通过接口的方式注入Bean时，如果有多个子类的bean存在时，具体哪个bean会被注入呢？系统中能否存在两个重名的bean呢？如果可以，那么怎么选择引入呢？如果不行的话又该怎么避免上面的问题呢？</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Mon, 22 Oct 2018 22:21:22 GMT</pubDate>
      <content:encoded><![CDATA[<p>当通过接口的方式注入Bean时，如果有多个子类的bean存在时，具体哪个bean会被注入呢？系统中能否存在两个重名的bean呢？如果可以，那么怎么选择引入呢？如果不行的话又该怎么避免上面的问题呢？</p>
<!-- more -->
<h2> I. 多实例Bean的选择</h2>
<p>这个场景可以说是比较常见的，现在提倡面向接口编程嘛，当一个接口有多个实例时，怎么注入和引用就需要我们额外关注下了</p>
<h3> 1. 基本使用姿势</h3>
<p>首先定义一个接口和两个简单的实现类，并演示一下我们通常的用法</p>
<p>一个输出的接口定义如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应给两个实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是我们一般的引用方式</p>
<ul>
<li><code>@Autowired</code>注解时，属性名即为默认的Bean名，如下面的<code>logPrint</code>就是获取<code>beanName=logPrint</code>的bean</li>
<li><code>@Resource(name=xxx)</code> 直接指定Bean的name，来唯一选择匹配的bean</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是两种常见的使用姿势，此外还可以借助<code>@Primary</code>注解来声明默认的注入bean</p>
<h3> 2. <code>@Primary</code>注解</h3>
<p>这个注解就是为了解决当有多个bean满足注入条件时，有这个注解的实例被选中</p>
<p>根据上面的作用说明，很明显可以得知一点</p>
<p><strong><code>@Primary</code>注解的使用有唯一性要求：即对应上面的case，一个接口的子类中，只能有一个实现上有这个注解</strong></p>
<p>假设将这个注解放在<code>LogPrint</code>上之后，如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的常用姿势，加上这个注解之后，我们的测试用例应该至少包含下面几个</p>
<ul>
<li><code>@Resource</code> 指定beanName的是否会被<code>@Primary</code>影响</li>
<li>前面的<code>@Autowired</code>注解 + 属性名的方式，是按照第一节的方式选择呢，还是选择被<code>@Primary</code>标识的实例</li>
<li><code>@Autowired</code> + 随意的一个非beanName的属性，验证是否会选中<code>@Primary</code>标识的注解</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 小结</h3>
<p>根据前面的执行，因此可以知晓，选择bean的方式如下</p>
<p><strong>存在<code>@Primary</code>注解时</strong></p>
<ul>
<li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li>
<li><code>@Autowired</code>注解，全部都用<code>@Primary</code>标识的注解</li>
<li><code>@Primary</code>注解要求唯一（非广义的唯一性，并不是指只能用一个@Primary，具体看前面）</li>
</ul>
<p><strong>不存在<code>@Primary</code>注解时</strong></p>
<ul>
<li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li>
<li><code>@Autowired</code>注解时，根据属性名去查对应的Bean，如果查不到则抛异常；如果查到，那即是它了</li>
</ul>
<h2> II. 重名Bean的问题</h2>
<p>在我们实际的业务开发中，有多个bean名为xxx的异常应该算是比较常见的，也就是说应该不能有两个bean叫同一个name；但考虑下下面这个场景</p>
<p>A的服务，依赖B和C的服务；而B和C是两个完全独立的第三方服务，他们各自都提供了一个<code>beanName=xxxService</code>的bean，对于A而言，Spring容器中就会有BeanName冲突的问题了，而且这种场景，对A而言，也是不可控的啊，这种情况下改怎么办？</p>
<h3> 1. 同名Bean</h3>
<p>先来个case演示下同名bean的情况，如下定义两个bean，除了包路径不一样外，类名相同，通过<code>@Component</code>注解方式声明bean，因此两个bean的beanName都是<code>SameA</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来测试下引用，是否有问题</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后，毫不意外的抛出了异常，堆栈信息如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 同名问题规避</h3>
<p>如果真的出现了上面这个问题，该怎么解决呢？如果这些bean是我们可控的，最简单的方式就是不要同名，定义的时候指定beanName,如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果完全不可控呢？正如前面说的两个第三方服务我都得依赖，但是他们有同名的bean，怎么破？</p>
<p>一个解决方法就是排除掉其中一个同名的bean的自动加载，采用主动注册的方式注册这个bean</p>
<p>排除自动扫描的bean的方式如下，在启动类添加注解<code>@ComponentScan</code>并指定其中的<code>excludeFilters</code>属性</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后自定义一个bean的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的代码和之前没有区别，再次执行，结果如下, 最后的输出为 <code>a sameA!</code>，根据类型来选择了实例化的bean了</p>
<figure><img src="/imgs/181022/00.gif" alt="同名bean修复演示" tabindex="0" loading="lazy"><figcaption>同名bean修复演示</figcaption></figure>
<h2> II. 其他</h2>
<h4> a. 更多博文</h4>
<p><strong>基础篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener noreferrer">181009-SpringBoot基础篇Bean之基本定义与使用</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/" target="_blank" rel="noopener noreferrer">181012-SpringBoot基础篇Bean之自动加载</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/" target="_blank" rel="noopener noreferrer">181013-SpringBoot基础篇Bean之动态注册</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener noreferrer">181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/" target="_blank" rel="noopener noreferrer">181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression</a></li>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener noreferrer">181022-SpringBoot基础篇Bean之多实例选择</a></li>
</ul>
<p><strong>应用篇</strong></p>
<ul>
<li><a href="http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/" target="_blank" rel="noopener noreferrer">181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock</a></li>
</ul>
<h4> b. 项目源码</h4>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a></li>
<li>module: <a href="https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/008-beanorder" target="_blank" rel="noopener noreferrer">008-beanorder</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/181022/00.gif" type="image/gif"/>
    </item>
    <item>
      <title>11.Bean加载顺序之错误使用姿势辟谣</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/11.191023-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E4%B9%8B%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%BE%9F%E8%B0%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/Bean/11.191023-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E4%B9%8B%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%BE%9F%E8%B0%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/rss.xml">11.Bean加载顺序之错误使用姿势辟谣</source>
      <description>在网上查询Bean的加载顺序时，看到了大量的文章中使用@Order注解的方式来控制bean的加载顺序，不知道写这些的博文的同学自己有没有实际的验证过，本文希望通过指出这些错误的使用姿势，让观文的小伙伴可以知道@Order的具体的应用场景</description>
      <category>SpringBoot</category>
      <category>基础系列</category>
      <category>Bean</category>
      <pubDate>Wed, 23 Oct 2019 14:55:34 GMT</pubDate>
      <content:encoded><![CDATA[<p>在网上查询Bean的加载顺序时，看到了大量的文章中使用<code>@Order</code>注解的方式来控制bean的加载顺序，不知道写这些的博文的同学自己有没有实际的验证过，本文希望通过指出这些错误的使用姿势，让观文的小伙伴可以知道<code>@Order</code>的具体的应用场景</p>
<!-- more -->
<h2> I. 环境搭建</h2>
<p>创建一个maven项目，pom文件如下（具体的项目代码，可以在文末获取）</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> II. 错误姿势</h2>
<p>下面我们会介绍两种典型注解的错误使用姿势，一个<code>@Order</code>，一个<code>@AutoConfigureOrder</code></p>
<h3> I. @Order</h3>
<h4> err.case1: 类上添加Order注解</h4>
<p>一种常见的错误观点是在类上添加这个Order注解，就可以指定bean之间的初始化顺序，order值越小，则优先级越高，接下来我们实际测试一下，是否如此</p>
<p>我们创建两个DemoBean, 指定不同的Order顺序</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面的观点，orde值小的优先级高，那么BaseDemo2应该先被初始化，实际测试一下，输出如下</p>
<figure><img src="/imgs/191023/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4> err.case2: 配置类中Bean声明方法上添加@Order</h4>
<p>Bean除了上面的自动扫描之外，还有一种方式就是通过<code>@Bean</code>注解，下面我们演示一下在配置类中指定bean加载顺序的错误case</p>
<p>同样我们新建两个测试bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在配置类中定义bean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，如果<code>@Order</code>注解有效，那么<code>BaseDemo4</code>应该先被初始化</p>
<figure><img src="/imgs/191023/01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从上面的实际测试输出可以看出，@Order注解在上面的方式中也不生效，如果有兴趣的同学可以试一下，将上面配置类中的两个方法的顺序颠倒一下，会发现<code>BaseDemo4</code>先加载</p>
<h4> err.case3: @Order注解修饰配置类</h4>
<p>这也是一种常见的错误case，认为@Order注解是用来指定配置类的加载顺序的，然而真的是这样么?</p>
<p>我们创建两个测试的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果@Order注解生效，那么BConf配置类会优先初始化，那么我们实测一下
<img src="/imgs/191023/02.jpg" alt="" loading="lazy"></p>
<p>从上面的结果可以看出，并不是BConf先被加载；当然这种使用姿势，实际上和第一种错误case，并没有什么区别，配置类也是bean，前面不生效，这里当然也不会生效</p>
<p>那么是不是我们的理解不对导致的呢，实际上这个<code>@Order</code>放在配置类上之后，是这个配置类中定义的Bean的优先于另一个配置类中定义的Bean呢？</p>
<p>同样的我们测试下这种case，我们定义三个bean，两个conf</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将Demo1, Demo3放在一个配置中，Demo2放在另外一个配置中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果@Order注解实际上控制的是配置类中Bean的加载顺序，那么BConf1中的Bean应该优先加载，也就是说 Demo2 会优先于 Demo1, Demo3，实际测试一下，输出如</p>
<figure><img src="/imgs/191023/03.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>上面的输出结果和我们预期的并不一样，所以<code>@Order</code>注解来决定配置类的顺序也是不对的</p>
<h3> 2. @AutoConfigureOrder</h3>
<p>从命名来看，这个注解是用来指定配置类的顺序的，然而对于这个注解的错误使用也是非常多的，而大多的错误使用在于没有真正的了解到它的使用场景</p>
<p>接下来我们来演示一下错误的使用case</p>
<p>在工程内新建两个配置类，直接使用注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当注解生效时，BConf会优先级加载</p>
<figure><img src="/imgs/191023/04.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从输出结果来看，和我们预期的不一样；那么这个注解是不是作用于配置类中的Bean的顺序，而不是配置类本身呢？</p>
<p>同样的我们设计一个case验证一下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果DemoB后被加载，则说明上面的观点是错误的，实测结果如下</p>
<figure><img src="/imgs/191023/05.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>所以问题来了，<code>@AutoConfigureOrder</code>这个注解并不能指定配置类的顺序，还叫这个名，干啥？存粹是误导人不是!!!</p>
<p>接下来我们看一下<code>@Order</code>和<code>@AutoConfigureOrder</code>的正确使用方式</p>
<h2> III. 使用说明</h2>
<h3> 1. @Order</h3>
<p>先看一下这个注解的官方注释</p>
<blockquote>
<p>{@code @Order} defines the sort order for an annotated component.
Since Spring 4.0, annotation-based ordering is supported for many
kinds of components in Spring, even for collection injection where the order values
of the target components are taken into account (either from their target class or
from their {@code @Bean} method). While such order values may influence priorities
at injection points, please be aware that they do not influence singleton startup
order which is an orthogonal concern determined by dependency relationships and
{@code @DependsOn} declarations (influencing a runtime-determined dependency graph).</p>
</blockquote>
<p>最开始Order注解用于切面的优先级指定；在4.0之后对它的功能进行了增强，支持集合的注入时，指定集合中bean的顺序</p>
<p>并且特别指出了，它对于单实例的bean之间的顺序，没有任何影响；这句话根据我们上面的测试也可以验证</p>
<p>接下来我们需要看一下通过@Order注解来注入集合时，指定顺序的场景</p>
<p>首先我们定义两个Bean实现同一个接口，并添加上<code>@Order</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在一个测试bean中，注入<code>IBean</code>的列表，我们需要测试这个列表中的Bean的顺序是否和我们定义的<code>@Order</code>规则一致</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据我们的预期, anoBeanList集合中，anoBean2应该在前面</p>
<figure><img src="/imgs/191023/06.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>根据上面的输出，也可以看出列表中的顺序和我们预期的一致，并且 <code>AnoOrderBean1</code>与 <code>AnoOrderBean2</code> 的加载顺序和注解没有关系</p>
<h3> 2. @AutoConfigureOrder</h3>
<p>这个注解用来指定配置文件的加载顺序，然而前面的测试中并没有生效，那么正确的使用姿势是怎样的呢？</p>
<p><strong><code>@AutoConfigureOrder</code>适用于外部依赖的包中AutoConfig的顺序，而不能用来指定本包内的顺序</strong></p>
<p>为了验证上面的说法，我们再次新建两个工程，并指定自动配置类的顺序</p>
<p>工程一配置如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意自动配置类如要被正确加载，需要在工程的 <code>/META-INF/spring.factories</code>文件中定义</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>工程二的配置如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在项目内部添加一个配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为注解适用于外部依赖包中的自动配置类的顺序，所以上面三个配置类中，正确的话AdditionOrderConf2在AdditionOrderConf1之前；而OrderConf并不会收到注解的影响，默认环境下，内部定义的配置类会优于外部依赖，从下面的输出也可以佐证我们说明（当然为了验证确实如此，还应该调整下两个外部工程配置类的顺序，并观察下加载顺序是否随之改变，我们这里省略掉了）</p>
<figure><img src="/imgs/191023/07.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> IV. 小结</h2>
<p>本篇主要介绍了网上对<code>@Order</code>和<code>@AutoConfigureOrder</code>常见的错误使用姿势，并给出了正确的使用case。</p>
<p>下面用简单的几句话介绍一下正确的姿势</p>
<ul>
<li><code>@Order</code>注解不能指定bean的加载顺序，它适用于AOP的优先级，以及将多个Bean注入到集合时，这些bean在集合中的顺序</li>
<li><code>@AutoConfigureOrder</code>指定外部依赖的AutoConfig的加载顺序（即定义在<code>/META-INF/spring.factories</code>文件中的配置bean优先级)，在当前工程中使用这个注解并没有什么鸟用</li>
<li>同样的 <code>@AutoConfigureBefore</code>和 <code>@AutoConfigureAfter</code>这两个注解的适用范围和<code>@AutoConfigureOrder</code>一样</li>
</ul>
<h3> 0. 项目</h3>
<ul>
<li>工程：<a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li>
<li>源码模块:
<ul>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition</a></li>
<li><a href="https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition2" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/008-beanorder-addition2</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191023/00.jpg" type="image/jpeg"/>
    </item>
  </channel>
</rss>