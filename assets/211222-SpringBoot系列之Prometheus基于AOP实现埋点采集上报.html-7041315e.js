const e=JSON.parse('{"key":"v-18328f5c","path":"/spring/middle/Prometheus/211222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%9F%8B%E7%82%B9%E9%87%87%E9%9B%86%E4%B8%8A%E6%8A%A5.html","title":"4.基于AOP实现埋点采集上报","lang":"zh-CN","frontmatter":{"order":6,"title":"4.基于AOP实现埋点采集上报","tag":["Prometheus"],"category":["SpringBoot","中间件","Prometheus"],"date":"2021-12-22T19:30:15.000Z","keywords":["Prometheus","SpringBoot"],"description":"前面几篇文章介绍了SpringBoot继承Prometheus实现埋点上报，基本上可以非常简单的实现采样收集，对于由SpringBoot搭建的web应用，甚至是可以说是引入依赖，简单的配置下，剩下的啥也不用管，就可以配置一个REST应用的监控大盘 接下来我们通过AOP的方式，来定义一个自定义数据采集的功能，用于实现一些上面覆盖不到的场景（如应用内的定时任务执行情况，三方接口请求监控等） I. 方案确定与环境搭建 1.metric选择 通过前面的几篇文章，至少我们会了解到Prometheus的四种Metric，对于自定义的数据采集，根据最终希望监控的指标（每秒请求数 qps, 响应耗时 rt, 可用率 sla, 请求分布），我们这里选择Histogram","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/spring/middle/Prometheus/211222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%9F%8B%E7%82%B9%E9%87%87%E9%9B%86%E4%B8%8A%E6%8A%A5.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"4.基于AOP实现埋点采集上报"}],["meta",{"property":"og:description","content":"前面几篇文章介绍了SpringBoot继承Prometheus实现埋点上报，基本上可以非常简单的实现采样收集，对于由SpringBoot搭建的web应用，甚至是可以说是引入依赖，简单的配置下，剩下的啥也不用管，就可以配置一个REST应用的监控大盘 接下来我们通过AOP的方式，来定义一个自定义数据采集的功能，用于实现一些上面覆盖不到的场景（如应用内的定时任务执行情况，三方接口请求监控等） I. 方案确定与环境搭建 1.metric选择 通过前面的几篇文章，至少我们会了解到Prometheus的四种Metric，对于自定义的数据采集，根据最终希望监控的指标（每秒请求数 qps, 响应耗时 rt, 可用率 sla, 请求分布），我们这里选择Histogram"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-10T04:50:05.000Z"}],["meta",{"property":"article:tag","content":"Prometheus"}],["meta",{"property":"article:published_time","content":"2021-12-22T19:30:15.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-10T04:50:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.基于AOP实现埋点采集上报\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-22T19:30:15.000Z\\",\\"dateModified\\":\\"2023-02-10T04:50:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 方案确定与环境搭建","slug":"i-方案确定与环境搭建","link":"#i-方案确定与环境搭建","children":[{"level":3,"title":"1.metric选择","slug":"_1-metric选择","link":"#_1-metric选择","children":[]},{"level":3,"title":"2.项目依赖","slug":"_2-项目依赖","link":"#_2-项目依赖","children":[]},{"level":3,"title":"3. 配置信息","slug":"_3-配置信息","link":"#_3-配置信息","children":[]}]},{"level":2,"title":"II. AOP切面实现埋点上报","slug":"ii-aop切面实现埋点上报","link":"#ii-aop切面实现埋点上报","children":[{"level":3,"title":"1. 切面实现类","slug":"_1-切面实现类","link":"#_1-切面实现类","children":[]},{"level":3,"title":"2. 测试方法","slug":"_2-测试方法","link":"#_2-测试方法","children":[]},{"level":3,"title":"3. 启动类","slug":"_3-启动类","link":"#_3-启动类","children":[]},{"level":3,"title":"4. 业务大盘配置","slug":"_4-业务大盘配置","link":"#_4-业务大盘配置","children":[]}]},{"level":2,"title":"III. 不能错过的源码和相关知识点","slug":"iii-不能错过的源码和相关知识点","link":"#iii-不能错过的源码和相关知识点","children":[{"level":3,"title":"0. 项目源码","slug":"_0-项目源码","link":"#_0-项目源码","children":[]},{"level":3,"title":"1. 微信公众号: 一灰灰Blog","slug":"_1-微信公众号-一灰灰blog","link":"#_1-微信公众号-一灰灰blog","children":[]}]}],"git":{"createdTime":1676004605000,"updatedTime":1676004605000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":5.24,"words":1571},"filePathRelative":"spring/middle/Prometheus/211222-SpringBoot系列之Prometheus基于AOP实现埋点采集上报.md","localizedDate":"2021年12月22日","excerpt":"<p>前面几篇文章介绍了SpringBoot继承Prometheus实现埋点上报，基本上可以非常简单的实现采样收集，对于由SpringBoot搭建的web应用，甚至是可以说是引入依赖，简单的配置下，剩下的啥也不用管，就可以配置一个REST应用的监控大盘</p>\\n<p>接下来我们通过AOP的方式，来定义一个自定义数据采集的功能，用于实现一些上面覆盖不到的场景（如应用内的定时任务执行情况，三方接口请求监控等）</p>\\n<!--  more -->\\n<h2> I. 方案确定与环境搭建</h2>\\n<h3> 1.metric选择</h3>\\n<p>通过前面的几篇文章，至少我们会了解到Prometheus的四种Metric，对于自定义的数据采集，根据最终希望监控的指标（每秒请求数 qps, 响应耗时 rt, 可用率 sla, 请求分布），我们这里选择Histogram</p>","copyright":{},"autoDesc":true}');export{e as data};
