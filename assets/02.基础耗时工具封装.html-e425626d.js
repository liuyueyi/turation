const t=JSON.parse('{"key":"v-0ce7db52","path":"/column/app/trace-watch-dog/02.%E5%9F%BA%E7%A1%80%E8%80%97%E6%97%B6%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85.html","title":"2. 封装一个基础的耗时统计工具类","lang":"zh-CN","frontmatter":{"order":2,"title":"2. 封装一个基础的耗时统计工具类","tag":["trace-watch-dog"],"category":["技术组件"],"date":"2024-08-21T19:19:48.000Z","keywords":["Java","trace"],"description":"在日常的工作中，对某一段代码的执行耗时进行记录，属于相对常见的诉求，实现起来也很简单，不就是开始前记录一下当前时间戳，执行结束之后再记录一下当前时间戳，两者相减就可以得到我们想要的结果了 1. 时间戳差值法 这里主要借助的就是 System.currentTimeMillis() 来获取当前的时间戳（毫秒） 1.1 基本实现 先来看一下基本的使用姿势 // com.github.liuyueyi.hhui.trace.test.step.Step1#testCost long start = System.currentTimeMillis(); // ... 这里省略掉需要计算耗时的业务逻辑 long end = System.currentTimeMillis(); System.out.println(\\"cost: \\" + (end - start) + \\"ms\\");","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/column/app/trace-watch-dog/02.%E5%9F%BA%E7%A1%80%E8%80%97%E6%97%B6%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"2. 封装一个基础的耗时统计工具类"}],["meta",{"property":"og:description","content":"在日常的工作中，对某一段代码的执行耗时进行记录，属于相对常见的诉求，实现起来也很简单，不就是开始前记录一下当前时间戳，执行结束之后再记录一下当前时间戳，两者相减就可以得到我们想要的结果了 1. 时间戳差值法 这里主要借助的就是 System.currentTimeMillis() 来获取当前的时间戳（毫秒） 1.1 基本实现 先来看一下基本的使用姿势 // com.github.liuyueyi.hhui.trace.test.step.Step1#testCost long start = System.currentTimeMillis(); // ... 这里省略掉需要计算耗时的业务逻辑 long end = System.currentTimeMillis(); System.out.println(\\"cost: \\" + (end - start) + \\"ms\\");"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-21T09:27:37.000Z"}],["meta",{"property":"article:tag","content":"trace-watch-dog"}],["meta",{"property":"article:published_time","content":"2024-08-21T19:19:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-21T09:27:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 封装一个基础的耗时统计工具类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-21T19:19:48.000Z\\",\\"dateModified\\":\\"2024-08-21T09:27:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 时间戳差值法","slug":"_1-时间戳差值法","link":"#_1-时间戳差值法","children":[{"level":3,"title":"1.1 基本实现","slug":"_1-1-基本实现","link":"#_1-1-基本实现","children":[]},{"level":3,"title":"1.2 公用方法","slug":"_1-2-公用方法","link":"#_1-2-公用方法","children":[]},{"level":3,"title":"1.3 实现小结","slug":"_1-3-实现小结","link":"#_1-3-实现小结","children":[]}]},{"level":2,"title":"2. StopWatch工具类","slug":"_2-stopwatch工具类","link":"#_2-stopwatch工具类","children":[{"level":3,"title":"2.1 使用体验","slug":"_2-1-使用体验","link":"#_2-1-使用体验","children":[]},{"level":3,"title":"2.2 使用封装","slug":"_2-2-使用封装","link":"#_2-2-使用封装","children":[]},{"level":3,"title":"2.3 StopWatch特性小结","slug":"_2-3-stopwatch特性小结","link":"#_2-3-stopwatch特性小结","children":[]}]},{"level":2,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[]}],"git":{"createdTime":1724232457000,"updatedTime":1724232457000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":6.07,"words":1820},"filePathRelative":"column/app/trace-watch-dog/02.基础耗时工具封装.md","localizedDate":"2024年8月21日","excerpt":"<p>在日常的工作中，对某一段代码的执行耗时进行记录，属于相对常见的诉求，实现起来也很简单，不就是开始前记录一下当前时间戳，执行结束之后再记录一下当前时间戳，两者相减就可以得到我们想要的结果了</p>\\n<h2> 1. 时间戳差值法</h2>\\n<p>这里主要借助的就是 <code>System.currentTimeMillis()</code> 来获取当前的时间戳（毫秒）</p>\\n<h3> 1.1 基本实现</h3>\\n<p>先来看一下基本的使用姿势</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// com.github.liuyueyi.hhui.trace.test.step.Step1#testCost</span>\\n<span class=\\"token keyword\\">long</span> start <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentTimeMillis</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// ... 这里省略掉需要计算耗时的业务逻辑</span>\\n<span class=\\"token keyword\\">long</span> end <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentTimeMillis</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"cost: \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"ms\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{t as data};
