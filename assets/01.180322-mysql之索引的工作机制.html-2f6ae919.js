const e=JSON.parse('{"key":"v-3ea201c5","path":"/db/mysql/high/01.180322-mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.html","title":"mysql之索引的工作机制","lang":"zh-CN","frontmatter":{"title":"mysql之索引的工作机制","tag":["Mysql"],"category":["DB","Mysql"],"date":"2018-03-22T12:26:49.000Z","order":1,"description":"mysql之高性能索引 当db的量达到一定数量级之后，每次进行全表扫描效率就会很低，因此一个常见的方案是建立一些必要的索引作为优化手段，那么问题就来了： 那么什么是索引呢？ 索引的实现原理是怎样的？ 我们通常说的聚集索引，非聚集索引的区别是什么？ 如何创建和使用索引呢？","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/db/mysql/high/01.180322-mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"mysql之索引的工作机制"}],["meta",{"property":"og:description","content":"mysql之高性能索引 当db的量达到一定数量级之后，每次进行全表扫描效率就会很低，因此一个常见的方案是建立一些必要的索引作为优化手段，那么问题就来了： 那么什么是索引呢？ 索引的实现原理是怎样的？ 我们通常说的聚集索引，非聚集索引的区别是什么？ 如何创建和使用索引呢？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T10:41:58.000Z"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2018-03-22T12:26:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T10:41:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql之索引的工作机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-03-22T12:26:49.000Z\\",\\"dateModified\\":\\"2024-08-02T10:41:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 索引介绍","slug":"i-索引介绍","link":"#i-索引介绍","children":[{"level":3,"title":"1. 几种树的结构","slug":"_1-几种树的结构","link":"#_1-几种树的结构","children":[]},{"level":3,"title":"2. InnoDB引擎之B+树","slug":"_2-innodb引擎之b-树","link":"#_2-innodb引擎之b-树","children":[]},{"level":3,"title":"3. hash索引","slug":"_3-hash索引","link":"#_3-hash索引","children":[]},{"level":3,"title":"4. 聚集索引与非聚集索引","slug":"_4-聚集索引与非聚集索引","link":"#_4-聚集索引与非聚集索引","children":[]},{"level":3,"title":"5. 索引的优点","slug":"_5-索引的优点","link":"#_5-索引的优点","children":[]},{"level":3,"title":"6. 适用范围","slug":"_6-适用范围","link":"#_6-适用范围","children":[]}]},{"level":2,"title":"II. 索引的使用原则","slug":"ii-索引的使用原则","link":"#ii-索引的使用原则","children":[{"level":3,"title":"1. 索引的几个语法","slug":"_1-索引的几个语法","link":"#_1-索引的几个语法","children":[]},{"level":3,"title":"2. 索引使用规则","slug":"_2-索引使用规则","link":"#_2-索引使用规则","children":[]},{"level":3,"title":"3. 索引缺点","slug":"_3-索引缺点","link":"#_3-索引缺点","children":[]},{"level":3,"title":"4. 注意事项","slug":"_4-注意事项","link":"#_4-注意事项","children":[]},{"level":3,"title":"5. sql使用策略","slug":"_5-sql使用策略","link":"#_5-sql使用策略","children":[]},{"level":3,"title":"6. mysql使用查询","slug":"_6-mysql使用查询","link":"#_6-mysql使用查询","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":1722595318000,"updatedTime":1722595318000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":10.73,"words":3219},"filePathRelative":"db/mysql/high/01.180322-mysql之索引的工作机制.md","localizedDate":"2018年3月22日","excerpt":"<h1> mysql之高性能索引</h1>\\n<p>当db的量达到一定数量级之后，每次进行全表扫描效率就会很低，因此一个常见的方案是建立一些必要的索引作为优化手段，那么问题就来了：</p>\\n<ul>\\n<li>那么什么是索引呢？</li>\\n<li>索引的实现原理是怎样的？</li>\\n<li>我们通常说的聚集索引，非聚集索引的区别是什么？</li>\\n<li>如何创建和使用索引呢？</li>\\n</ul>\\n","copyright":{},"autoDesc":true}');export{e as data};
