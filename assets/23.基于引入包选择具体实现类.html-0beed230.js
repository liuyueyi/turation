const e=JSON.parse('{"key":"v-39675502","path":"/java/skill/23.%E5%9F%BA%E4%BA%8E%E5%BC%95%E5%85%A5%E5%8C%85%E9%80%89%E6%8B%A9%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB.html","title":"23.基于引入包选择具体实现类","lang":"zh-CN","frontmatter":{"title":"23.基于引入包选择具体实现类","order":23,"tag":["JDK","编程技巧"],"category":["Java","编程技巧"],"date":"2022-08-24T18:54:08.000Z","keywords":["Java","Maven","Json"],"description":"实战23：基于引入包选择具体实现类 最近遇到一个需求场景，开源的工具包，新增了一个高级特性，会依赖json序列化工具，来做一些特殊操作；但是，这个辅助功能并不是必须的，也就是说对于使用这个工具包的业务方而言，正常使用完全不需要json相关的功能；如果我强引用某个json工具，一是对于不适用高级特性的用户而言没有必要；二则是我引入的json工具极有可能与使用者的不一致，会增加使用者的成本 因此我希望这个工具包对外提供时，并不会引入具体的json工具依赖；也就是说maven依赖中的&lt;scope&gt;设置为provided；具体的json序列化的实现，则取决于调用方自身引入了什么json工具包 那么可以怎么实现上面这个方式呢？","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/skill/23.%E5%9F%BA%E4%BA%8E%E5%BC%95%E5%85%A5%E5%8C%85%E9%80%89%E6%8B%A9%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"23.基于引入包选择具体实现类"}],["meta",{"property":"og:description","content":"实战23：基于引入包选择具体实现类 最近遇到一个需求场景，开源的工具包，新增了一个高级特性，会依赖json序列化工具，来做一些特殊操作；但是，这个辅助功能并不是必须的，也就是说对于使用这个工具包的业务方而言，正常使用完全不需要json相关的功能；如果我强引用某个json工具，一是对于不适用高级特性的用户而言没有必要；二则是我引入的json工具极有可能与使用者的不一致，会增加使用者的成本 因此我希望这个工具包对外提供时，并不会引入具体的json工具依赖；也就是说maven依赖中的&lt;scope&gt;设置为provided；具体的json序列化的实现，则取决于调用方自身引入了什么json工具包 那么可以怎么实现上面这个方式呢？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T14:22:08.000Z"}],["meta",{"property":"article:tag","content":"JDK"}],["meta",{"property":"article:tag","content":"编程技巧"}],["meta",{"property":"article:published_time","content":"2022-08-24T18:54:08.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T14:22:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"23.基于引入包选择具体实现类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-24T18:54:08.000Z\\",\\"dateModified\\":\\"2023-02-17T14:22:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.实现方式","slug":"_1-实现方式","link":"#_1-实现方式","children":[{"level":3,"title":"1.1. 任务说明","slug":"_1-1-任务说明","link":"#_1-1-任务说明","children":[]},{"level":3,"title":"1.2.具体实现","slug":"_1-2-具体实现","link":"#_1-2-具体实现","children":[]},{"level":3,"title":"1.3. 扩展机制","slug":"_1-3-扩展机制","link":"#_1-3-扩展机制","children":[]}]},{"level":2,"title":"2. 小结","slug":"_2-小结","link":"#_2-小结","children":[]}],"git":{"createdTime":1676643728000,"updatedTime":1676643728000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":6.64,"words":1993},"filePathRelative":"java/skill/23.基于引入包选择具体实现类.md","localizedDate":"2022年8月24日","excerpt":"<h1> 实战23：基于引入包选择具体实现类</h1>\\n<p>最近遇到一个需求场景，开源的工具包，新增了一个高级特性，会依赖json序列化工具，来做一些特殊操作；但是，这个辅助功能并不是必须的，也就是说对于使用这个工具包的业务方而言，正常使用完全不需要json相关的功能；如果我强引用某个json工具，一是对于不适用高级特性的用户而言没有必要；二则是我引入的json工具极有可能与使用者的不一致，会增加使用者的成本</p>\\n<p>因此我希望这个工具包对外提供时，并不会引入具体的json工具依赖；也就是说maven依赖中的<code>&lt;scope&gt;</code>设置为<code>provided</code>；具体的json序列化的实现，则取决于调用方自身引入了什么json工具包</p>\\n<p>那么可以怎么实现上面这个方式呢？</p>\\n","copyright":{},"autoDesc":true}');export{e as data};
