const t=JSON.parse('{"key":"v-0af571f1","path":"/column/app/trace-watch-dog/03.%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E8%80%97%E6%97%B6%E5%88%86%E5%B8%83%E5%B7%A5%E5%85%B7%E7%B1%BB.html","title":"3. 从0到1封装一个通用的耗时统计工具类","lang":"zh-CN","frontmatter":{"order":3,"title":"3. 从0到1封装一个通用的耗时统计工具类","tag":["trace-watch-dog"],"category":["技术组件"],"date":"2024-08-22T09:19:48.000Z","keywords":["Java","trace"],"description":"接下来本文将再前面的基础耗时工具类的基础之上，从0到1写一个支持多线程场景下的耗时统计工具类 1. 设计思路 1.1 明确思路 首先明确目标： 实现一个并发安全的StopWatch工具类 主要挑战： 并发安全 实现思路： 参照StopWatch的实现，解决并发问题 1.2 设计思路 到这里，假定大家已经看过了StopWatch的实现源码（实际上没看过也没啥影响）","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/column/app/trace-watch-dog/03.%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E8%80%97%E6%97%B6%E5%88%86%E5%B8%83%E5%B7%A5%E5%85%B7%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"3. 从0到1封装一个通用的耗时统计工具类"}],["meta",{"property":"og:description","content":"接下来本文将再前面的基础耗时工具类的基础之上，从0到1写一个支持多线程场景下的耗时统计工具类 1. 设计思路 1.1 明确思路 首先明确目标： 实现一个并发安全的StopWatch工具类 主要挑战： 并发安全 实现思路： 参照StopWatch的实现，解决并发问题 1.2 设计思路 到这里，假定大家已经看过了StopWatch的实现源码（实际上没看过也没啥影响）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-22T10:54:29.000Z"}],["meta",{"property":"article:tag","content":"trace-watch-dog"}],["meta",{"property":"article:published_time","content":"2024-08-22T09:19:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-22T10:54:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 从0到1封装一个通用的耗时统计工具类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T09:19:48.000Z\\",\\"dateModified\\":\\"2024-08-22T10:54:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 设计思路","slug":"_1-设计思路","link":"#_1-设计思路","children":[{"level":3,"title":"1.1 明确思路","slug":"_1-1-明确思路","link":"#_1-1-明确思路","children":[]},{"level":3,"title":"1.2 设计思路","slug":"_1-2-设计思路","link":"#_1-2-设计思路","children":[]}]},{"level":2,"title":"2. 实现","slug":"_2-实现","link":"#_2-实现","children":[{"level":3,"title":"2.1 基础实现","slug":"_2-1-基础实现","link":"#_2-1-基础实现","children":[]},{"level":3,"title":"2.2 使用姿势优化","slug":"_2-2-使用姿势优化","link":"#_2-2-使用姿势优化","children":[]},{"level":3,"title":"2.3 并发优化","slug":"_2-3-并发优化","link":"#_2-3-并发优化","children":[]},{"level":3,"title":"2.4 小结","slug":"_2-4-小结","link":"#_2-4-小结","children":[]}]}],"git":{"createdTime":1724324069000,"updatedTime":1724324069000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":10.49,"words":3148},"filePathRelative":"column/app/trace-watch-dog/03.封装一个通用的耗时分布工具类.md","localizedDate":"2024年8月22日","excerpt":"<p>接下来本文将再前面的基础耗时工具类的基础之上，从0到1写一个支持多线程场景下的耗时统计工具类</p>\\n<h2> 1. 设计思路</h2>\\n<h3> 1.1 明确思路</h3>\\n<p>首先明确目标：</p>\\n<ul>\\n<li>实现一个并发安全的<code>StopWatch</code>工具类</li>\\n</ul>\\n<p>主要挑战：</p>\\n<ul>\\n<li>并发安全</li>\\n</ul>\\n<p>实现思路：</p>\\n<ul>\\n<li>参照<code>StopWatch</code>的实现，解决并发问题</li>\\n</ul>\\n<h3> 1.2 设计思路</h3>\\n<p>到这里，假定大家已经看过了<code>StopWatch</code>的实现源码（实际上没看过也没啥影响）</p>","copyright":{},"autoDesc":true}');export{t as data};
