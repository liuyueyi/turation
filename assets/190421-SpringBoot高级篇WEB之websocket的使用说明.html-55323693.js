const e=JSON.parse('{"key":"v-208ece3e","path":"/spring/web/WebSocket/190421-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87WEB%E4%B9%8Bwebsocket%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html","title":"1.springboot + websocket初体验","lang":"zh-CN","frontmatter":{"order":1,"title":"1.springboot + websocket初体验","tag":["WebSocket"],"category":["SpringBoot","WEB系列","WebSocket"],"date":"2019-04-21T22:37:03.000Z","keywords":"SpringBoot,WebSocket,SpringMVC,Web","description":"常见的web应用大多是提供基础的REST服务，简单来讲就是用户发起一个请求，然后给出反应，可以理解为由客户主动发起的单边操作；那么有没有一种技术是服务端主动发起，与客户端进行交互的？ 非常常见的几个需求场景，如聊天室的实现，股票的委托、成交实时刷新，信息推送机制，应用日志实时刷新等用我们传统的web交互方式，就不太容易做到了，本篇博文将介绍下HTML5中引入的WebSocket，可以如何实现客户端和服务端之间的双端通信","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/spring/web/WebSocket/190421-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87WEB%E4%B9%8Bwebsocket%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"1.springboot + websocket初体验"}],["meta",{"property":"og:description","content":"常见的web应用大多是提供基础的REST服务，简单来讲就是用户发起一个请求，然后给出反应，可以理解为由客户主动发起的单边操作；那么有没有一种技术是服务端主动发起，与客户端进行交互的？ 非常常见的几个需求场景，如聊天室的实现，股票的委托、成交实时刷新，信息推送机制，应用日志实时刷新等用我们传统的web交互方式，就不太容易做到了，本篇博文将介绍下HTML5中引入的WebSocket，可以如何实现客户端和服务端之间的双端通信"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-10T04:50:05.000Z"}],["meta",{"property":"article:tag","content":"WebSocket"}],["meta",{"property":"article:published_time","content":"2019-04-21T22:37:03.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-10T04:50:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.springboot + websocket初体验\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-04-21T22:37:03.000Z\\",\\"dateModified\\":\\"2023-02-10T04:50:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 前期准备","slug":"i-前期准备","link":"#i-前期准备","children":[{"level":3,"title":"1. 配置如下","slug":"_1-配置如下","link":"#_1-配置如下","children":[]},{"level":3,"title":"2. 辅助文档","slug":"_2-辅助文档","link":"#_2-辅助文档","children":[]}]},{"level":2,"title":"II. WebSocket HelloWorld版构建","slug":"ii-websocket-helloworld版构建","link":"#ii-websocket-helloworld版构建","children":[{"level":3,"title":"1. configuration 配置","slug":"_1-configuration-配置","link":"#_1-configuration-配置","children":[]},{"level":3,"title":"2. WebSocketHandler 处理类","slug":"_2-websockethandler-处理类","link":"#_2-websockethandler-处理类","children":[]},{"level":3,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]}]},{"level":2,"title":"III. WebSocket 实现简单的聊天","slug":"iii-websocket-实现简单的聊天","link":"#iii-websocket-实现简单的聊天","children":[{"level":3,"title":"1. RealTalkWebSocketHandler","slug":"_1-realtalkwebsockethandler","link":"#_1-realtalkwebsockethandler","children":[]},{"level":3,"title":"2. 注册handler","slug":"_2-注册handler","link":"#_2-注册handler","children":[]},{"level":3,"title":"3. 测试","slug":"_3-测试-1","link":"#_3-测试-1","children":[]},{"level":3,"title":"4. 小结","slug":"_4-小结","link":"#_4-小结","children":[]}]},{"level":2,"title":"II. 其他","slug":"ii-其他","link":"#ii-其他","children":[{"level":3,"title":"0. 项目","slug":"_0-项目","link":"#_0-项目","children":[]}]}],"git":{"createdTime":1676004605000,"updatedTime":1676004605000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":6.39,"words":1916},"filePathRelative":"spring/web/WebSocket/190421-SpringBoot高级篇WEB之websocket的使用说明.md","localizedDate":"2019年4月21日","excerpt":"<p>常见的web应用大多是提供基础的REST服务，简单来讲就是用户发起一个请求，然后给出反应，可以理解为由客户主动发起的单边操作；那么有没有一种技术是服务端主动发起，与客户端进行交互的？</p>\\n<p>非常常见的几个需求场景，如聊天室的实现，股票的委托、成交实时刷新，信息推送机制，应用日志实时刷新等用我们传统的web交互方式，就不太容易做到了，本篇博文将介绍下HTML5中引入的WebSocket，可以如何实现客户端和服务端之间的双端通信</p>\\n","copyright":{},"autoDesc":true}');export{e as data};
