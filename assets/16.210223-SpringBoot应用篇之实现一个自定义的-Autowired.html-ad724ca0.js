const e=JSON.parse('{"key":"v-391a22c0","path":"/spring/basic/%E5%AE%9E%E6%88%98/16.210223-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-Autowired.html","title":"5.实现一个自定义的@Autowired（应用篇）","lang":"zh-CN","frontmatter":{"order":16,"title":"5.实现一个自定义的@Autowired（应用篇）","tag":["Bean"],"category":["SpringBoot","基础系列","Bean","应用篇"],"date":"2021-02-23T19:40:27.000Z","keywords":"bean 自定义注解 ioc DI spring BeanPostProcessor","description":"在Spring的生态中，借助@Autowired注解来实现依赖注入，可以说是非常普遍的事情了，如果让我们自定义一个注解，也实现类似的功能，那么我们可以怎么做呢? 本文介绍如何实现一个自定义的@Autowired，实现依赖服务注入 主要知识点: BeanPostProcessor 代理类创建","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/16.210223-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-Autowired.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"5.实现一个自定义的@Autowired（应用篇）"}],["meta",{"property":"og:description","content":"在Spring的生态中，借助@Autowired注解来实现依赖注入，可以说是非常普遍的事情了，如果让我们自定义一个注解，也实现类似的功能，那么我们可以怎么做呢? 本文介绍如何实现一个自定义的@Autowired，实现依赖服务注入 主要知识点: BeanPostProcessor 代理类创建"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-03T13:31:05.000Z"}],["meta",{"property":"article:tag","content":"Bean"}],["meta",{"property":"article:published_time","content":"2021-02-23T19:40:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-03T13:31:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.实现一个自定义的@Autowired（应用篇）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-23T19:40:27.000Z\\",\\"dateModified\\":\\"2023-02-03T13:31:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 项目环境","slug":"i-项目环境","link":"#i-项目环境","children":[]},{"level":2,"title":"II. 实现姿势","slug":"ii-实现姿势","link":"#ii-实现姿势","children":[{"level":3,"title":"1. 代理封装类","slug":"_1-代理封装类","link":"#_1-代理封装类","children":[]},{"level":3,"title":"2. 自定义注解","slug":"_2-自定义注解","link":"#_2-自定义注解","children":[]},{"level":3,"title":"3. 自定义注入","slug":"_3-自定义注入","link":"#_3-自定义注入","children":[]},{"level":3,"title":"4. 测试","slug":"_4-测试","link":"#_4-测试","children":[]}]},{"level":2,"title":"II. 其他","slug":"ii-其他","link":"#ii-其他","children":[{"level":3,"title":"0. 项目","slug":"_0-项目","link":"#_0-项目","children":[]}]}],"git":{"createdTime":1675411610000,"updatedTime":1675431065000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":2}]},"readingTime":{"minutes":2.6,"words":780},"filePathRelative":"spring/basic/实战/16.210223-SpringBoot应用篇之实现一个自定义的-Autowired.md","localizedDate":"2021年2月23日","excerpt":"<p>在Spring的生态中，借助<code>@Autowired</code>注解来实现依赖注入，可以说是非常普遍的事情了，如果让我们自定义一个注解，也实现类似的功能，那么我们可以怎么做呢?</p>\\n<p>本文介绍如何实现一个自定义的<code>@Autowired</code>，实现依赖服务注入</p>\\n<p>主要知识点:</p>\\n<ul>\\n<li><code>BeanPostProcessor</code></li>\\n<li>代理类创建</li>\\n</ul>\\n","copyright":{},"autoDesc":true}');export{e as data};
