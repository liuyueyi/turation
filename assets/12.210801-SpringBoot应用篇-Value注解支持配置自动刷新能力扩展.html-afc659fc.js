const e=JSON.parse('{"key":"v-41710512","path":"/spring/basic/%E9%85%8D%E7%BD%AE/12.210801-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87-Value%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E8%83%BD%E5%8A%9B%E6%89%A9%E5%B1%95.html","title":"12.@Value注解支持配置自动刷新能力扩展","lang":"zh-CN","frontmatter":{"order":12,"title":"12.@Value注解支持配置自动刷新能力扩展","tag":["Value"],"category":["SpringBoot","基础系列","配置"],"date":"2021-08-01T16:04:20.000Z","keywords":"springboot value BeanPostProcessorAdapter 动态刷新","description":"在我们的日常开发中，使用@Value来绑定配置属于非常常见的基础操作，但是这个配置注入是一次性的，简单来说就是配置一旦赋值，则不会再修改； 通常来讲，这个并没有什么问题，基础的SpringBoot项目的配置也基本不存在配置变更，如果有使用过SpringCloudConfig的小伙伴，会知道@Value可以绑定远程配置，并支持动态刷新 接下来本文将通过一个实例来演示下，如何让@Value注解支持配置刷新；本文将涉及到以下知识点 BeanPostProcessorAdapter + 自定义注解：获取支持自动刷新的配置类 MapPropertySource：实现配置动态变更","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E9%85%8D%E7%BD%AE/12.210801-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87-Value%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E8%83%BD%E5%8A%9B%E6%89%A9%E5%B1%95.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"12.@Value注解支持配置自动刷新能力扩展"}],["meta",{"property":"og:description","content":"在我们的日常开发中，使用@Value来绑定配置属于非常常见的基础操作，但是这个配置注入是一次性的，简单来说就是配置一旦赋值，则不会再修改； 通常来讲，这个并没有什么问题，基础的SpringBoot项目的配置也基本不存在配置变更，如果有使用过SpringCloudConfig的小伙伴，会知道@Value可以绑定远程配置，并支持动态刷新 接下来本文将通过一个实例来演示下，如何让@Value注解支持配置刷新；本文将涉及到以下知识点 BeanPostProcessorAdapter + 自定义注解：获取支持自动刷新的配置类 MapPropertySource：实现配置动态变更"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-03T13:31:05.000Z"}],["meta",{"property":"article:tag","content":"Value"}],["meta",{"property":"article:published_time","content":"2021-08-01T16:04:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-03T13:31:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12.@Value注解支持配置自动刷新能力扩展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-01T16:04:20.000Z\\",\\"dateModified\\":\\"2023-02-03T13:31:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 项目环境","slug":"i-项目环境","link":"#i-项目环境","children":[{"level":3,"title":"1. 项目依赖","slug":"_1-项目依赖","link":"#_1-项目依赖","children":[]}]},{"level":2,"title":"II. 配置动态刷新支持","slug":"ii-配置动态刷新支持","link":"#ii-配置动态刷新支持","children":[{"level":3,"title":"1. 思路介绍","slug":"_1-思路介绍","link":"#_1-思路介绍","children":[]},{"level":3,"title":"2. 修改配置","slug":"_2-修改配置","link":"#_2-修改配置","children":[]},{"level":3,"title":"3. 配置同步","slug":"_3-配置同步","link":"#_3-配置同步","children":[]},{"level":3,"title":"4. 实例演示","slug":"_4-实例演示","link":"#_4-实例演示","children":[]},{"level":3,"title":"5.小结","slug":"_5-小结","link":"#_5-小结","children":[]}]},{"level":2,"title":"III. 不能错过的源码和相关知识点","slug":"iii-不能错过的源码和相关知识点","link":"#iii-不能错过的源码和相关知识点","children":[{"level":3,"title":"0. 项目","slug":"_0-项目","link":"#_0-项目","children":[]}]}],"git":{"createdTime":1675411610000,"updatedTime":1675431065000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":2}]},"readingTime":{"minutes":7.24,"words":2173},"filePathRelative":"spring/basic/配置/12.210801-SpringBoot应用篇-Value注解支持配置自动刷新能力扩展.md","localizedDate":"2021年8月1日","excerpt":"<p>在我们的日常开发中，使用<code>@Value</code>来绑定配置属于非常常见的基础操作，但是这个配置注入是一次性的，简单来说就是配置一旦赋值，则不会再修改；\\n通常来讲，这个并没有什么问题，基础的SpringBoot项目的配置也基本不存在配置变更，如果有使用过SpringCloudConfig的小伙伴，会知道<code>@Value</code>可以绑定远程配置，并支持动态刷新</p>\\n<p>接下来本文将通过一个实例来演示下，如何让<code>@Value</code>注解支持配置刷新；本文将涉及到以下知识点</p>\\n<ul>\\n<li>BeanPostProcessorAdapter + 自定义注解：获取支持自动刷新的配置类</li>\\n<li>MapPropertySource：实现配置动态变更</li>\\n</ul>\\n","copyright":{},"autoDesc":true}');export{e as data};
