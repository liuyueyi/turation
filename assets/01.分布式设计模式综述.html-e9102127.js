const l=JSON.parse('{"key":"v-351da187","path":"/column/arch/distribute/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%BC%E8%BF%B0.html","title":"分布式设计模式综述","lang":"zh-CN","frontmatter":{"order":1,"title":"分布式设计模式综述","tag":["分布式"],"category":["分布式","设计模式"],"date":"2022-07-08T19:27:54.000Z","keywords":["分布式","设计模式"],"description":"天天说分布式分布式，那么我们是否知道什么是分布式，分布式会遇到什么问题，有哪些理论支撑，有哪些经典的应对方案，业界是如何设计并保证分布式系统的高可用呢？ 1.架构设计 这一节将从一些经典的开源系统架构设计出发，来看一下，如何设计一个高质量的分布式系统； 而一般的设计出发点，无外乎 冗余：简单理解为找个备胎，现任挂掉之后，备胎顶上 拆分：不能让一个人承担所有的重任，拆分下，每个人负担一部分，压力均摊 1.1 主备架构 给现有的服务搭建一个备用的服务，两者功能完全一致，区别在于平时只有主应用对外提供服务能力；而备应用则只需要保证与主应用能力一致，随时待机即可，并不用对外提供服务；当主应用出现故障之后，将备应用切换为主应用，原主应用下线；迅速的主备切换可以有效的缩短故障时间","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/column/arch/distribute/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%BC%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"分布式设计模式综述"}],["meta",{"property":"og:description","content":"天天说分布式分布式，那么我们是否知道什么是分布式，分布式会遇到什么问题，有哪些理论支撑，有哪些经典的应对方案，业界是如何设计并保证分布式系统的高可用呢？ 1.架构设计 这一节将从一些经典的开源系统架构设计出发，来看一下，如何设计一个高质量的分布式系统； 而一般的设计出发点，无外乎 冗余：简单理解为找个备胎，现任挂掉之后，备胎顶上 拆分：不能让一个人承担所有的重任，拆分下，每个人负担一部分，压力均摊 1.1 主备架构 给现有的服务搭建一个备用的服务，两者功能完全一致，区别在于平时只有主应用对外提供服务能力；而备应用则只需要保证与主应用能力一致，随时待机即可，并不用对外提供服务；当主应用出现故障之后，将备应用切换为主应用，原主应用下线；迅速的主备切换可以有效的缩短故障时间"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T08:58:55.000Z"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:published_time","content":"2022-07-08T19:27:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T08:58:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式设计模式综述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-08T19:27:54.000Z\\",\\"dateModified\\":\\"2024-07-29T08:58:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.架构设计","slug":"_1-架构设计","link":"#_1-架构设计","children":[{"level":3,"title":"1.1 主备架构","slug":"_1-1-主备架构","link":"#_1-1-主备架构","children":[]},{"level":3,"title":"1.2 主从架构","slug":"_1-2-主从架构","link":"#_1-2-主从架构","children":[]},{"level":3,"title":"1.3 多主多从架构","slug":"_1-3-多主多从架构","link":"#_1-3-多主多从架构","children":[]},{"level":3,"title":"1.4 普通集群模式","slug":"_1-4-普通集群模式","link":"#_1-4-普通集群模式","children":[]},{"level":3,"title":"1.5 数据分片架构","slug":"_1-5-数据分片架构","link":"#_1-5-数据分片架构","children":[]},{"level":3,"title":"1.6 一灰灰的小结","slug":"_1-6-一灰灰的小结","link":"#_1-6-一灰灰的小结","children":[]}]},{"level":2,"title":"2.理论基础","slug":"_2-理论基础","link":"#_2-理论基础","children":[{"level":3,"title":"2.1 CAP定理","slug":"_2-1-cap定理","link":"#_2-1-cap定理","children":[]},{"level":3,"title":"2.2 BASE理论","slug":"_2-2-base理论","link":"#_2-2-base理论","children":[]},{"level":3,"title":"2.3 PACELEC 定理","slug":"_2-3-pacelec-定理","link":"#_2-3-pacelec-定理","children":[]},{"level":3,"title":"2.4 Paxos共识算法","slug":"_2-4-paxos共识算法","link":"#_2-4-paxos共识算法","children":[]},{"level":3,"title":"2.5 Raft算法","slug":"_2-5-raft算法","link":"#_2-5-raft算法","children":[]},{"level":3,"title":"2.6 ZAB协议","slug":"_2-6-zab协议","link":"#_2-6-zab协议","children":[]},{"level":3,"title":"2.7 2PC协议","slug":"_2-7-2pc协议","link":"#_2-7-2pc协议","children":[]},{"level":3,"title":"2.8 3PC协议","slug":"_2-8-3pc协议","link":"#_2-8-3pc协议","children":[]},{"level":3,"title":"2.9 Gossip协议","slug":"_2-9-gossip协议","link":"#_2-9-gossip协议","children":[]},{"level":3,"title":"2.10 一灰灰的小结","slug":"_2-10-一灰灰的小结","link":"#_2-10-一灰灰的小结","children":[]}]},{"level":2,"title":"3.算法","slug":"_3-算法","link":"#_3-算法","children":[{"level":3,"title":"3.1 一致性hash算法","slug":"_3-1-一致性hash算法","link":"#_3-1-一致性hash算法","children":[]},{"level":3,"title":"3.2 Quorum NWR算法","slug":"_3-2-quorum-nwr算法","link":"#_3-2-quorum-nwr算法","children":[]},{"level":3,"title":"3.3 PBFT拜占庭算法","slug":"_3-3-pbft拜占庭算法","link":"#_3-3-pbft拜占庭算法","children":[]},{"level":3,"title":"3.4 PoW算法","slug":"_3-4-pow算法","link":"#_3-4-pow算法","children":[]},{"level":3,"title":"3.5 一灰灰的小结","slug":"_3-5-一灰灰的小结","link":"#_3-5-一灰灰的小结","children":[]}]},{"level":2,"title":"4.技术思想","slug":"_4-技术思想","link":"#_4-技术思想","children":[{"level":3,"title":"4.1 CQRS","slug":"_4-1-cqrs","link":"#_4-1-cqrs","children":[]},{"level":3,"title":"4.2 复制负载平衡服务","slug":"_4-2-复制负载平衡服务","link":"#_4-2-复制负载平衡服务","children":[]},{"level":3,"title":"4.3 心跳机制","slug":"_4-3-心跳机制","link":"#_4-3-心跳机制","children":[]},{"level":3,"title":"4.4 租约机制","slug":"_4-4-租约机制","link":"#_4-4-租约机制","children":[]},{"level":3,"title":"4.5 Leader & Follow","slug":"_4-5-leader-follow","link":"#_4-5-leader-follow","children":[]},{"level":3,"title":"4.6 Fencing","slug":"_4-6-fencing","link":"#_4-6-fencing","children":[]},{"level":3,"title":"4.7 Quorum法定人数","slug":"_4-7-quorum法定人数","link":"#_4-7-quorum法定人数","children":[]},{"level":3,"title":"4.8 High-Water mark高水位线","slug":"_4-8-high-water-mark高水位线","link":"#_4-8-high-water-mark高水位线","children":[]},{"level":3,"title":"4.9 Phi 累计故障检测","slug":"_4-9-phi-累计故障检测","link":"#_4-9-phi-累计故障检测","children":[]},{"level":3,"title":"4.10 Write-ahead Log预写日志","slug":"_4-10-write-ahead-log预写日志","link":"#_4-10-write-ahead-log预写日志","children":[]},{"level":3,"title":"4.11 分段日志","slug":"_4-11-分段日志","link":"#_4-11-分段日志","children":[]},{"level":3,"title":"4.12 checksum校验","slug":"_4-12-checksum校验","link":"#_4-12-checksum校验","children":[]},{"level":3,"title":"4.13 一灰灰的小结","slug":"_4-13-一灰灰的小结","link":"#_4-13-一灰灰的小结","children":[]}]},{"level":2,"title":"5.分布式系统解决方案","slug":"_5-分布式系统解决方案","link":"#_5-分布式系统解决方案","children":[{"level":3,"title":"5.1 缓存","slug":"_5-1-缓存","link":"#_5-1-缓存","children":[]},{"level":3,"title":"5.2 全局唯一ID","slug":"_5-2-全局唯一id","link":"#_5-2-全局唯一id","children":[]},{"level":3,"title":"5.3 分布式锁","slug":"_5-3-分布式锁","link":"#_5-3-分布式锁","children":[]},{"level":3,"title":"5.4 分布式事务","slug":"_5-4-分布式事务","link":"#_5-4-分布式事务","children":[]},{"level":3,"title":"5.5 分布式任务","slug":"_5-5-分布式任务","link":"#_5-5-分布式任务","children":[]},{"level":3,"title":"5.6 分布式Session","slug":"_5-6-分布式session","link":"#_5-6-分布式session","children":[]},{"level":3,"title":"5.7 分布式链路追踪","slug":"_5-7-分布式链路追踪","link":"#_5-7-分布式链路追踪","children":[]},{"level":3,"title":"5.8 布隆过滤器","slug":"_5-8-布隆过滤器","link":"#_5-8-布隆过滤器","children":[]},{"level":3,"title":"5.9 一灰灰的小结","slug":"_5-9-一灰灰的小结","link":"#_5-9-一灰灰的小结","children":[]}]},{"level":2,"title":"6.一灰灰的总结","slug":"_6-一灰灰的总结","link":"#_6-一灰灰的总结","children":[{"level":3,"title":"6.1 综述","slug":"_6-1-综述","link":"#_6-1-综述","children":[]},{"level":3,"title":"6.2 题外话","slug":"_6-2-题外话","link":"#_6-2-题外话","children":[]}]}],"git":{"createdTime":1722243535000,"updatedTime":1722243535000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":38.35,"words":11505},"filePathRelative":"column/arch/distribute/设计模式/01.分布式设计模式综述.md","localizedDate":"2022年7月8日","excerpt":"<p>天天说分布式分布式，那么我们是否知道什么是分布式，分布式会遇到什么问题，有哪些理论支撑，有哪些经典的应对方案，业界是如何设计并保证分布式系统的高可用呢？</p>\\n<h2> 1.架构设计</h2>\\n<p>这一节将从一些经典的开源系统架构设计出发，来看一下，如何设计一个高质量的分布式系统；</p>\\n<p>而一般的设计出发点，无外乎</p>\\n<ul>\\n<li>冗余：简单理解为找个备胎，现任挂掉之后，备胎顶上</li>\\n<li>拆分：不能让一个人承担所有的重任，拆分下，每个人负担一部分，压力均摊</li>\\n</ul>\\n<h3> 1.1 主备架构</h3>\\n<p>给现有的服务搭建一个备用的服务，两者功能完全一致，区别在于平时只有主应用对外提供服务能力；而备应用则只需要保证与主应用能力一致，随时待机即可，并不用对外提供服务；当主应用出现故障之后，将备应用切换为主应用，原主应用下线；迅速的主备切换可以有效的缩短故障时间</p>","copyright":{},"autoDesc":true}');export{l as data};
