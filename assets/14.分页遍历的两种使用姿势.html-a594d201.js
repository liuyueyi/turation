const t=JSON.parse('{"key":"v-1a573484","path":"/java/skill/14.%E5%88%86%E9%A1%B5%E9%81%8D%E5%8E%86%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html","title":"14.分页遍历的两种使用姿势","lang":"zh-CN","frontmatter":{"title":"14.分页遍历的两种使用姿势","order":14,"tag":["Java","Iterator"],"category":["Java","JDK"],"date":"2021-02-25T08:05:07.000Z","keywords":"Iterator Java JDK 迭代器 遍历","description":"实战14：分页遍历得两种实现策略 在日常开发中，分页遍历迭代的场景可以说非常普遍了，比如扫表，每次捞100条数据，然后遍历这100条数据，依次执行某个业务逻辑；这100条执行完毕之后，再加载下一百条数据，直到扫描完毕 那么要实现上面这种分页迭代遍历的场景，我们可以怎么做呢 本文将介绍两种使用姿势 常规的使用方法 借助Iterator的使用姿势","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/skill/14.%E5%88%86%E9%A1%B5%E9%81%8D%E5%8E%86%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"14.分页遍历的两种使用姿势"}],["meta",{"property":"og:description","content":"实战14：分页遍历得两种实现策略 在日常开发中，分页遍历迭代的场景可以说非常普遍了，比如扫表，每次捞100条数据，然后遍历这100条数据，依次执行某个业务逻辑；这100条执行完毕之后，再加载下一百条数据，直到扫描完毕 那么要实现上面这种分页迭代遍历的场景，我们可以怎么做呢 本文将介绍两种使用姿势 常规的使用方法 借助Iterator的使用姿势"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T14:22:08.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Iterator"}],["meta",{"property":"article:published_time","content":"2021-02-25T08:05:07.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T14:22:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14.分页遍历的两种使用姿势\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-25T08:05:07.000Z\\",\\"dateModified\\":\\"2023-02-17T14:22:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 实现方式","slug":"_1-实现方式","link":"#_1-实现方式","children":[{"level":3,"title":"1.1. 数据查询模拟","slug":"_1-1-数据查询模拟","link":"#_1-1-数据查询模拟","children":[]},{"level":3,"title":"1.2. 基本实现方式","slug":"_1-2-基本实现方式","link":"#_1-2-基本实现方式","children":[]},{"level":3,"title":"1.3. 迭代器实现方式","slug":"_1-3-迭代器实现方式","link":"#_1-3-迭代器实现方式","children":[]}]}],"git":{"createdTime":1676643728000,"updatedTime":1676643728000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":2.89,"words":867},"filePathRelative":"java/skill/14.分页遍历的两种使用姿势.md","localizedDate":"2021年2月25日","excerpt":"<h1> 实战14：分页遍历得两种实现策略</h1>\\n<p>在日常开发中，分页遍历迭代的场景可以说非常普遍了，比如扫表，每次捞100条数据，然后遍历这100条数据，依次执行某个业务逻辑；这100条执行完毕之后，再加载下一百条数据，直到扫描完毕</p>\\n<p>那么要实现上面这种分页迭代遍历的场景，我们可以怎么做呢</p>\\n<p>本文将介绍两种使用姿势</p>\\n<ul>\\n<li>常规的使用方法</li>\\n<li>借助Iterator的使用姿势</li>\\n</ul>\\n","copyright":{},"autoDesc":true}');export{t as data};
