const n=JSON.parse('{"key":"v-331ebeb0","path":"/column/app/trace-watch-dog/09.%E8%80%97%E6%97%B6%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91.html","title":"9.耗时输出重定向","lang":"zh-CN","frontmatter":{"order":9,"title":"9.耗时输出重定向","tag":["trace-watch-dog"],"category":["技术组件"],"date":"2024-09-01T18:19:48.000Z","keywords":["Java","trace"],"description":"前面实现的耗时分布输出直接以日志的方式进行打印，在实际的业务场景中，可能希望以其他的方式（比如Prometheus）来收集耗时，基于这种场景，我们的组件又可以怎么进行演进呢？ 1. 控制日志是否输出 首先我们来看一下，若我不希望输出日志，最简单的实现方式就是直接在TraceRecoder中添加变量，用于控制是否进行输出日志 首先改造一下DefaultTraceRecoder，新增logEnable变量 /** * 控制是否打印日志的条件 */ private boolean logEnable; public DefaultTraceRecoder() { this(AsyncUtil.executorService, \\"TraceDog\\", true); } public DefaultTraceRecoder(ExecutorService executorService, String task, boolean logEnable) { this.traceName = task; list = new CopyOnWriteArrayList&lt;&gt;(); // 支持排序的耗时记录 cost = new ConcurrentSkipListMap&lt;&gt;(); this.executorService = TtlExecutors.getTtlExecutorService(executorService); this.markExecuteOver = false; this.logEnable = logEnable; start(task); MdcUtil.setGlobalTraceId(MdcUtil.fetchGlobalMsgIdForTraceRecoder()); }","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/column/app/trace-watch-dog/09.%E8%80%97%E6%97%B6%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"9.耗时输出重定向"}],["meta",{"property":"og:description","content":"前面实现的耗时分布输出直接以日志的方式进行打印，在实际的业务场景中，可能希望以其他的方式（比如Prometheus）来收集耗时，基于这种场景，我们的组件又可以怎么进行演进呢？ 1. 控制日志是否输出 首先我们来看一下，若我不希望输出日志，最简单的实现方式就是直接在TraceRecoder中添加变量，用于控制是否进行输出日志 首先改造一下DefaultTraceRecoder，新增logEnable变量 /** * 控制是否打印日志的条件 */ private boolean logEnable; public DefaultTraceRecoder() { this(AsyncUtil.executorService, \\"TraceDog\\", true); } public DefaultTraceRecoder(ExecutorService executorService, String task, boolean logEnable) { this.traceName = task; list = new CopyOnWriteArrayList&lt;&gt;(); // 支持排序的耗时记录 cost = new ConcurrentSkipListMap&lt;&gt;(); this.executorService = TtlExecutors.getTtlExecutorService(executorService); this.markExecuteOver = false; this.logEnable = logEnable; start(task); MdcUtil.setGlobalTraceId(MdcUtil.fetchGlobalMsgIdForTraceRecoder()); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T07:47:09.000Z"}],["meta",{"property":"article:tag","content":"trace-watch-dog"}],["meta",{"property":"article:published_time","content":"2024-09-01T18:19:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-02T07:47:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9.耗时输出重定向\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-01T18:19:48.000Z\\",\\"dateModified\\":\\"2024-09-02T07:47:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"1. 控制日志是否输出","slug":"_1-控制日志是否输出","link":"#_1-控制日志是否输出","children":[]},{"level":3,"title":"2. 日志输出重定向","slug":"_2-日志输出重定向","link":"#_2-日志输出重定向","children":[]},{"level":3,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]}],"git":{"createdTime":1725198783000,"updatedTime":1725263229000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":2}]},"readingTime":{"minutes":7.27,"words":2182},"filePathRelative":"column/app/trace-watch-dog/09.耗时输出重定向.md","localizedDate":"2024年9月1日","excerpt":"<p>前面实现的耗时分布输出直接以日志的方式进行打印，在实际的业务场景中，可能希望以其他的方式（比如Prometheus）来收集耗时，基于这种场景，我们的组件又可以怎么进行演进呢？</p>\\n<h3> 1. 控制日志是否输出</h3>\\n<p>首先我们来看一下，若我不希望输出日志，最简单的实现方式就是直接在<code>TraceRecoder</code>中添加变量，用于控制是否进行输出日志</p>\\n<p>首先改造一下<code>DefaultTraceRecoder</code>，新增<code>logEnable</code>变量</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 控制是否打印日志的条件\\n */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">boolean</span> logEnable<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">DefaultTraceRecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">AsyncUtil</span><span class=\\"token punctuation\\">.</span>executorService<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"TraceDog\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">DefaultTraceRecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ExecutorService</span> executorService<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> task<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">boolean</span> logEnable<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>traceName <span class=\\"token operator\\">=</span> task<span class=\\"token punctuation\\">;</span>\\n    list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CopyOnWriteArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 支持排序的耗时记录</span>\\n    cost <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConcurrentSkipListMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>executorService <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">TtlExecutors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getTtlExecutorService</span><span class=\\"token punctuation\\">(</span>executorService<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>markExecuteOver <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>logEnable <span class=\\"token operator\\">=</span> logEnable<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span>task<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">MdcUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setGlobalTraceId</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">MdcUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fetchGlobalMsgIdForTraceRecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
