const e=JSON.parse('{"key":"v-2d09fde4","path":"/java/skill/31.%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.html","title":"31.深拷贝浅拷贝及对象拷贝的两种方式","lang":"zh-CN","frontmatter":{"title":"31.深拷贝浅拷贝及对象拷贝的两种方式","order":31,"tag":["JDK","编程技巧"],"category":["Java","编程技巧"],"date":"2017-12-17T19:53:51.000Z","keywords":"JDK 深拷贝 浅拷贝","description":"实战31：深拷贝浅拷贝及对象拷贝的两种方式 1. Java之Clone 1.1 背景 对象拷贝，是一个非常基础的内容了，为什么会单独的把这个领出来讲解，主要是先前遇到了一个非常有意思的场景 有一个任务，需要解析类xml标记语言，然后生成document对象，之后将会有一系列针对document对象的操作 通过实际的测试，发现生成Document对象是比较耗时的一个操作，再加上这个任务场景中，需要解析的xml文档是固定的几个，那么一个可以优化的思路就是能不能缓存住创建后的Document对象，在实际使用的时候clone一份出来","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/skill/31.%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"31.深拷贝浅拷贝及对象拷贝的两种方式"}],["meta",{"property":"og:description","content":"实战31：深拷贝浅拷贝及对象拷贝的两种方式 1. Java之Clone 1.1 背景 对象拷贝，是一个非常基础的内容了，为什么会单独的把这个领出来讲解，主要是先前遇到了一个非常有意思的场景 有一个任务，需要解析类xml标记语言，然后生成document对象，之后将会有一系列针对document对象的操作 通过实际的测试，发现生成Document对象是比较耗时的一个操作，再加上这个任务场景中，需要解析的xml文档是固定的几个，那么一个可以优化的思路就是能不能缓存住创建后的Document对象，在实际使用的时候clone一份出来"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T14:22:08.000Z"}],["meta",{"property":"article:tag","content":"JDK"}],["meta",{"property":"article:tag","content":"编程技巧"}],["meta",{"property":"article:published_time","content":"2017-12-17T19:53:51.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T14:22:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"31.深拷贝浅拷贝及对象拷贝的两种方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-12-17T19:53:51.000Z\\",\\"dateModified\\":\\"2023-02-17T14:22:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. Java之Clone","slug":"_1-java之clone","link":"#_1-java之clone","children":[{"level":3,"title":"1.1 背景","slug":"_1-1-背景","link":"#_1-1-背景","children":[]},{"level":3,"title":"1.2 内容说明","slug":"_1-2-内容说明","link":"#_1-2-内容说明","children":[]}]},{"level":2,"title":"2. 深拷贝和浅拷贝","slug":"_2-深拷贝和浅拷贝","link":"#_2-深拷贝和浅拷贝","children":[{"level":3,"title":"2.1 定义说明","slug":"_2-1-定义说明","link":"#_2-1-定义说明","children":[]},{"level":3,"title":"2.2 浅拷贝","slug":"_2-2-浅拷贝","link":"#_2-2-浅拷贝","children":[]},{"level":3,"title":"2.3 深拷贝","slug":"_2-3-深拷贝","link":"#_2-3-深拷贝","children":[]},{"level":3,"title":"2.4 应用场景区分","slug":"_2-4-应用场景区分","link":"#_2-4-应用场景区分","children":[]}]},{"level":2,"title":"3. 对象拷贝工具","slug":"_3-对象拷贝工具","link":"#_3-对象拷贝工具","children":[{"level":3,"title":"3.1 借助反射实现对象拷贝","slug":"_3-1-借助反射实现对象拷贝","link":"#_3-1-借助反射实现对象拷贝","children":[]},{"level":3,"title":"3.2 代理的方式实现对象拷贝","slug":"_3-2-代理的方式实现对象拷贝","link":"#_3-2-代理的方式实现对象拷贝","children":[]}]},{"level":2,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[{"level":3,"title":"3.1 深拷贝和浅拷贝","slug":"_3-1-深拷贝和浅拷贝","link":"#_3-1-深拷贝和浅拷贝","children":[]},{"level":3,"title":"3.2 对象拷贝的两种方法","slug":"_3-2-对象拷贝的两种方法","link":"#_3-2-对象拷贝的两种方法","children":[]}]}],"git":{"createdTime":1676643728000,"updatedTime":1676643728000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":9.48,"words":2843},"filePathRelative":"java/skill/31.深拷贝浅拷贝及对象拷贝的两种方式.md","localizedDate":"2017年12月17日","excerpt":"<h1> 实战31：深拷贝浅拷贝及对象拷贝的两种方式</h1>\\n<h2> 1. Java之Clone</h2>\\n<h3> 1.1 背景</h3>\\n<p>对象拷贝，是一个非常基础的内容了，为什么会单独的把这个领出来讲解，主要是先前遇到了一个非常有意思的场景</p>\\n<p>有一个任务，需要解析类xml标记语言，然后生成document对象，之后将会有一系列针对document对象的操作</p>\\n<p>通过实际的测试，发现生成Document对象是比较耗时的一个操作，再加上这个任务场景中，需要解析的xml文档是固定的几个，那么一个可以优化的思路就是能不能缓存住创建后的Document对象，在实际使用的时候clone一份出来</p>","copyright":{},"autoDesc":true}');export{e as data};
