const e=JSON.parse('{"key":"v-3cf53cd6","path":"/spring/web/Web%E4%B8%89%E5%89%91%E5%AE%A2/210804-SpringBoot%E7%B3%BB%E5%88%97Web%E7%AF%87%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8Interceptor%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D.html","title":"6.拦截器Interceptor使用姿势介绍","lang":"zh-CN","frontmatter":{"order":6,"title":"6.拦截器Interceptor使用姿势介绍","tag":["Interceptor"],"category":["SpringBoot","WEB系列","Interceptor"],"date":"2021-08-04T21:50:46.000Z","keywords":"Spring SringBoot SpringMVC Intercepotr 拦截器","description":"在SpringMVC中，拦截器与Filter两者的应用场景好像差不多，最大的区别可能是前者属于Spring的特产，而后者则是Servlert三剑客中的一个，它们本质的区别在于两者发生的时机不一致 Filter: 在执行Servlet#service方法之前，会执行过滤器；执行完毕之后也会经过过滤器 Interceptor: 对会话进行拦截，可以在调用Handler方法之前，视图渲染之前，方法返回之前三个时机触发回调 基于上面的触发时间的不同，两者可以做的事情也不尽相同 Filter: 操作Request/Response Interceptor: 操作Request/Response/handler/modelAndView/exception 接下来本文将来看一下，在SpringMVC中拦截器的使用姿势","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/spring/web/Web%E4%B8%89%E5%89%91%E5%AE%A2/210804-SpringBoot%E7%B3%BB%E5%88%97Web%E7%AF%87%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8Interceptor%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"6.拦截器Interceptor使用姿势介绍"}],["meta",{"property":"og:description","content":"在SpringMVC中，拦截器与Filter两者的应用场景好像差不多，最大的区别可能是前者属于Spring的特产，而后者则是Servlert三剑客中的一个，它们本质的区别在于两者发生的时机不一致 Filter: 在执行Servlet#service方法之前，会执行过滤器；执行完毕之后也会经过过滤器 Interceptor: 对会话进行拦截，可以在调用Handler方法之前，视图渲染之前，方法返回之前三个时机触发回调 基于上面的触发时间的不同，两者可以做的事情也不尽相同 Filter: 操作Request/Response Interceptor: 操作Request/Response/handler/modelAndView/exception 接下来本文将来看一下，在SpringMVC中拦截器的使用姿势"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-10T04:50:05.000Z"}],["meta",{"property":"article:tag","content":"Interceptor"}],["meta",{"property":"article:published_time","content":"2021-08-04T21:50:46.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-10T04:50:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.拦截器Interceptor使用姿势介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-04T21:50:46.000Z\\",\\"dateModified\\":\\"2023-02-10T04:50:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 项目搭建","slug":"i-项目搭建","link":"#i-项目搭建","children":[{"level":3,"title":"1. 项目依赖","slug":"_1-项目依赖","link":"#_1-项目依赖","children":[]}]},{"level":2,"title":"II. 拦截器","slug":"ii-拦截器","link":"#ii-拦截器","children":[{"level":3,"title":"1. 自定义拦截器","slug":"_1-自定义拦截器","link":"#_1-自定义拦截器","children":[]},{"level":3,"title":"2. 注册与测试","slug":"_2-注册与测试","link":"#_2-注册与测试","children":[]},{"level":3,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[]}]},{"level":2,"title":"III. 不能错过的源码和相关知识点","slug":"iii-不能错过的源码和相关知识点","link":"#iii-不能错过的源码和相关知识点","children":[{"level":3,"title":"0. 项目","slug":"_0-项目","link":"#_0-项目","children":[]}]}],"git":{"createdTime":1676004605000,"updatedTime":1676004605000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":3.34,"words":1002},"filePathRelative":"spring/web/Web三剑客/210804-SpringBoot系列Web篇之拦截器Interceptor使用姿势介绍.md","localizedDate":"2021年8月4日","excerpt":"<p>在SpringMVC中，拦截器与Filter两者的应用场景好像差不多，最大的区别可能是前者属于Spring的特产，而后者则是Servlert三剑客中的一个，它们本质的区别在于两者发生的时机不一致</p>\\n<ul>\\n<li>Filter: 在执行Servlet#service方法之前，会执行过滤器；执行完毕之后也会经过过滤器</li>\\n<li>Interceptor: 对会话进行拦截，可以在调用Handler方法之前，视图渲染之前，方法返回之前三个时机触发回调</li>\\n</ul>\\n<p>基于上面的触发时间的不同，两者可以做的事情也不尽相同</p>\\n<ul>\\n<li>Filter: 操作Request/Response</li>\\n<li>Interceptor: 操作Request/Response/handler/modelAndView/exception</li>\\n</ul>\\n<p>接下来本文将来看一下，在SpringMVC中拦截器的使用姿势</p>\\n","copyright":{},"autoDesc":true}');export{e as data};
