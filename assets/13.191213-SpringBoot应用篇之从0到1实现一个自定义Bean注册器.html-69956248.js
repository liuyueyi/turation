const e=JSON.parse('{"key":"v-7ec16547","path":"/spring/basic/%E5%AE%9E%E6%88%98/13.191213-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89Bean%E6%B3%A8%E5%86%8C%E5%99%A8.html","title":"3.从0到1实现一个自定义Bean注册器（应用篇）","lang":"zh-CN","frontmatter":{"order":13,"title":"3.从0到1实现一个自定义Bean注册器（应用篇）","banner":"/imgs/191213/logo.jpg","tag":["Bean","应用"],"category":["SpringBoot","基础系列","Bean","应用篇"],"date":"2019-12-13T17:21:33.000Z","keywords":"SpringBoot Bean ImportBeanDefinitionRegistrar Import ClassPathBeanDefinitionScanner Bean注册","description":"我们知道在spring中可以通过@Component，@Service, @Repository 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助@Bean来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？ 我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似@Component的效果呢？ 接下来本文将介绍，如果通过ImportBeanDefinitionRegistrar结合自定义注解来实现bean注册，主要用到的知识点如下： ImportBeanDefinitionRegistrar bean注册的核心类 @Import 导入配置 ClassPathBeanDefinitionScanner","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/spring/basic/%E5%AE%9E%E6%88%98/13.191213-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89Bean%E6%B3%A8%E5%86%8C%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"3.从0到1实现一个自定义Bean注册器（应用篇）"}],["meta",{"property":"og:description","content":"我们知道在spring中可以通过@Component，@Service, @Repository 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助@Bean来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？ 我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似@Component的效果呢？ 接下来本文将介绍，如果通过ImportBeanDefinitionRegistrar结合自定义注解来实现bean注册，主要用到的知识点如下： ImportBeanDefinitionRegistrar bean注册的核心类 @Import 导入配置 ClassPathBeanDefinitionScanner"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191213/logo.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-03T08:06:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"3.从0到1实现一个自定义Bean注册器（应用篇）"}],["meta",{"property":"article:tag","content":"Bean"}],["meta",{"property":"article:tag","content":"应用"}],["meta",{"property":"article:published_time","content":"2019-12-13T17:21:33.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-03T08:06:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.从0到1实现一个自定义Bean注册器（应用篇）\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/tutorial/imgs/191213/logo.jpg\\"],\\"datePublished\\":\\"2019-12-13T17:21:33.000Z\\",\\"dateModified\\":\\"2023-02-03T08:06:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"I. 自定义bean注册器","slug":"i-自定义bean注册器","link":"#i-自定义bean注册器","children":[{"level":3,"title":"0. 寻找\\"致敬\\"对象","slug":"_0-寻找-致敬-对象","link":"#_0-寻找-致敬-对象","children":[]},{"level":3,"title":"1. 准备篇","slug":"_1-准备篇","link":"#_1-准备篇","children":[]},{"level":3,"title":"2. 开始实现","slug":"_2-开始实现","link":"#_2-开始实现","children":[]}]},{"level":2,"title":"II. 测试与小结","slug":"ii-测试与小结","link":"#ii-测试与小结","children":[{"level":3,"title":"1. case0 Meta注解类","slug":"_1-case0-meta注解类","link":"#_1-case0-meta注解类","children":[]},{"level":3,"title":"2. case1 Meat注解类，依赖Bean","slug":"_2-case1-meat注解类-依赖bean","link":"#_2-case1-meat注解类-依赖bean","children":[]},{"level":3,"title":"3. case2 bean 依赖 Meta注解类","slug":"_3-case2-bean-依赖-meta注解类","link":"#_3-case2-bean-依赖-meta注解类","children":[]},{"level":3,"title":"4. 测试","slug":"_4-测试","link":"#_4-测试","children":[]},{"level":3,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]}]},{"level":2,"title":"II. 其他","slug":"ii-其他","link":"#ii-其他","children":[{"level":3,"title":"0. 项目","slug":"_0-项目","link":"#_0-项目","children":[]}]}],"git":{"createdTime":1675411610000,"updatedTime":1675411610000,"contributors":[{"name":"YiHui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":6.28,"words":1884},"filePathRelative":"spring/basic/实战/13.191213-SpringBoot应用篇之从0到1实现一个自定义Bean注册器.md","localizedDate":"2019年12月13日","excerpt":"<p>我们知道在spring中可以通过<code>@Component</code>，<code>@Service</code>, <code>@Repository</code> 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助<code>@Bean</code>来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？</p>\\n<p>我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似<code>@Component</code>的效果呢？</p>\\n<p>接下来本文将介绍，如果通过<code>ImportBeanDefinitionRegistrar</code>结合自定义注解来实现bean注册，主要用到的知识点如下：</p>\\n<ul>\\n<li><code>ImportBeanDefinitionRegistrar</code> bean注册的核心类</li>\\n<li><code>@Import</code> 导入配置</li>\\n<li><code>ClassPathBeanDefinitionScanner</code></li>\\n</ul>\\n","copyright":{},"autoDesc":true}');export{e as data};
